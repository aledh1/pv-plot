<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Datadog.Trace</name>
    </assembly>
    <members>
        <member name="T:Datadog.Trace.Activity.Handlers.DefaultActivityHandler">
            <summary>
            The default handler catches an activity and creates a datadog span from it.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Activity.Handlers.IgnoreActivityHandler">
            <summary>
            Ignore Activity Handler catches existing integrations that also emits activities.
            </summary>
        </member>
        <member name="T:Datadog.Trace.AgentHttpHeaderNames">
            <summary>
            Names of HTTP headers that can be used when sending traces to the Trace Agent.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.Language">
            <summary>
            The language-specific tracer that generated this span.
            Always ".NET" for the .NET Tracer.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.LanguageInterpreter">
            <summary>
            The interpreter for the given language, e.g. ".NET Framework" or ".NET Core".
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.LanguageVersion">
            <summary>
            The interpreter version for the given language, e.g. "4.7.2" for .NET Framework or "2.1" for .NET Core.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.TracerVersion">
            <summary>
            The version of the tracer that generated this span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.TraceCount">
            <summary>
            The number of unique traces per request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.ContainerId">
            <summary>
            The id of the container where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.ComputedTopLevelSpan">
            <summary>
            Tells the agent whether top-level spans are computed by the tracer
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.AgentVersion">
            <summary>
            Version reported by the Datadog agent
            </summary>
        </member>
        <member name="P:Datadog.Trace.AgentHttpHeaderNames.DefaultHeaders">
            <summary>
            Gets the default constant header that should be added to any request to the agent
            </summary>
        </member>
        <member name="T:Datadog.Trace.AgentProcessManager">
            <summary>
            This class is used to manage agent processes in contexts where the user can not, such as Azure App Services.
            </summary>
        </member>
        <member name="M:Datadog.Trace.AgentProcessManager.Initialize">
            <summary>
            Invoked by the loader
            </summary>
        </member>
        <member name="P:Datadog.Trace.AgentProcessManager.ProcessMetadata.IsBeingManaged">
            <summary>
            Gets or sets a value indicating whether this is being managed by active keep alive tasks.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Agent.AgentWriter._activeBuffer">
            <summary>
            The currently active buffer.
            Note: Thread-safetiness in this class relies on the fact that only the serialization thread can change the active buffer
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.AgentWriter.FlushBuffers(System.Boolean)">
            <summary>
            Flush the active buffer, and the fallback buffer if full
            </summary>
            <param name="flushAllBuffers">If set to true, then flush the back buffer even if not full</param>
            <returns>Async operation</returns>
        </member>
        <member name="M:Datadog.Trace.Agent.IKeepRateCalculator.IncrementKeeps(System.Int32)">
            <summary>
            Increment the number of kept traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.IKeepRateCalculator.IncrementDrops(System.Int32)">
            <summary>
            Increment the number of dropped traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.IKeepRateCalculator.GetKeepRate">
            <summary>
            Get the current keep rate for traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.IKeepRateCalculator.CancelUpdates">
            <summary>
            Stop updating the buckets. The current Keep rate can continue to be read.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Agent.MovingAverageKeepRateCalculator">
            <summary>
            Used to calculate the Trace Keep Rate, tracking the number of
            traces kept and dropped that should have been sent to the agent.
            Traces that are subsequently dropped by the agent due to sampling
            will not count as dropped in this rate.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.IncrementKeeps(System.Int32)">
            <summary>
            Increment the number of kept traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.IncrementDrops(System.Int32)">
            <summary>
            Increment the number of dropped traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.GetKeepRate">
            <summary>
            Get the current keep rate for traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.CancelUpdates">
            <summary>
            Stop updating the buckets. The current Keep rate can continue to be read.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.UpdateBucket">
            <summary>
            Update the current rate. Internal for testing only. Should not be called in normal usage.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Agent.TracesTransportType">
            <summary>
            Available types of transports.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Agent.TracesTransportType.Default">
            <summary>
            Default transport.
            Defers transport logic to agent API.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Agent.TracesTransportType.WindowsNamedPipe">
            <summary>
            Windows Named Pipe strategy.
            Transport used primarily for Azure App Service.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Agent.TracesTransportType.UnixDomainSocket">
            <summary>
            Unix Domain Socket strategy.
            Transport used primarily for kubernetes
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.RateLimiterTimer.UpdateTracesCounter">
            <summary>
            check if a trace can be added, otherwise increase the amount of exceeded traces
            </summary>
            <returns>returns the number of exceeded traces, 0 if ok</returns>
        </member>
        <member name="T:Datadog.Trace.AppSec.Security">
            <summary>
            The Secure is responsible coordinating app sec
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Security.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.AppSec.Security"/> class with default settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Security.Instance">
            <summary>
            Gets or sets the global <see cref="T:Datadog.Trace.AppSec.Security"/> instance.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Security.Datadog#Trace#AppSec#IDatadogSecurity#InstrumentationGateway">
            <summary>
            Gets <see cref="P:Datadog.Trace.AppSec.Security.InstrumentationGateway"/> instance
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Security.Datadog#Trace#AppSec#IDatadogSecurity#Settings">
            <summary>
            Gets <see cref="T:Datadog.Trace.AppSec.SecuritySettings"/> instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Security.Dispose">
            <summary>
            Frees resources
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Security.TryGetUsingIntegratedPipelineBool">
            <summary>
            ! This method should be called from within a try-catch block !
            If the application is running in partial trust, then trying to call this method will result in
            a SecurityException to be thrown at the method CALLSITE, not inside the <c>TryGetUsingIntegratedPipelineBool(..)</c> method itself.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.SecuritySettings.ExtraHeaders">
            <summary>
            Gets keys indicating the optional custom appsec headers the user wants to send.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.SecuritySettings.Rules">
            <summary>
            Gets the path to a user-defined WAF Rules file.
            Default is null, meaning uses embedded rule set
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.SecuritySettings.KeepTraces">
            <summary>
            Gets a value indicating whether traces should be mark traces with manual keep below trace rate limit
            Default is true
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.SecuritySettings.TraceRateLimit">
            <summary>
            Gets the limit of AppSec traces sent per second with an integer value, strictly positive.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.SecuritySettings.WafTimeoutMicroSeconds">
            <summary>
            Gets the limit for the amount of time the WAF will perform analysis
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.SecuritySettings.ObfuscationParameterKeyRegex">
            <summary>
            Gets the regex that will be used to obfuscate possible senative data in keys that are highlighted WAF as potentially malicious
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.SecuritySettings.ObfuscationParameterValueRegex">
            <summary>
            Gets the regex that will be used to obfuscate possible senative data in values that are highlighted WAF as potentially malicious
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Transports.Http.IpExtractor.GetRealIpFromValues(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Can be a list of single or comma separated values ips like [ "192.68.12.1", "172.53.22.11, 181.92.91.1, 193.92.91.1".. ]
            </summary>
            <param name="headerValues">all the extracted values from ip related headers</param>
            <param name="https">is a secure connection</param>
            <returns>return ip and port, may be null</returns>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DdwafResultStruct.TotalRuntime">
            <summary>
            Total WAF runtime in nanoseconds
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DdwafRuleSetInfoStruct.Loaded">
            <summary>
            Number of rules successfully loaded
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DdwafRuleSetInfoStruct.Failed">
            <summary>
            Number of rules which failed to parse
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DdwafRuleSetInfoStruct.Errors">
            <summary>
            Map from an error string to an array of all the rule ids for which that error was raised. { error: [rule_ids]}
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DdwafRuleSetInfoStruct.Version">
            <summary>
            Ruleset version
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_SIGNED">
            Value shall be decoded as a int64_t (or int32_t on 32bits platforms). *
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_UNSIGNED">
            Value shall be decoded as a uint64_t (or uint32_t on 32bits platforms). *
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_STRING">
            Value shall be decoded as a UTF-8 string of length nbEntries. *
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_ARRAY">
            Value shall be decoded as an array of ddwaf_object of length nbEntries, each item having no parameterName. *
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_MAP">
            Value shall be decoded as an array of ddwaf_object of length nbEntries, each item having a parameterName. *
        </member>
        <member name="T:Datadog.Trace.AppSec.Waf.NativeBindings.NativeLibrary">
            <summary>
            APIs for managing Native Libraries
            </summary>
        </member>
        <member name="T:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-value-types
            https://docs.microsoft.com/en-us/windows/desktop/api/Winreg/nf-winreg-reggetvaluea
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.Any">
            <summary>
            Any - No type restriction. (0x0000ffff)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegNone">
            <summary>
            Restrict type to REG_NONE. (0x00000001)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.Noexpand">
            <summary>
            Do not automatically expand environment strings if the value is of type REG_EXPAND_SZ. (0x10000000)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegBinary">
            <summary>
            Bytes - Restrict type to REG_BINARY. (0x00000008)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.Dword">
            <summary>
            Int32 - Restrict type to 32-bit RRF_RT_REG_BINARY | RRF_RT_REG_DWORD. (0x00000018)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegDword">
            <summary>
            Int32 - Restrict type to REG_DWORD. (0x00000010)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.Qword">
            <summary>
            Int64 - Restrict type to 64-bit RRF_RT_REG_BINARY | RRF_RT_REG_DWORD. (0x00000048)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegQword">
            <summary>
            Int64 - Restrict type to REG_QWORD. (0x00000040)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegSz">
            <summary>
            A null-terminated string.
            This will be either a Unicode or an ANSI string,
            depending on whether you use the Unicode or ANSI functions.
            Restrict type to REG_SZ. (0x00000002)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegMultiSz">
            <summary>
            A sequence of null-terminated strings, terminated by an empty string (\0).
            The following is an example:
            String1\0String2\0String3\0LastString\0\0
            The first \0 terminates the first string, the second to the last \0 terminates the last string,
            and the final \0 terminates the sequence. Note that the final terminator must be factored into the length of the string.
            Restrict type to REG_MULTI_SZ. (0x00000020)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegExpandSz">
            <summary>
            A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%").
            It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.
            To expand the environment variable references, use the ExpandEnvironmentStrings function.
            Restrict type to REG_EXPAND_SZ. (0x00000004)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RrfZeroonfailure">
            <summary>
            If pvData is not NULL, set the contents of the buffer to zeroes on failure. (0x20000000)
            </summary>
        </member>
        <member name="T:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RType">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-value-types
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Waf.NativeBindings.WafNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.AppSec.Waf.NativeBindings.WafNative"/> class.
            </summary>
            <param name="handle">Can't be a null pointer. Waf library must be loaded by now</param>
        </member>
        <member name="M:Datadog.Trace.AppSec.Waf.NativeBindings.WafNative.RuleSetInfoFree(Datadog.Trace.AppSec.Waf.NativeBindings.DdwafRuleSetInfoStruct@)">
            <summary>
            Only this function needs to be called on DdwafRuleSetInfoStruct, no need to dispose the Errors object inside because waf takes care of it
            </summary>
            <param name="output">the rulsetinfo structure</param>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.Result.AggregatedTotalRuntime">
            <summary>
            Gets the total runtime in microseconds
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.Result.AggregatedTotalRuntimeWithBindings">
            <summary>
            Gets the total runtime in microseconds with parameter passing to the waf
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.Parameter.Address">
            <summary>
            Gets or sets the address containing the value that triggered the rule. For example
            ``http.server.query``.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.Parameter.Highlight">
            <summary>
            Gets or sets the part of the value that triggered the rule.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.Parameter.KeyPath">
            <summary>
            Gets or sets the path of the value that triggered the rule. For example ``["query", 0]`` to refer to
            the value in ``{"query": ["triggering value"]}``.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.Parameter.Value">
            <summary>
            Gets or sets the value that triggered the rule.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.RuleMatch.Operator">
            <summary>
            Gets or sets the rule operator that triggered this event. For example, ``match_regex`` or
            ``phrase_match``.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.RuleMatch.OperatorValue">
            <summary>
            Gets or sets the rule operator operand that triggered this event. For example, the word that triggered
            using the ``phrase_match`` operator.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypesManaged.InitializationResult.LoadedRules">
            <summary>
            Gets the number of rules successfully loaded
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Waf.Waf.Create(System.String,System.String,System.String)">
            <summary>
            Loads library and configure it with the ruleset file
            </summary>
            <param name="obfuscationParameterKeyRegex">the regex that will be used to obfuscate possible senative data in keys that are highlighted WAF as potentially malicious,
            empty string means use default embedded in the WAF</param>
            <param name="obfuscationParameterValueRegex">the regex that will be used to obfuscate possible senative data in values that are highlighted WAF as potentially malicious,
            empty string means use default embedded in the WAF</param>
            <param name="rulesFile">can be null, means use rules embedded in the manifest </param>
            <returns>the waf wrapper around waf native</returns>
        </member>
        <member name="T:Datadog.Trace.AspNet.TracingHttpModule">
            <summary>
                IHttpModule used to trace within an ASP.NET HttpApplication request
            </summary>
        </member>
        <member name="M:Datadog.Trace.AspNet.TracingHttpModule.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Datadog.Trace.AspNet.TracingHttpModule" /> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.AspNet.TracingHttpModule.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Datadog.Trace.AspNet.TracingHttpModule" /> class.
            </summary>
            <param name="operationName">The operation name to be used for the trace/span data generated</param>
        </member>
        <member name="M:Datadog.Trace.AspNet.TracingHttpModule.Init(System.Web.HttpApplication)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.AspNet.TracingHttpModule.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Ci.Agent.CIAgentlessWriter">
            <summary>
            CI Visibility Agentless Writer
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.Agent.CIAgentWriter">
            <summary>
            CI Visibility Agent Writer
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.Agent.CIWriterFileSender">
            <summary>
            This class is for debugging purposes only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.Agent.IEventWriter">
            <summary>
            Event Writer interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.Enabled">
            <summary>
            Gets a value indicating whether the CI Visibility mode was enabled by configuration
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.Agentless">
            <summary>
            Gets a value indicating whether the Agentless writer is going to be used.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.AgentlessUrl">
            <summary>
            Gets the Agentless url.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.ApiKey">
            <summary>
            Gets the Api Key to use in Agentless mode
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.Site">
            <summary>
            Gets the Datadog site
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.MaximumAgentlessPayloadSize">
            <summary>
            Gets the maximum agentless payload size
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.ProxyHttps">
            <summary>
            Gets the https proxy
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.ProxyNoProxy">
            <summary>
            Gets the no proxy list
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.Logs">
            <summary>
            Gets a value indicating whether the Logs submission is going to be used.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.Configuration.CIVisibilitySettings.TracerSettings">
            <summary>
            Gets the tracer settings
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.GitInfo">
            <summary>
            Git information class
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.SourceRoot">
            <summary>
            Gets Source root
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.Repository">
            <summary>
            Gets Repository
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.Branch">
            <summary>
            Gets Branch
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.Commit">
            <summary>
            Gets Commit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.AuthorName">
            <summary>
            Gets Author Name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.AuthorEmail">
            <summary>
            Gets Author Email
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.AuthorDate">
            <summary>
            Gets Author Date
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.CommitterName">
            <summary>
            Gets Committer Name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.CommitterEmail">
            <summary>
            Gets Committer Email
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.CommitterDate">
            <summary>
            Gets Committer Date
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.PgpSignature">
            <summary>
            Gets PGP Signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.Message">
            <summary>
            Gets Commit Message
            </summary>
        </member>
        <member name="M:Datadog.Trace.Ci.GitInfo.GetFrom(System.String)">
            <summary>
            Gets a GitInfo from a folder
            </summary>
            <param name="folder">Target folder to retrieve the git info</param>
            <returns>Git info</returns>
        </member>
        <member name="M:Datadog.Trace.Ci.GitInfo.GetCurrent">
            <summary>
            Gets a GitInfo from the current folder or assembly attribute
            </summary>
            <returns>Git info</returns>
        </member>
        <member name="T:Datadog.Trace.Ci.Tags.BuildTags">
            <summary>
            Span tags for build data model
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildOperationName">
            <summary>
            Build operation name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildName">
            <summary>
            Build name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildCommand">
            <summary>
            Build command
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildWorkingFolder">
            <summary>
            Build working folder
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildEnvironment">
            <summary>
            Build environment
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildStartMessage">
            <summary>
            Build start message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildEndMessage">
            <summary>
            Build start message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildStatus">
            <summary>
            Build status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildSucceededStatus">
            <summary>
            Build succeeded status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildFailedStatus">
            <summary>
            Build failed status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectProperties">
            <summary>
            Project properties
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectFile">
            <summary>
            Project filename
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectSenderName">
            <summary>
            Project sender entity
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectTargetNames">
            <summary>
            Project target names
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectToolsVersion">
            <summary>
            Project tools version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorType">
            <summary>
            Error type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorFile">
            <summary>
            Error file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorStartLine">
            <summary>
            Error start line
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorStartColumn">
            <summary>
            Error start column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorEndLine">
            <summary>
            Error end line
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorEndColumn">
            <summary>
            Error end column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorProjectFile">
            <summary>
            Error project file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorSubCategory">
            <summary>
            Error sub category
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorStack">
            <summary>
            Error stack
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.Tags.CommonTags">
            <summary>
            Common Span tags for test/build data model
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitRepository">
            <summary>
            GIT Repository
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommit">
            <summary>
            GIT Commit hash
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitBranch">
            <summary>
            GIT Branch name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitTag">
            <summary>
            GIT Tag name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitAuthorName">
            <summary>
            GIT Commit Author name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitAuthorEmail">
            <summary>
            GIT Commit Author email
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitAuthorDate">
            <summary>
            GIT Commit Author date
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitCommitterName">
            <summary>
            GIT Commit Committer name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitCommitterEmail">
            <summary>
            GIT Commit Committer email
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitCommitterDate">
            <summary>
            GIT Commit Committer date
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitMessage">
            <summary>
            GIT Commit message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.BuildSourceRoot">
            <summary>
            Build Source root
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIProvider">
            <summary>
            CI Provider
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIPipelineId">
            <summary>
            CI Pipeline id
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIPipelineName">
            <summary>
            CI Pipeline name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIPipelineNumber">
            <summary>
            CI Pipeline number
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIPipelineUrl">
            <summary>
            CI Pipeline url
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIJobUrl">
            <summary>
            CI Job url
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIJobName">
            <summary>
            CI Job Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.StageName">
            <summary>
            CI Stage Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIWorkspacePath">
            <summary>
            CI Job url
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.RuntimeName">
            <summary>
            Runtime name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.OSArchitecture">
            <summary>
            OS architecture
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.OSPlatform">
            <summary>
            OS platform
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.OSVersion">
            <summary>
            OS version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.RuntimeArchitecture">
            <summary>
            Runtime architecture
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.RuntimeVersion">
            <summary>
            Runtime version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.LibraryVersion">
            <summary>
            Library Version
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.Tags.TestTags">
            <summary>
            Span tags for test data model
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Bundle">
            <summary>
            Test bundle name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Suite">
            <summary>
            Test suite name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Name">
            <summary>
            Test name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Type">
            <summary>
            Test type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.TypeTest">
            <summary>
            Test type test
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.TypeBenchmark">
            <summary>
            Test type benchmark
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Framework">
            <summary>
            Test framework
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.FrameworkVersion">
            <summary>
            Test framework version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Parameters">
            <summary>
            Test parameters
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Traits">
            <summary>
            Test traits
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Status">
            <summary>
            Test status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.StatusPass">
            <summary>
            Test Pass status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.StatusFail">
            <summary>
            Test Fail status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.StatusSkip">
            <summary>
            Test Skip status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.SkipReason">
            <summary>
            Test skip reason
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Message">
            <summary>
            Test output message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.MetadataTestName">
            <summary>
            Parameters metadata TestName
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.CIAppTestOriginName">
            <summary>
            Origin value for CIApp Test
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.SourceFile">
            <summary>
            Test source file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.SourceStart">
            <summary>
            Test source start line
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.SourceEnd">
            <summary>
            Test source end line
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.CodeOwners">
            <summary>
            Test code owners
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute">
            <summary>
            Attribute that indicates that the decorated class is meant to intercept a method
            by modifying the method body with callbacks. Used to generate the integration definitions file.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AssemblyName">
            <summary>
            Gets or sets the name of the assembly that contains the target method to be intercepted.
            Required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.TypeName">
            <summary>
            Gets or sets the name of the type that contain the target method to be intercepted.
            Required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.MinimumVersion">
            <summary>
            Gets or sets the target minimum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.MaximumVersion">
            <summary>
            Gets or sets the target maximum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.IntegrationName">
            <summary>
            Gets or sets the integration name. Allows to group several integration with a single integration name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.DataReaderType">
            <summary>
            Gets or sets the DataReader type to use with target signatures that require it
            Required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.DataReaderTaskType">
            <summary>
            Gets or sets the DataReader type to use with target signatures that require it
            Required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.TargetMethodAttributes">
            <summary>
            Gets or sets the names of attributes decorated with <see cref="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute"/>.
            Describes all the signatures to instrument
            Required.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.AdoNetTargetSignatureReturnType.Default">
            <summary>
             Uses the fixed return type specified in <see cref="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.ReturnTypeName" />
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.AdoNetTargetSignatureReturnType.DataReaderType">
            <summary>
             Uses the return type specified in <see cref="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.DataReaderType" />
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.AdoNetTargetSignatureReturnType.DataReaderTaskType">
            <summary>
             Uses the return type specified in <see cref="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.DataReaderTaskType" />
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.MethodName">
            <summary>
            Gets or sets the name of the target method to be intercepted.
            If null, default to the name of the decorated method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.ReturnTypeName">
            <summary>
            Gets or sets the return type name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.ParameterTypeNames">
            <summary>
            Gets or sets the parameters type array for the target method to be intercepted.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.CallTargetType">
            <summary>
            Gets or sets the CallTarget Class used to instrument the method
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.CallTargetIntegrationType">
            <summary>
            Gets or sets the CallTarget integration type
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.AdoNetClientInstrumentMethodsAttribute.AdoNetTargetSignatureAttribute.ReturnType">
            <summary>
            Gets or sets the return type to use with this signature
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[int] [Command].ExecuteNonQueryAsync(CancellationToken)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryAsyncIntegration.OnMethodBegin``1(``0,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryIntegration">
            <summary>
            CallTarget instrumentation for:
            int [Command].ExecuteNonQuery()
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryWithBehaviorIntegration">
            <summary>
            CallTarget instrumentation for:
            int [Command].ExecuteNonQuery(CommandBehavior)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryWithBehaviorIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryWithBehaviorIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[*DataReader] [Command].ExecuteReaderAsync()
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderAsyncIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderIntegration">
            <summary>
            CallTarget instrumentation for:
            [*]DataReader [Command].ExecuteReader()
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAndCancellationAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[*DataReader] [Command].ExecuteReaderAsync(CommandBehavior, CancellationToken)
            Task[DbDataReader] [Command].ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAndCancellationAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAndCancellationAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[*DataReader] [Command].ExecuteReaderAsync(CommandBehavior)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAsyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorIntegration">
            <summary>
            CallTarget instrumentation for:
            [*]DataReader [Command].ExecuteReader(CommandBehavior)
            [*]DataReader [Command].ExecuteDbDataReader(CommandBehavior)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithCancellationAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[*DataReader] [Command].ExecuteReaderAsync(CancellationToken)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithCancellationAsyncIntegration.OnMethodBegin``1(``0,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithCancellationAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[object] [Command].ExecuteScalarAsync(CancellationToken)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarAsyncIntegration.OnMethodBegin``1(``0,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarIntegration">
            <summary>
            CallTarget instrumentation for:
            object [Command].ExecuteScalar()
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarWithBehaviorIntegration">
            <summary>
            CallTarget instrumentation for:
            object [Command].ExecuteScalar(CommandBehavior)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarWithBehaviorIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarWithBehaviorIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.DbType">
            <summary>
            Values for the "db.type" span tag.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.DbType"/>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.AsyncCommandIntegration">
            <summary>
            AsyncCommand ExecuteCommand calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.AsyncCommandIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.AsyncCommandIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.SyncCommandIntegration">
            <summary>
            SyncCommand ExecuteCommand calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.SyncCommandIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.SyncCommandIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ApiController_ExecuteAsync_Integration">
            <summary>
            System.Web.Http.ApiController.ExecuteAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ApiController_ExecuteAsync_Integration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TController">Type of the controller context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="controllerContext">The context of the controller</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ApiController_ExecuteAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.AspNetMvcIntegration">
            <summary>
            The ASP.NET MVC integration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.AspNetMvcIntegration.CreateScope(Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ControllerContextStruct)">
            <summary>
            Creates a scope used to instrument an MVC action and populates some common details.
            </summary>
            <param name="controllerContext">The System.Web.Mvc.ControllerContext that was passed as an argument to the instrumented method.</param>
            <returns>A new scope used to instrument an MVC action.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.AspNetWebApi2Integration">
            <summary>
            Contains instrumentation wrappers for ASP.NET Web API 5.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.AsyncControllerActionInvoker_BeginInvokeAction_Integration">
            <summary>
            System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeAction calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.AsyncControllerActionInvoker_BeginInvokeAction_Integration.OnMethodBegin``2(``0,``1,System.String,System.AsyncCallback,System.Object)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">Controller context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="controllerContext">The context of the controller</param>
            <param name="actionName">Name of the action</param>
            <param name="callback">Async callback</param>
            <param name="state">The state of the method</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.AsyncControllerActionInvoker_EndInvokeAction_Integration">
            <summary>
            System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeAction calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.AsyncControllerActionInvoker_EndInvokeAction_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">TestResult type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original method return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ControllerActionInvoker_InvokeAction_Integration">
            <summary>
            System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeAction calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ControllerActionInvoker_InvokeAction_Integration.OnMethodBegin``3(``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">Controller context</typeparam>
            <typeparam name="TActionDescriptor">Action descriptor</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="controllerContext">The control context instance</param>
            <param name="actionDescriptor">The action descriptor instance</param>
            <param name="parameters">The parameters of the mvc method</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ControllerContextStruct">
            <summary>
            ControllerContext struct copy target for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ControllerContextStruct.HttpContext">
            <summary>
            Gets the HttpContext
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ControllerContextStruct.RouteData">
            <summary>
            Gets the RouteData
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ControllerContextStruct.ParentActionViewContext">
            <summary>
            Gets the ParentActionViewContext
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ExceptionHandlerExtensions_HandleAsync_Integration">
            <summary>
            System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions calltarget instrumentation
            This instrumentation is based off the ASP.NET Web API 2 error handling design that is documented here:
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/error-handling/web-api-global-error-handling
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ExceptionHandlerExtensions_HandleAsync_Integration.OnMethodBegin``3(``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExceptionHandler">Type of the configuration callback action</typeparam>
            <typeparam name="TExceptionContext">Type of the exception context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method. This will be null because the method is static</param>
            <param name="handler">The configured exception handler value</param>
            <param name="context">The exception context value</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpConfigurationStruct">
            <summary>
            System.Web.Http.HttpConfiguration
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpConfigurationStruct.MessageHandlers">
            <summary>
            Gets the MessageHandlers collection
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpMethodStruct">
            <summary>
            Http method struct copy target for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpMethodStruct.Method">
            <summary>
            Gets the http method in string
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpModule_Integration">
            <summary>
            System.Web.Compilation.BuildManager.InvokePreStartInitMethodsCore calltarget instrumentation
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpModule_Integration._firstInitialization">
            <summary>
            Indicates whether we're initializing the HttpModule for the first time
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpModule_Integration.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TCollection">Type of the collection</typeparam>
            <typeparam name="TFunc">Type of the </typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method. This method is static so this parameter will always be null</param>
            <param name="methods">The methods to be invoked</param>
            <param name="setHostingEnvironmentCultures">The function to set the environment culture</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpResponseMessageStruct">
            <summary>
            Http response struct copy target for ducktyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IControllerContext">
            <summary>
            HttpControllerContext interface for ducktyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IExceptionContext">
            <summary>
            System.Web.Http.ExceptionHandling.ExceptionContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IExceptionContext.Exception">
            <summary>
            Gets the exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpActionContext">
            <summary>
            HttpControllerContext interface for ducktyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpContext">
            <summary>
            System.Web.HttpContext interface for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpContext.Items">
            <summary>
            Gets the items dictionary
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpControllerContext">
            <summary>
            HttpControllerContext interface for ducktyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpRequestMessage">
            <summary>
            HttpRequestMessage interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpRequestMessage.Method">
            <summary>
            Gets the Http Method
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpRequestMessage.RequestUri">
            <summary>
            Gets the request uri
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpRequestMessage.Headers">
            <summary>
            Gets the request headers
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpRoute">
            <summary>
            IHttpRoute proxy for ducktyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpRouteData">
            <summary>
            IHttpRouteData interface for ducktyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IRequestHeaders">
            <summary>
            RequestHeaders interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IRequestHeaders.Host">
            <summary>
            Gets the host from the HTTP request
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IRequestHeaders.UserAgent">
            <summary>
            Gets the useragent from the HTTP request.
            Cast it as object as we only need to call ToString
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IRequestHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Try get values from the headers
            </summary>
            <param name="name">Name of the header</param>
            <param name="values">Values of the header in the request</param>
            <returns>true if the header was found; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IRequestHeaders.Remove(System.String)">
            <summary>
            Removes a header from the request
            </summary>
            <param name="name">Name of the header</param>
            <returns>true if the header was removed; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IRequestHeaders.Add(System.String,System.String)">
            <summary>
            Adds a header to the request
            </summary>
            <param name="name">Name of the header</param>
            <param name="value">Value of the header</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IThreadContext">
            <summary>
            System.Web.HttpApplication interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IThreadContext.HttpContext">
            <summary>
            Gets the HttpContext of the thread context
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ReflectedHttpActionDescriptor_ExecuteAsync_Integration">
            <summary>
            System.Web.Http.Controllers.ReflectedHttpActionDescriptor calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ReflectedHttpActionDescriptor_ExecuteAsync_Integration.OnMethodBegin``2(``0,``1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TController">Type of the controller context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="controllerContext">The context of the controller</param>
            <param name="parameters">The parameters of the mvc method</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ThreadContext_AssociateWithCurrentThread_Integration">
            <summary>
            System.Web.ThreadContext.AssociateWithCurrentThread calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ThreadContext_AssociateWithCurrentThread_Integration.OnMethodBegin``1(``0,System.Boolean)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="setImpersonationContext">A flag to set the impersonation context</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ThreadContext_DisassociateFromCurrentThread_Integration">
            <summary>
            System.Web.ThreadContext.DisassociateFromCurrentThread calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ThreadContext_DisassociateFromCurrentThread_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ViewContextStruct">
            <summary>
            ControllerContext struct copy target for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ViewContextStruct.RouteData">
            <summary>
            Gets the RouteData
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse">
            <summary>
            AmazonWebServiceResponse interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse.ContentLength">
            <summary>
            Gets the length of the content
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse.ResponseMetadata">
            <summary>
            Gets the response metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse.HttpStatusCode">
            <summary>
            Gets the http status code of the AWS request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IClientConfig">
            <summary>
            IClientConfig interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IClientConfig.RegionEndpoint">
            <summary>
            Gets the region endpoint of the config
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IExecutionContext">
            <summary>
            IExecutionContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IExecutionContext.RequestContext">
            <summary>
            Gets the RequestContext
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IExecutionContext.ResponseContext">
            <summary>
            Gets the ResponseContext
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRegionEndpoint">
            <summary>
            IRegionEndpoint interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRegionEndpoint.SystemName">
            <summary>
            Gets the system name of the region endpoint
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequest">
            <summary>
            IRequest interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequest.HttpMethod">
            <summary>
            Gets the HTTP method
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequestContext">
            <summary>
            IRequestContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequestContext.ClientConfig">
            <summary>
            Gets the client config
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequestContext.Request">
            <summary>
            Gets the Request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseContext">
            <summary>
            IResponseContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseContext.Response">
            <summary>
            Gets the SDK response
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseMetadata">
            <summary>
            ResponseMetadata interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseMetadata.RequestId">
            <summary>
            Gets the ID of the request
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseMetadata.Metadata">
            <summary>
            Gets the metadata associated with the request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeAsyncIntegration">
            <summary>
            AWSSDK.Core InvokeAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeAsyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionContext">Type of the execution context object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="executionContext">The execution context for the AWS SDK operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeSyncIntegration">
            <summary>
            AWSSDK.Core InvokeSync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeSyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionContext">Type of the execution context object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="executionContext">The execution context for the AWS SDK operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeSyncIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponseContext">Type of the response contex</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseContext">Response context instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueAsyncIntegration">
            <summary>
            AWSSDK.SQS CreateQueueAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TCreateQueueRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueIntegration">
            <summary>
            AWSSDK.SQS CreateQueue calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TCreateQueueRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageAsyncIntegration">
            <summary>
            AWSSDK.SQS DeleteMessageAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchAsyncIntegration">
            <summary>
            AWSSDK.SQS DeleteMessageBatchAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteMessageBatchRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchIntegration">
            <summary>
            AWSSDK.SQS DeleteMessageBatch calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteMessageBatchRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageIntegration">
            <summary>
            AWSSDK.SQS DeleteMessage calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueAsyncIntegration">
            <summary>
            AWSSDK.SQS DeleteQueueAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteQueueRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueIntegration">
            <summary>
            AWSSDK.SQS DeleteQueue calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteQueueRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl">
            <summary>
            Interface for ducktyping AmazonSQSRequest implementations with the QueueUrl property
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl.QueueUrl">
            <summary>
            Gets the URL of the queue
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IContainsMessageAttributes">
            <summary>
            MessageAttributes interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IContainsMessageAttributes.MessageAttributes">
            <summary>
            Gets or sets the message attributes
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueRequest">
            <summary>
            CreateQueueRequest interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueRequest.QueueName">
            <summary>
            Gets the name of the queue
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueRequest.Attributes">
            <summary>
            Gets the message attributes
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueResponse">
            <summary>
            CreateQueueResponse interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueResponse.QueueUrl">
            <summary>
            Gets the URL of the created Amazon SQS queue
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ISendMessageBatchRequest">
            <summary>
            SendMessageBatchRequest interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ISendMessageBatchRequest.Entries">
            <summary>
            Gets the message entries
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ISendMessageRequest">
            <summary>
            SendMessageRequest interface for ducktyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageAsyncIntegration">
            <summary>
            AWSSDK.SQS ReceiveMessageAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReceiveMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageIntegration">
            <summary>
            AWSSDK.SQS ReceiveMessage calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReceiveMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageAsyncIntegration">
            <summary>
            AWSSDK.SQS SendMessageAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSendMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchAsyncIntegration">
            <summary>
            AWSSDK.SQS SendMessageBatchAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSendMessageBatchRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchIntegration">
            <summary>
            AWSSDK.SQS SendMessageBatch calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSendMessageBatchRequest">Type of the SendMessage request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageIntegration">
            <summary>
            AWSSDK.SQS SendMessage calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSendMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ClientQueryIteratorsIntegrations">
            <summary>
            Microsoft.Azure.Cosmos.Container.QueryIteratorsIntegrations calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ClientQueryIteratorsIntegrations.OnMethodBegin``3(``0,``1,System.String,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of target</typeparam>
            <typeparam name="TQueryDefinition">Type of the query definition</typeparam>
            <typeparam name="TQueryRequestOptions">Type of the query request options</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queryDefinition">Query definition instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="queryRequestOptions">Query request options</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ClientQueryIteratorsIntegrations.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerNewStruct">
            <summary>
            Microsoft.Azure.Cosmos.Container for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerNewStruct.Id">
            <summary>
            Gets the Id of the Cosmos container
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerNewStruct.Database">
            <summary>
            Gets the parent Database reference
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerOldStruct">
            <summary>
            Microsoft.Azure.Cosmos.Container for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerOldStruct.Id">
            <summary>
            Gets the Id of the Cosmos container
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerOldStruct.Database">
            <summary>
            Gets the parent Database reference
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerQueryIteratorsIntegrations">
            <summary>
            Microsoft.Azure.Cosmos.Container.QueryIteratorsIntegrations calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerQueryIteratorsIntegrations.OnMethodBegin``3(``0,``1,System.String,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of target</typeparam>
            <typeparam name="TQueryDefinition">Type of the query definition</typeparam>
            <typeparam name="TQueryRequestOptions">Type of the query request options</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queryDefinition">Query definition instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="queryRequestOptions">Query request options</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerQueryIteratorsIntegrations.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosClientStruct">
            <summary>
            Microsoft.Azure.Cosmos.CosmosClient
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosClientStruct.Endpoint">
            <summary>
            Gets the endpoint Uri for the Azure Cosmos DB service.
            </summary>
            <value>
            The Uri for the account endpoint.
            </value>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosContextClientStruct">
            <summary>
            Microsoft.Azure.Cosmos.CosmosClientContext for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosContextClientStruct.Client">
            <summary>
            Gets the CosmosClient
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseNewStruct">
            <summary>
            Microsoft.Azure.Cosmos.Database for duct typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseNewStruct.Id">
            <summary>
            Gets the Id of the Cosmos database
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseNewStruct.Client">
            <summary>
            Gets the parent Cosmos client instance related the database instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseOldStruct">
            <summary>
            Microsoft.Azure.Cosmos.Database for duct typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseOldStruct.Id">
            <summary>
            Gets the Id of the Cosmos database
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseOldStruct.ClientContext">
            <summary>
            Gets the parent Cosmos client instance related the database instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseQueryIteratorsIntegrations">
            <summary>
            Microsoft.Azure.Cosmos.Container.QueryIteratorsIntegrations calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseQueryIteratorsIntegrations.OnMethodBegin``3(``0,``1,System.String,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of target</typeparam>
            <typeparam name="TQueryDefinition">Type of the query definition</typeparam>
            <typeparam name="TQueryRequestOptions">Type of the query request options</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queryDefinition">Query definition instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="queryRequestOptions">Query request options</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseQueryIteratorsIntegrations.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.QueryDefinitionStruct">
            <summary>
            Microsoft.Azure.Cosmos.QueryDefinition for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.QueryDefinitionStruct.QueryText">
            <summary>
            Gets the text of the Azure Cosmos DB SQL query.
            </summary>
            <value>The text of the SQL query.</value>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegration">
            <summary>
            Couchbase clusterNode 3.2 calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegration.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="operation">The requested couchbase operation</param>
            <param name="cancellationToken">A cancellation token</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperation">Type of the operation</typeparam>
            <typeparam name="TCancellationToken">Type of the cancellationToken</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegrationBis">
            <summary>
            Couchbase clusterNode 3.2 calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegrationBis.OnMethodBegin``4(``0,``2,``1,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="connection">A provided connection</param>
            <param name="operation">The requested couchbase operation</param>
            <param name="cancellationToken">A cancellation token</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperation">Type of the operation</typeparam>
            <typeparam name="TConnection">Type of the connection</typeparam>
            <typeparam name="TCancellationToken">Type of the cancellationToken</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegrationBis.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegrationTer">
            <summary>
            Couchbase clusterNode 3.0 calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegrationTer.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="operation">The requested couchbase operation</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperation">Type of the operation</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ClusterNodeIntegrationTer.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteAsyncIntegration">
            <summary>
            Couchbase.IO.IIOService.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteAsyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="operation">The requested couchbase operation</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperation">Type of the operation</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteAsyncIntegrationBis">
            <summary>
            Couchbase.IO.IIOService.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteAsyncIntegrationBis.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="operation">The requested couchbase operation</param>
            <param name="connection">A provided connection</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperation">Type of the operation</typeparam>
            <typeparam name="TConnection">Type of the connection</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteAsyncIntegrationBis.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteIntegration">
            <summary>
            Couchbase.IO.IIOService.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="operation">The requested couchbase operation</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperation">Type of the operation</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperationResult">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="tResult">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteIntegrationBis">
            <summary>
            Couchbase.IO.IIOService.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteIntegrationBis.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="operation">The requested couchbase operation</param>
            <param name="connection">A provided connection</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperation">Type of the operation</typeparam>
            <typeparam name="TConnection">Type of the connection</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.IIOServiceExecuteIntegrationBis.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TOperationResult">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="result">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationCode">
            <summary>
            Couchbase OperationCode copy
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationStruct">
            <summary>
            Ducktyping of Couchbase.IO.Operations.IOperation and generic implementations
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationStruct.OperationCode">
            <summary>
            Gets the Operation Code
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationStruct.Key">
            <summary>
            Gets the Operation Key
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationStruct.CurrentHost">
            <summary>
            Gets the Operation Code
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationStructV3">
            <summary>
            Ducktyping of Couchbase.Core.Operations.IOperation in V3
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationStructV3.OpCode">
            <summary>
            Gets the Operation Code
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationStructV3.Key">
            <summary>
            Gets the Operation Key
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.OperationStructV3.BucketName">
            <summary>
            Bucket name, if applicable.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ResultStruct">
            <summary>
            Ducktyping of Couchbase.IResult and generic implementations
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ResultStruct.Success">
            <summary>
            Gets a value indicating whether the operation was succesful.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ResultStruct.Message">
            <summary>
            Gets a message indicating why it was not succesful if the operation wasn't succesful.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Couchbase.ResultStruct.Exception">
            <summary>
            Gets the exception, If Success is false and an exception has been caught internally
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.HttpMethod">
            <summary>
            HTTP method
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData">
            <summary>
            Version-agnostic interface for Elasticsearch RequestData
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData.Path">
            <summary>
            Gets the path of the request
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData.Uri">
            <summary>
            Gets the URI of the request
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData.Method">
            <summary>
            Gets the HTTP method of the request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.RequestPipelineStruct">
            <summary>
            Duck-copy struct for RequestPipeline
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestDataV5">
            <summary>
            Duck-copy struct for RequestData
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearchAsync_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearchAsync&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearchAsync_Integration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestData">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestData">The request data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearchAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionResult">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearch_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearch&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearch_Integration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestData">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestData">The request data</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearch_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestDataV6">
            <summary>
            Duck-copy struct for RequestData
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearchAsync_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearchAsync&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearchAsync_Integration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestData">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestData">The request data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearchAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionResult">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearch_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearch&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearch_Integration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestData">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestData">The request data</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearch_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_RequestAsync_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearchAsync&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_RequestAsync_Integration.OnMethodBegin``4(``0,``1,System.String,System.Threading.CancellationToken,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="THttpMethod">The type of the HttpMethod parameter</typeparam>
            <typeparam name="TPostData">The type of the PostData parameter</typeparam>
            <typeparam name="TRequestParameters">The type of the request parameters</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="method">The HTTP method of the request</param>
            <param name="path">The path of the request</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="postData">The payload of the request</param>
            <param name="requestParameters">The parameters of the request</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_RequestAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">The response</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_Request_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearch&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_Request_Integration.OnMethodBegin``4(``0,``1,System.String,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="THttpMethod">The type of the HttpMethod parameter</typeparam>
            <typeparam name="TPostData">The type of the PostData parameter</typeparam>
            <typeparam name="TRequestParameters">The type of the request parameters</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="method">The HTTP method of the request</param>
            <param name="path">The path of the request</param>
            <param name="postData">The payload of the request</param>
            <param name="requestParameters">The parameters of the request</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_Request_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.DocumentV5Struct">
            <summary>
            GraphQLParser.AST.GraphQLDocument proxy for ducktyping
            https://github.com/graphql-dotnet/parser/blob/efb83a9f4054c0752cfeaac1e3c6b7cde5fa5607/src/GraphQLParser/AST/GraphQLDocument.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ErrorLocationStruct">
            <summary>
            GraphQL.ErrorLocation interface for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ErrorLocationStruct.Line">
            <summary>
            Gets the line number of the document where the error occurred
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ErrorLocationStruct.Column">
            <summary>
            Gets the column number of the document where the error occurred
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncIntegration">
            <summary>
            GraphQL.Execution.ExecutionStrategy calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">Type of the execution context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="context">The execution context of the GraphQL operation.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionResult">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncV5Integration">
            <summary>
            GraphQL.Execution.ExecutionStrategy calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncV5Integration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">Type of the execution context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="context">The execution context of the GraphQL operation.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncV5Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionResult">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.GraphQLNameV5Struct">
            <summary>
            GraphQLParser.AST.GraphQLName
            https://github.com/graphql-dotnet/parser/blob/efb83a9f4054c0752cfeaac1e3c6b7cde5fa5607/src/GraphQLParser/AST/GraphQLName.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IDocument">
            <summary>
            GraphQL.Language.AST.Document interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IDocument.OriginalQuery">
            <summary>
            Gets the original query from the document
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext">
            <summary>
            GraphQL.Execution.ExecutionContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext.Document">
            <summary>
            Gets the document associated with the execution context
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext.Operation">
            <summary>
            Gets the operation associated with the execution context
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext.Errors">
            <summary>
            Gets the execution errors
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContextV5">
            <summary>
            GraphQL.Execution.ExecutionContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContextV5.Document">
            <summary>
            Gets the document associated with the execution context
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContextV5.Operation">
            <summary>
            Gets the operation associated with the execution context
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContextV5.Errors">
            <summary>
            Gets the execution errors
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError">
            <summary>
            GraphQL.ExecutionError interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError.Code">
            <summary>
            Gets a code for the error
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError.Locations">
            <summary>
            Gets a list of locations in the document where the error applies
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError.Message">
            <summary>
            Gets a message for the error
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError.Path">
            <summary>
            Gets the path in the document where the error applies
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionErrors">
            <summary>
            GraphQL.ExecutionErrors interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionErrors.Count">
            <summary>
            Gets the number of errors
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionErrors.Item(System.Int32)">
            <summary>
            Gets the ExecutionError at the specified index
            </summary>
            <param name="index">Index to lookup</param>
            <returns>An execution error</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IOperation">
            <summary>
            GraphQL.Language.AST.Operation interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IOperation.Name">
            <summary>
            Gets the name of the operation
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IOperation.OperationType">
            <summary>
            Gets the type of the operation
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IValidationContext">
            <summary>
            GraphQL.Validation.ValidationContext proxy
            https://github.com/graphql-dotnet/graphql-dotnet/blob/ff28dccd9f318ceb4bcfb421428fb2324e6270f3/src/GraphQL/Validation/ValidationContext.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IValidationResult">
            <summary>
            GraphQL.Validation.IValidationResult interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IValidationResult.Errors">
            <summary>
            Gets the execution errors
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IValidationResultTuple">
            <summary>
            ValueTuple returned by DocumentValidator in GraphQL4
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy">
            <summary>
            A proxy enum for GraphQL.Language.AST.OperationType.
            The enum values must match those of GraphQL.Language.AST.OperationType for spans
            to be decorated with the correct operation. Since the original type is public,
            we not expect changes between minor versions of the GraphQL library.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy.Query">
            <summary>
            A query operation.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy.Mutation">
            <summary>
            A mutation operation.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy.Subscription">
            <summary>
            A subscription operation.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationV5Struct">
            <summary>
            GraphQLParser.AST.GraphQLOperationDefinition
            https://github.com/graphql-dotnet/parser/blob/efb83a9f4054c0752cfeaac1e3c6b7cde5fa5607/src/GraphQLParser/AST/Definitions/GraphQLOperationDefinition.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsync4Integration">
            <summary>
            GraphQL.Validation.DocumentValidator calltarget instrumentation for GraphQL 4
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsync4Integration.OnMethodBegin``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSchema">Type of the schema</typeparam>
            <typeparam name="TDocument">Type of the document</typeparam>
            <typeparam name="TVariables">Type of the variables</typeparam>
            <typeparam name="TRules">Type of the rules</typeparam>
            <typeparam name="TUserContext">Type of the user context</typeparam>
            <typeparam name="TInputs">Type of the inputs</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="schema">The GraphQL schema value</param>
            <param name="document">The GraphQL document value</param>
            <param name="variables">The GraphQL variables</param>
            <param name="rules">The list of validation rules</param>
            <param name="userContext">The user context</param>
            <param name="inputs">The input variables</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsync4Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TValidationResult">Type of the validation result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="validationResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsyncIntegration">
            <summary>
            GraphQL.Validation.DocumentValidator calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsyncIntegration.OnMethodBegin``6(``0,System.String,``1,``2,``3,``4,``5)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSchema">Type of the schema</typeparam>
            <typeparam name="TDocument">Type of the document</typeparam>
            <typeparam name="TRules">Type of the rules</typeparam>
            <typeparam name="TUserContext">Type of the user context</typeparam>
            <typeparam name="TInputs">Type of the inputs</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="originalQuery">The source of the original GraphQL query</param>
            <param name="schema">The GraphQL schema value</param>
            <param name="document">The GraphQL document value</param>
            <param name="rules">The list of validation rules</param>
            <param name="userContext">The user context</param>
            <param name="inputs">The input variables</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TValidationResult">Type of the validation result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="validationResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsyncV5Integration">
            <summary>
            GraphQL.Validation.DocumentValidator calltarget instrumentation for GraphQL 4
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateIntegration">
            <summary>
            GraphQL.Validation.DocumentValidator calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateIntegration.OnMethodBegin``6(``0,System.String,``1,``2,``3,``4,``5)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSchema">Type of the schema</typeparam>
            <typeparam name="TDocument">Type of the document</typeparam>
            <typeparam name="TRules">Type of the rules</typeparam>
            <typeparam name="TUserContext">Type of the user context</typeparam>
            <typeparam name="TInputs">Type of the inputs</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="originalQuery">The source of the original GraphQL query</param>
            <param name="schema">The GraphQL schema value</param>
            <param name="document">The GraphQL document value</param>
            <param name="rules">The list of validation rules</param>
            <param name="userContext">The user context</param>
            <param name="inputs">The input variables</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TValidationResult">Type of the validation result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="validationResult">IValidationResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.CallOptionsStruct">
            <summary>
            Duck type for CallOptions
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core.Api/CallOptions.cs
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcCommon.GetErrorDescription(System.Int32)">
            <summary>
            Return a description of the grpcStatus Code
            See https://pkg.go.dev/google.golang.org/grpc/codes for values
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcDotNet.GrpcAspNetCoreServer.HttpContextServerCallContextStruct">
            <summary>
            Duck type for HttpContextServerCallContext
            Interface as used in constraints
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcDotNet.GrpcAspNetCoreServer.ServerCallHandlerBaseStruct">
            <summary>
            Duck type for Grpc.AspNetCore.Server.Internal.CallHandlers.ServerCallHandlerBase{Service, TRequest, TResponse}
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcDotNet.GrpcAspNetCoreServer.ServerMethodInvokerBaseStruct">
            <summary>
            Duck type for Grpc.Shared.Server.ServerMethodInvokerBase{TService, TRequest, TResponse}
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.AsyncCallHandleFinishedInstrumentation">
            <summary>
            Grpc.Core.Internal calltarget instrumentation
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.AsyncCallHandleUnaryResponseInstrumentation">
            <summary>
            Grpc.Core.Internal calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.CachedMetadataHelper`1.CreateMetadata">
            <summary>
            Creates a Grpc.Core.Metadata object
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DefaultCallInvokerInstrumentation">
            <summary>
            Grpc.Core.Internal calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DefaultCallInvokerInstrumentation.OnMethodBegin``3(``0,``1,System.String,``2@)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMethod">Type of the Method{Request, Response}</typeparam>
            <typeparam name="TCallOptions">Type of the CallOptions</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="method">The Method{Request, Response} instance</param>
            <param name="host">The host name</param>
            <param name="callOptions">The CallOptions instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.AsyncCallStruct">
            <summary>
            Duck Type for AsyncCall
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/Internal/AsyncCall.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.AsyncCallStruct.ResponseHeadersAsync">
            <summary>
            This is a Task{Metadata} but can't use duck chaining here, otherwise
            we end up deadlocking trying to copy
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.CallInvocationDetailsStruct">
            <summary>
            Duck type for CallInvocationDetails
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/CallInvocationDetails.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.CallOptionsStruct">
            <summary>
            Duck type for CallOptions
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core.Api/CallOptions.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.ClientSideStatusStruct">
            <summary>
            Duck type for Grpc.Core.Internal.ClientSideStatus
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/Internal/ClientSideStatus.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.ClientSideStatusWithMetadataStruct">
            <summary>
            Duck type for Grpc.Core.Internal.ClientSideStatus
            Interface for use in constraints
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/Internal/ClientSideStatus.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.ICallOptions">
            <summary>
            Duck type for CallOptions
            Interface as need to call the WithHeaders method
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core.Api/CallOptions.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.IMethod">
            <summary>
            Duck type for Method{TRequest, TResponse}
            Interface for use in constraints
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core.Api/Method.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.MetadataEntryStruct">
            <summary>
            Duck type for Metadata.Entry
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core.Api/Metadata.cs#L276
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.NullableClientSideStatusStruct">
            <summary>
            Duck type for Nullable{Grpc.Core.Internal.ClientSideStatus}
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.DuckTypes.TaskOfMetadataStruct">
            <summary>
            Duck type Task{Metadata}
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.MetadataArraySafeHandleCreateInstrumentation">
            <summary>
            Grpc.Core.Internal calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.MetadataArraySafeHandleCreateInstrumentation.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Client.MetadataArraySafeHandleCreateInstrumentation.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Server.AsyncCallServerSendInitialMetadataAsyncInstrumentation">
            <summary>
            Grpc.Core.Internal calltarget instrumentation
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Server.AsyncCallServerSendStatusFromServerAsyncInstrumentation">
            <summary>
            Grpc.Core.Internal calltarget instrumentation
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Server.IServerRpcNew">
            <summary>
            DuckType for ServerRpcNew
            Interface because used in constraints
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/Internal/ServerRpcNew.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Server.ServerCallHandlerInstrumentation">
            <summary>
            Grpc.Core.Internal calltarget instrumentation
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.GrpcLegacy.Server.ServerCallHandlerStruct">
            <summary>
            Duck type for all implementations of IServerCallHandler
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core/Internal/ServerCallHandler.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.IMetadata">
            <summary>
            Duck type for Metadata
            Interface, as need to call methods on it
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core.Api/Metadata.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.IStatus">
            <summary>
            Duck type for Grpc.Core.Status
            Same as <see cref="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.StatusStruct"/>, but an interface for use in constraints
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.MetadataEntryStruct">
            <summary>
            Duck type for Metadata.Entry
            https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Core.Api/Metadata.cs#L276
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.MethodStruct">
            <summary>
            Duck type for Grpc.Core.Method{TRequest, TResponse}
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Grpc.StatusStruct">
            <summary>
            Duck type for Grpc.Core.Status
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.CurlHandler.CurlHandlerIntegration">
            <summary>
            System.Net.Http.CurlHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.CurlHandler.CurlHandlerIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.CurlHandler.CurlHandlerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerIntegration">
            <summary>
            System.Net.Http.HttpClientHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerSyncIntegration">
            <summary>
            System.Net.Http.HttpClientHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerSyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerSyncIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpMethodStruct">
            <summary>
            Http method struct copy target for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpMethodStruct.Method">
            <summary>
            Gets the http method in string
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage">
            <summary>
            HttpRequestMessage interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage.Method">
            <summary>
            Gets the Http Method
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage.RequestUri">
            <summary>
            Gets the request uri
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage.Headers">
            <summary>
            Gets the request headers
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage">
            <summary>
            HttpResponseMessage interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage.StatusCode">
            <summary>
            Gets the status code of the http response
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders">
            <summary>
            RequestHeaders interface for ducktyping
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Try get values from the headers
            </summary>
            <param name="name">Name of the header</param>
            <param name="values">Values of the header in the request</param>
            <returns>true if the header was found; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders.Remove(System.String)">
            <summary>
            Removes a header from the request
            </summary>
            <param name="name">Name of the header</param>
            <returns>true if the header was removed; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders.Add(System.String,System.String)">
            <summary>
            Adds a header to the request
            </summary>
            <param name="name">Name of the header</param>
            <param name="value">Value of the header</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerIntegration">
            <summary>
            System.Net.Http.SocketsHttpHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerSyncIntegration">
            <summary>
            System.Net.Http.SocketsHttpHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerSyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerSyncIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.WinHttpHandler.WinHttpHandlerIntegration">
            <summary>
            System.Net.Http.WinHttpHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.WinHttpHandler.WinHttpHandlerIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.WinHttpHandler.WinHttpHandlerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_BeginGetRequestStream_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.BeginGetRequestStream
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_BeginGetRequestStream_Integration.OnMethodBegin``1(``0,System.AsyncCallback,System.Object)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_BeginGetResponse_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.BeginGetResponse
            We only instrument .NET Framework - .NET Core uses an HttpClient
            internally, which is already instrumented
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_BeginGetResponse_Integration.OnMethodBegin``1(``0,System.AsyncCallback,System.Object)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_EndGetResponse_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.GetResponse
            We only instrument .NET Framework - .NET Core uses an HttpClient
            internally, which is already instrumented
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_EndGetResponse_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetRequestStream_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.GetRequestStream
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetRequestStream_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetResponse_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.GetResponse
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetResponse_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetResponse_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.IHttpWebRequest">
            <summary>
            Duck type interface for HttpWebRequest
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.IHttpWebRequest.RequestStartTicks">
            <summary>
            Gets the time the HttpWebRequest was created in Ticks (UTC)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.WebRequestCommon.GetResponse_OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.WebRequest_GetResponseAsync_Integration">
            <summary>
            CallTarget integration for WebRequest.GetResponseAsync
            We're actually instrumenting HttpWebRequest, but the GetResponseAsync method is declared in WebRequest (and not overriden)
            So instead, we instrument WebRequest and check the actual type
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.WebRequest_GetResponseAsync_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.WebRequest_GetResponseAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.CachedMessageHeadersHelper`1.CreateHeaders">
            <summary>
            Creates a Confluent.Kafka.Headers object and assigns it to an `IMessage` proxy
            </summary>
            <returns>A proxy for the new Headers object</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeException">
            <summary>
            ConsumeException interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeException.ConsumerRecord">
            <summary>
            Gets the consume result associated with the consume request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult">
            <summary>
            ConsumeResult for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.Topic">
            <summary>
            Gets the topic
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.Partition">
            <summary>
            Gets the partition
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.Offset">
            <summary>
            Gets the offset
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.Message">
            <summary>
            Gets the Kafka record
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.IsPartitionEOF">
            <summary>
            Gets a value indicating whether gets whether the message is a partition EOF
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryReport">
            <summary>
            DeliveryReport interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryReport.Error">
            <summary>
            Gets the Error associated with the delivery report
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult">
            <summary>
            DeliveryResult interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult.Partition">
            <summary>
                Gets the Kafka partition.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult.Offset">
            <summary>
                Gets the Kafka offset
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IError">
            <summary>
            Error interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IError.IsError">
            <summary>
            Gets a value indicating whether the error is really an error
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IError.ToString">
            <summary>
            Gets the string representation of the error
            </summary>
            <returns>The string representation of the error</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders">
            <summary>
            Headers interface for duck-typing
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders.Add(System.String,System.Byte[])">
            <summary>
            Adds a header to the collection
            </summary>
            <param name="key">The header's key value</param>
            <param name="val">The value of the header. May be null. Format strings as UTF8</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders.Remove(System.String)">
            <summary>
                Removes all headers for the given key.
            </summary>
            <param name="key">The key to remove all headers for</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders.TryGetLastBytes(System.String,System.Byte[]@)">
            <summary>
                Try to get the value of the latest header with the specified key.
            </summary>
            <param name="key">
                The key to get the associated value of.
            </param>
            <param name="lastHeader">
                The value of the latest element in the collection with the
                specified key, if a header with that key was present in the
                collection.
            </param>
            <returns>
                true if the a value with the specified key was present in
                the collection, false otherwise.
            </returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage">
            <summary>
            Message interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage.Value">
            <summary>
            Gets the value of the message
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage.Timestamp">
            <summary>
            Gets the timestamp that the message was produced
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage.Headers">
            <summary>
            Gets or sets the headers for the record
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IProduceException">
            <summary>
            ProduceException interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IProduceException.DeliveryResult">
            <summary>
            Gets the delivery result associated with the produce request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp">
            <summary>
            Timestamp struct for duck-typing
            Requires boxing, but necessary as we need to duck-type <see cref="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp.Type"/> too
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp.Type">
            <summary>
            Gets the timestamp type
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp.UtcDateTime">
            <summary>
            Gets the UTC DateTime for the timestamp
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITopicPartition">
            <summary>
            TopicPartition interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITopicPartition.Topic">
            <summary>
                Gets the Kafka topic name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITopicPartition.Partition">
            <summary>
                Gets the Kafka partition.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITypedDeliveryHandlerShimAction">
            <summary>
            TypedDeliveryHandlerShim_Action for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITypedDeliveryHandlerShimAction.Handler">
            <summary>
            Sets the delivery report handler
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerCloseIntegration">
            <summary>
            Confluent.Kafka Consumer.Consume calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerCloseIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerCloseIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerConsumeIntegration">
            <summary>
            Confluent.Kafka Consumer.Consume calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerConsumeIntegration.OnMethodBegin``1(``0,System.Int32)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="millisecondsTimeout">The maximum period of time the call may block.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerConsumeIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerDisposeIntegration">
            <summary>
            Confluent.Kafka Consumer.Consume calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerDisposeIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerDisposeIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerUnsubscribeIntegration">
            <summary>
            Confluent.Kafka Consumer.Consume calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerUnsubscribeIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerUnsubscribeIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaHelper.TryInjectHeaders``2(Datadog.Trace.SpanContext,``1)">
            <summary>
            Try to inject the prop
            </summary>
            <param name="context">The Span context to propagate</param>
            <param name="message">The duck-typed Kafka Message object</param>
            <typeparam name="TTopicPartitionMarker">The TopicPartition type (used  optimisation purposes)</typeparam>
            <typeparam name="TMessage">The type of the duck-type proxy</typeparam>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceAsyncIntegration">
            <summary>
            Confluent.Kafka Producer.Produce calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceAsyncIntegration.OnMethodBegin``3(``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TTopicPartition">Type of the TopicPartition</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="topicPartition">TopicPartition instance</param>
            <param name="message">Message instance</param>
            <param name="cancellationToken">CancellationToken instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration">
            <summary>
            Confluent.Kafka Producer.TypedDeliveryHandlerShim_Action.HandleDeliveryReport calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.OnMethodBegin``4(``0,System.String,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TKey">Type of the message key</typeparam>
            <typeparam name="TValue">Type of the message value</typeparam>
            <typeparam name="TActionOfDeliveryReport">Type of the delivery report</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="topic">The topic to which the message was sent</param>
            <param name="key">The message key value</param>
            <param name="value">The message value</param>
            <param name="handler">The delivery handler instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.WrapAction``1(System.Action{``0},Datadog.Trace.Span)">
            <summary>
            Helper method used by <see cref="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.CachedWrapperDelegate`1"/> to create a delegate
            </summary>
            <param name="originalHandler">The original delivery report handler </param>
            <param name="span">A <see cref="T:Datadog.Trace.Span"/> that can be manipulated when the action is invoked</param>
            <typeparam name="TDeliveryReport">Type of the delivery report</typeparam>
            <returns>The wrapped action</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.CachedWrapperDelegate`1">
            <summary>
            Helper class for creating a <typeparamref name="TActionDelegate"/> that wraps an <see cref="T:System.Action`1"/>,
            </summary>
            <typeparam name="TActionDelegate">Makes the assumption that TActionDelegate is an <see cref="T:System.Action`1"/></typeparam>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncIntegration">
            <summary>
            Confluent.Kafka Producer.Produce calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncIntegration.OnMethodBegin``4(``0,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TTopicPartition">Type of the TopicPartition</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TDeliveryHandler">Type of the delivery handler action</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="topicPartition">TopicPartition instance</param>
            <param name="message">Message instance</param>
            <param name="deliveryHandler">Delivery Handler instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Offset">
            <summary>
            Partition for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Offset.Value">
            <summary>
            Gets the long value corresponding to this offset
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Offset.ToString">
            <summary>
            Based on the original implementation
            https://github.com/confluentinc/confluent-kafka-dotnet/blob/643c8fdc90f54f4d82d5135ae7e91a995f0efdee/src/Confluent.Kafka/Offset.cs#L274
            </summary>
            <returns>A string that represents the Offset object</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition">
            <summary>
            Partition for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition.Value">
            <summary>
            Gets the int value corresponding to this partition
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition.IsSpecial">
            <summary>
                Gets whether or not this is one of the special
                partition values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition.ToString">
            <summary>
            Based on the original implementation
            https://github.com/confluentinc/confluent-kafka-dotnet/blob/master/src/Confluent.Kafka/Partition.cs#L217-L224
            </summary>
            <returns>A string that represents the Partition object</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.DirectSubmissionLogger">
            <summary>
            An implementation of ILogger for use with direct log submission
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.DirectSubmissionLogger.Log``1(System.Int32,System.Object,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Writes a log entry.
            </summary>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">Id of the event.</param>
            <param name="state">The entry to be written. Can be also an object.</param>
            <param name="exception">The exception related to this entry.</param>
            <param name="formatter">Function to create a <see cref="T:System.String"/> message of the <paramref name="state"/> and <paramref name="exception"/>.</param>
            <typeparam name="TState">The type of the object to be written.</typeparam>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.DirectSubmissionLogger.IsEnabled(System.Int32)">
            <summary>
            Checks if the given <paramref name="logLevel"/> is enabled.
            </summary>
            <param name="logLevel">Level to be checked.</param>
            <returns><c>true</c> if enabled.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.DirectSubmissionLogger.BeginScope``1(``0)">
            <summary>
            Begins a logical operation scope.
            </summary>
            <param name="state">The identifier for the scope.</param>
            <typeparam name="TState">The type of the state to begin scope for.</typeparam>
            <returns>An <see cref="T:System.IDisposable"/> that ends the logical operation scope on dispose.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.DirectSubmissionLoggerProvider">
            <summary>
            Duck type for ILoggerProvider
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.DirectSubmissionLoggerProvider.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="N:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger"/> instance.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <returns>The instance of <see cref="N:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger"/> that was created.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.DirectSubmissionLoggerProvider.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.DirectSubmissionLoggerProvider.SetScopeProvider(Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.IExternalScopeProvider)">
            <summary>
            Method for ISupportExternalScope
            </summary>
            <param name="scopeProvider">The provider of scope data</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.IExternalScopeProvider">
            <summary>
            A duck type for Microsoft.Extensions.Logging.IExternalScopeProvider
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.IExternalScopeProvider.Push(System.Object)">
            <summary>
            Adds scope object to the list
            </summary>
            <param name="state">The scope object</param>
            <returns>The IDisposable token that removes scope on dispose</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.IExternalScopeProvider.ForEachScope``1(System.Action{System.Object,``0},``0)">
            <summary>
            Executes callback for each currently active scope objects in order of creation. All callbacks are guaranteed to be called inline from this method.
            Note that original is Action&lt;object, TState&gt; callback
            </summary>
            <param name="callback">The callback to be executed for every scope object</param>
            <param name="state">The state object to be passed into the callback.</param>
            <typeparam name="TState">The type of state to accept</typeparam>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.ILoggerFactory">
            <summary>
            Duck type for ILogLevel
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.ILoggerFactory.AddProvider(System.Object)">
            <summary>
            Used to add the ILoggerProvider
            </summary>
            <param name="provider">The ILoggerProvider to add</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.LoggerFactoryConstructorIntegration">
            <summary>
            LoggerFactory() calltarget instrumentation for direct log submission
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.DirectSubmission.LoggerFactoryConstructorIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerExternalScopeProviderForEachScopeIntegration">
            <summary>
            LoggerExternalScopeProvider.ForEach&lt;TState&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerExternalScopeProviderForEachScopeIntegration.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TAction">The type of the action</typeparam>
            <typeparam name="TState">The type of the state</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="callback">The callback to be invoked per scope</param>
            <param name="state">The state to pass to the callback</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerExternalScopeProviderForEachScopeIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerFactoryScopeProviderForEachScopeIntegration">
            <summary>
            LoggerFactoryScopeProvider.ForEach&lt;TState&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerFactoryScopeProviderForEachScopeIntegration.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TAction">The type of the action</typeparam>
            <typeparam name="TState">The type of the state</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="callback">The callback to be invoked per scope</param>
            <param name="state">The state to pass to the callback</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerFactoryScopeProviderForEachScopeIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.AppenderCollectionIntegration">
            <summary>
            AppenderCollection.ToArray() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.AppenderCollectionIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">The type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">The returned ILoggerWrapper </param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.AppenderCollectionLegacyIntegration">
            <summary>
            AppenderCollection.ToArray() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.AppenderCollectionLegacyIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">The type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">The returned ILoggerWrapper </param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.DirectSubmissionLog4NetAppender">
            <summary>
            Duck type for IAppender
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.DirectSubmissionLog4NetAppender.Name">
            <summary>
            Gets or sets the name of this appender
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.DirectSubmissionLog4NetAppender.Close">
            <summary>
            Closes the appender and releases resources
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.DirectSubmissionLog4NetAppender.DoAppend(Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuck)">
            <summary>
            Log the logging event in Appender specific way.
            </summary>
            <param name="logEvent">The logging event</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.DirectSubmissionLog4NetLegacyAppender">
            <summary>
            Duck type for IAppender
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.DirectSubmissionLog4NetLegacyAppender.Name">
            <summary>
            Gets or sets the name of this appender
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.DirectSubmissionLog4NetLegacyAppender.Close">
            <summary>
            Closes the appender and releases resources
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.DirectSubmissionLog4NetLegacyAppender.DoAppend(Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventLegacyDuck)">
            <summary>
            Log the logging event in Appender specific way.
            </summary>
            <param name="logEvent">The logging event</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuck">
            <summary>
            Duck type for LoggingEvent
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuck.TimeStampUtc">
            <summary>
            Gets the UTC time the event was logged
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuckBase">
            <summary>
            Duck type for LoggingEvent
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuckBase.LoggerName">
            <summary>
            Gets the name of the logger that logged the event.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuckBase.Level">
            <summary>
            Gets the Level of the logging event
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuckBase.MessageObject">
            <summary>
            Gets the application supplied message.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuckBase.RenderedMessage">
            <summary>
            Gets the message, rendered through the RendererMap".
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuckBase.GetExceptionString">
            <summary>
            Gets the exception associated with the event
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventDuckBase.GetProperties">
            <summary>
            Get all the composite properties in this event
            </summary>
            <returns>Dictionary containing all the properties</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventLegacyDuck">
            <summary>
            Duck type for LoggingEvent
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.ILoggingEventLegacyDuck.TimeStamp">
            <summary>
            Gets the Local time the event was logged
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.LevelDuck">
            <summary>
            Duck type for Level
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Log4Net.DirectSubmission.LevelDuck.Value">
            <summary>
            Gets the level value
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.DirectSubmissionNLogLegacyTarget">
            <summary>
            NLog Target that sends logs directly to Datadog for NLog &lt;4.5
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.DirectSubmissionNLogLegacyTarget.Write(Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoLegacyProxy)">
            <summary>
            Writes logging event to the log target
            </summary>
            <param name="logEventInfo">Logging event to be written out</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.DirectSubmissionNLogTarget">
            <summary>
            NLog Target that sends logs directly to Datadog
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.DirectSubmissionNLogTarget.Write(Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxy)">
            <summary>
            Writes logging event to the log target
            </summary>
            <param name="logEventInfo">Logging event to be written out</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.LogFactoryGetConfigurationForLoggerInstrumentation">
            <summary>
            LogFactory.GetConfigurationForLogger calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.LogFactoryGetConfigurationForLoggerInstrumentation.OnMethodBegin``2(``0,System.String,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TLoggingConfiguration">Type of the LoggingConfiguration object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="name">The name of the logger</param>
            <param name="configuration">The logging configuration</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoLegacyProxy">
            <summary>
            Duck type for LogEventInfo  for NLog &lt; 4.5
            Using virtual members, as will need to be boxed, so no advantage from using a struct
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoLegacyProxy.Properties">
            <summary>
            Gets the dictionary of per-event context properties
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxy">
            <summary>
            Duck type for LogEventInfo  for NLog &gt; 4.5
            Using virtual members, as will need to be boxed, so no advantage from using a struct
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxy.HasProperties">
            <summary>
            Gets a value indicating whether there are any per-event properties (Without allocation)
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxy.Properties">
            <summary>
            Gets the dictionary of per-event context properties
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxyBase">
            <summary>
            Duck type for LogEventInfo  for NLog &lt; 4.5
            Using interface members, as will need to be boxed, so no advantage from using a struct
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxyBase.TimeStamp">
            <summary>
            Gets the timestamp
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxyBase.Level">
            <summary>
            Gets the log level
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxyBase.Exception">
            <summary>
            Gets the exception
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxyBase.FormattedMessage">
            <summary>
            Gets the formatted message.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxyBase.Message">
            <summary>
            Gets the log message including any parameter placeholders.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILoggingConfigurationLegacyProxy">
            <summary>
            Duck type for LoggingConfiguration for NLog &gt; 4.3-4.5
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILoggingConfigurationLegacyProxy.ConfiguredNamedTargets">
            <summary>
            Gets a collection of named targets specified in the configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILoggingConfigurationLegacyProxy.AddTarget(System.String,System.Object)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="target">The target object.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILoggingConfigurationLegacyProxy.AddRuleForAllLevels(System.Object,System.String)">
            <summary>
            Add a rule for all loglevels.
            </summary>
            <param name="target">Target to be written to when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILoggingConfigurationProxy">
            <summary>
            Duck type for LoggingConfiguration for NLog 4.5+
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILoggingConfigurationProxy.ConfiguredNamedTargets">
            <summary>
            Gets a collection of named targets specified in the configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILoggingConfigurationProxy.AddTarget(System.String,System.Object)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="target">The target object.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILoggingConfigurationProxy.AddRuleForAllLevels(System.Object,System.String,System.Boolean)">
            <summary>
            Add a rule for all loglevels.
            </summary>
            <param name="target">Target to be written to when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="final">Gets or sets a value indicating whether to quit processing any further rule when this one matches.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetProxy">
            <summary>
            Duck type for TargetWithContext
            Represents target that supports context capture using MDLC, MDC, NDLC and NDC
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetProxy.Initialize(System.Object)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetWithContextBaseProxy">
            <summary>
            Duck type for TargetWithContext
            Represents target that supports context capture using MDLC, MDC, NDLC and NDC
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetWithContextBaseProxy.IncludeEventProperties">
            <summary>
            Gets or sets a value indicating whether gets or sets the option to include all properties from the log events
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetWithContextBaseProxy.IncludeMdc">
            <summary>
            Gets or sets a value indicating whether to include contents of the MappedDiagnosticsContext dictionary.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetWithContextBaseProxy.IncludeNdc">
            <summary>
            Gets or sets a value indicating whether to include contents of the NestedDiagnosticsContext stack.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetWithContextBaseProxy.IncludeMdlc">
            <summary>
            Gets or sets a value indicating whether to include contents of the MappedDiagnosticsLogicalContext dictionary.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetWithContextBaseProxy.IncludeNdlc">
            <summary>
            Gets or sets a value indicating whether to include contents of the NestedDiagnosticsLogicalContext stack.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetWithContextBaseProxy.GetAllProperties(Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ILogEventInfoProxy)">
            <summary>
            Creates combined dictionary of all configured properties for logEvent
            </summary>
            <param name="logEvent">The event to record</param>
            <returns>Dictionary with all collected properties for logEvent</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.ITargetWithContextBaseProxy.Initialize(System.Object)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.LogLevelProxy">
            <summary>
            Duck type for LogLevel
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.LogLevelProxy.Ordinal">
            <summary>
            Gets the name of the log level
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.MappedDiagnosticsContextLegacyProxy">
            <summary>
            Duck type for MappedDiagnosticsContextProxy for NLog &lt; 4.3
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.MappedDiagnosticsContextLegacyProxy.ThreadDictionary">
            <summary>
            Gets the thread local dictionary for the type
            Using an IDictionary instead of typed as in 4.0.x  this is a (string, string),
            and in later versions it's a (string, object)
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.MappedDiagnosticsLogicalContextLegacyProxy">
            <summary>
            Duck type for MappedDiagnosticsLogicalContext in NLog &lt;4.3
            Async version of Mapped Diagnostics Context - a logical context structure that keeps a dictionary
            of strings and provides methods to output them in layouts.  Allows for maintaining state across
            asynchronous tasks and call contexts.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.MappedDiagnosticsLogicalContextLegacyProxy.LogicalThreadDictionary">
            <summary>
            Gets the async  local dictionary for the type
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.MappedDiagnosticsProxy">
            <summary>
            Duck type for MappedDiagnosticsContext and MappedDiagnosticsLogicalContext in NLog 4.3+
            Async version of Mapped Diagnostics Context - a logical context structure that keeps a dictionary
            of strings and provides methods to output them in layouts.  Allows for maintaining state across
            asynchronous tasks and call contexts.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.MappedDiagnosticsProxy.GetNames">
            <summary>
            Gets the item names
            </summary>
            <returns>A collection of the names of all items in current logical context.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.MappedDiagnosticsProxy.GetObject(System.String)">
            <summary>
            Gets the current logical context named item, as <see cref="T:System.Object"/>
            </summary>
            <param name="item">Item name</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingConfigurationPre43Proxy">
            <summary>
            Duck type for LoggingConfiguration for NLog &lt; 4.3
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingConfigurationPre43Proxy.ConfiguredNamedTargets">
            <summary>
            Gets a collection of named targets specified in the configuration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingConfigurationPre43Proxy.LoggingRules">
            <summary>
            Gets the collection of logging rules
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingConfigurationPre43Proxy.AddTarget(System.String,System.Object)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="target">The target object.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingRuleProxy">
            <summary>
            Duck type for LoggingRule for NLog &lt; 4.3
            This is left as an interface instead of a [DuckCopy] struct as we need to
            set values on the proxy too.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingRuleProxy.LoggerNamePattern">
            <summary>
            Gets or sets logger name pattern
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingRuleProxy.Targets">
            <summary>
            Gets the collection of logging rules
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingRuleProxy.Final">
            <summary>
            Gets or sets a value indicating whether to quit processing any further rule when this one matches
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingRuleProxy.LogLevels">
            <summary>
            Gets the loglevels
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingRulesListProxy">
            <summary>
            Duck type for IList&lt;LoggingRule&gt;
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ILoggingRulesListProxy.Add(System.Object)">
            <summary>
            Adds the logging rule to the collection
            </summary>
            <param name="item">The logging rule to add to the collection</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ITargetListProxy">
            <summary>
            Duck type for IList&lt;LoggingRule&gt;
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.DirectSubmission.Proxies.Pre43.ITargetListProxy.Add(System.Object)">
            <summary>
            Adds the logging rule to the collection
            </summary>
            <param name="item">The logging rule to add to the collection</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.LogsInjection.LoggerImplWriteIntegration">
            <summary>
            LoggerImpl.Write calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.LogsInjection.LoggerImplWriteIntegration.OnMethodBegin``4(``0,System.Type,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TTargets">The type of the TargetWithFilterChain </typeparam>
            <typeparam name="TLogEventInfo">The type of the LogEventInfo</typeparam>
            <typeparam name="TLogFactory">The type of the LogFactory</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="loggerType">The instance of the logger type</param>
            <param name="targetsForLevel">The instance of the targets for the level</param>
            <param name="logEvent">The logging event instance</param>
            <param name="factory">The LogFactory instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.LogsInjection.LoggerImplWriteIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.LogsInjection.MappedDiagnosticsContextSetterProxy">
            <summary>
            Duck type for MappedDiagnosticsContext in NLog 1.0+
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.LogsInjection.MappedDiagnosticsContextSetterProxy.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.LogsInjection.MappedDiagnosticsContextSetterProxy.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.LogsInjection.MappedDiagnosticsLogicalContextSetterProxy">
            <summary>
            Duck type for MappedDiagnosticsLogicalContext in NLog 4.6+
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.NLog.LogsInjection.MappedDiagnosticsLogicalContextSetterProxy.SetScoped(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Updates the current logical context with multiple items in single operation
            </summary>
            <param name="items">.</param>
            <returns>>An <see cref="T:System.IDisposable"/> that can be used to remove the item from the current logical context (null if no items).</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.DirectSubmissionSerilogSink">
            <summary>
            Serilog Sink
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.DirectSubmissionSerilogSink.Emit(Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent)">
            <summary>
            Emit the provided log event to the sink
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.DictionaryValueDuck">
            <summary>
            Duck type for DictionaryValue
            https://github.dev/serilog/serilog/blob/5e93d5045585095ebcb71ef340d6accd61f01670/src/Serilog/Events/DictionaryValue.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.DictionaryValueDuck.Elements">
            <summary>
            Gets the properties associated with the structure
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.KeyValuePairObjectStruct">
            <summary>
            Duck type for KeyValuePair&lt;object, LogEventPropertyValue&gt;
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.KeyValuePairObjectStruct.Key">
            <summary>
            Gets the key
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.KeyValuePairObjectStruct.Value">
            <summary>
            Gets the value (A LogEventPropertyValue (ScalarValue/StructureValue etc)
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.KeyValuePairStringStruct">
            <summary>
            Duck type for KeyValuePair&lt;object, LogEventPropertyValue&gt;
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.KeyValuePairStringStruct.Key">
            <summary>
            Gets the key
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.KeyValuePairStringStruct.Value">
            <summary>
            Gets the value (A LogEventPropertyValue (ScalarValue/StructureValue etc)
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.LogEventPropertyDuck">
            <summary>
            Duck type for LogEventProperty
            https://github.dev/serilog/serilog/blob/5e93d5045585095ebcb71ef340d6accd61f01670/src/Serilog/Events/LogEventProperty.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.LogEventPropertyDuck.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.LogEventPropertyDuck.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.ScalarValueDuck">
            <summary>
            Duck type for ScalarValue
            https://github.com/serilog/serilog/blob/5e93d5045585095ebcb71ef340d6accd61f01670/src/Serilog/Events/ScalarValue.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.ScalarValueDuck.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.SequenceValueDuck">
            <summary>
            Duck type for SequenceValue
            https://github.dev/serilog/serilog/blob/5e93d5045585095ebcb71ef340d6accd61f01670/src/Serilog/Events/SequenceValue.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.SequenceValueDuck.Elements">
            <summary>
            Gets the sequence values
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.StructureValueDuck">
            <summary>
            Duck type for ScalarValue
            https://github.dev/serilog/serilog/blob/5e93d5045585095ebcb71ef340d6accd61f01670/src/Serilog/Events/ScalarValue.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.StructureValueDuck.Properties">
            <summary>
            Gets the properties associated with the structure
            These are convertible to <see cref="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.LogEventPropertyDuck"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.Formatting.StructureValueDuck.TypeTag">
            <summary>
            Gets the type of the structure
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent">
            <summary>
            Duck type for LogEvent
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent.Timestamp">
            <summary>
            Gets the time at which the event occurred.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent.Level">
            <summary>
            Gets the level of the event.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent.MessageTemplate">
            <summary>
            Gets the message template describing the event.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent.Properties">
            <summary>
            Gets properties associated with the event, including those presented in <see cref="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent.MessageTemplate"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent.Exception">
            <summary>
            Gets an exception associated with the event, or null.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILogEvent.RenderMessage(System.IFormatProvider)">
            <summary>
            Render the message template given the properties associated
            with the event, and return the result.
            </summary>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <returns>The rendered message</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILoggerConfiguration">
            <summary>
            Duck typing for LoggerConfiguration
            Interface, as used in instrumentation constraint
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.ILoggerConfiguration.LogEventSinks">
            <summary>
            Gets the
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LogEventLevelDuck">
            <summary>
            Duck type for LogEventLevel
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LogEventLevelDuck.Verbose">
            <summary>
            Anything and everything you might want to know about
            a running block of code.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LogEventLevelDuck.Debug">
            <summary>
            Internal system events that aren't necessarily
            observable from the outside.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LogEventLevelDuck.Information">
            <summary>
            The lifeblood of operational intelligence - things
            happen.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LogEventLevelDuck.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LogEventLevelDuck.Error">
            <summary>
            Functionality is unavailable, invariants are broken
            or data is lost.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LogEventLevelDuck.Fatal">
            <summary>
            If you have a pager, it goes off when one of these
            occurs.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LoggerConfigurationInstrumentation">
            <summary>
            LoggerConfiguration.CreateLogger() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.LoggerConfigurationInstrumentation.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.MessageTemplateProxy">
            <summary>
            Duck typing for MessageTemplate
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.DirectSubmission.MessageTemplateProxy.Text">
            <summary>
            Gets the raw text describing the template
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.LogsInjection.LogEventProxy">
            <summary>
            Ducktyping proxy for https://github.com/serilog/serilog/blob/1aabe1d6bde10382233fb2a50e0e2c6e0c9b8287/src/Serilog/Events/LogEvent.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.LogsInjection.LogEventProxy.Properties">
            <summary>
            Gets the log Properties collection
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.LogsInjection.LoggerDispatchInstrumentation">
            <summary>
            LoggerFactoryScopeProvider.ForEach&lt;TState&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.Serilog.LogsInjection.LoggerDispatchInstrumentation.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TLogEvent">The type of the LogEvent</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="loggingEvent">The logging event</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.AppenderAttachedImplIntegration">
            <summary>
            LoggerFactoryScopeProvider.ForEach&lt;TState&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.AppenderAttachedImplIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TLoggingEvent">The type of the logging event</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="loggingEvent">The logging event</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.AppenderAttachedImplIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.ILoggingEvent">
            <summary>
            log4net.Core.LoggingEvent interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.ILoggingEvent.Properties">
            <summary>
            Gets the properties of the logging event
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.BsonDocumentProxy">
            <summary>
            MongoDB.Bson.BsonDocument interface for duck-typing
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.BsonDocumentProxy.GetElement(System.Int32)">
            <summary>
            Gets an element of this document.
            </summary>
            <param name="index">The zero based index of the element.</param>
            <returns>The element.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.BsonElementStruct">
            <summary>
            MongoDB.Bson.BsonDocument interface for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.BsonElementStruct.Name">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.BsonElementStruct.Value">
            <summary>
            Gets the value of the element.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.DatabaseNamespaceStruct">
            <summary>
            MongoDB.Driver.DatabaseNamespace interface for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.DatabaseNamespaceStruct.DatabaseName">
            <summary>
            Gets the name of the database
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IConnection">
            <summary>
            MongoDB.Driver.Core.IConnection interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IConnection.EndPoint">
            <summary>
            Gets the command object passed into the wire protocol
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocolWithCommandStruct">
            <summary>
            MongoDB.Driver.Core.IWireProtocol interface for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocolWithCommandStruct.Command">
            <summary>
            Gets the command object passed into the wire protocol
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocolWithDatabaseNamespaceStruct">
            <summary>
            MongoDB.Driver.Core.IWireProtocol interface for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocolWithDatabaseNamespaceStruct.DatabaseNamespace">
            <summary>
            Gets the database namespace object passed into the wire protocol
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_ExecuteAsync_Integration">
            <summary>
            MongoDB.Driver.Core.WireProtocol.IWireProtocol&lt;TResult&gt; instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_ExecuteAsync_Integration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="connection">The MongoDB connection</param>
            <param name="cancellationToken">The cancellation token</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TConnection">Type of the connection</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_ExecuteAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Execute_Integration">
            <summary>
            MongoDB.Driver.Core.WireProtocol.IWireProtocol instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Execute_Integration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="connection">The MongoDB connection</param>
            <param name="cancellationToken">The cancellation token</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TConnection">Type of the connection</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Execute_Integration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Generic_Execute_Integration">
            <summary>
            MongoDB.Driver.Core.WireProtocol.IWireProtocol&lt;TResult&gt; instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Generic_Execute_Integration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="connection">The MongoDB connection</param>
            <param name="cancellationToken">The cancellation token</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TConnection">Type of the connection</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Generic_Execute_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.MongoDbIntegration">
            <summary>
            Tracing integration for MongoDB.Driver.Core.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue">
            <summary>
            message queue proxy
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue.Transactional">
             <summary>
                 Gets a value indicating whether the queue accepts only transactions.
            
             Returns:
                 true if the queue accepts only messages sent as part of a transaction; otherwise,
                 false.
            
             Exceptions:
               T:System.Messaging.MessageQueueException:
                 An error occurred when accessing a Message Queuing method.
             </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue.Path">
             <summary>
                 Gets the queue's path. Setting the System.Messaging.MessageQueue.Path
                 causes the System.Messaging.MessageQueue to point to a new queue.
            
             Returns:
                 The queue that is referenced by the System.Messaging.MessageQueue. The default
                 depends on which System.Messaging.MessageQueue.#ctor constructor you use; it
                 is either null or is specified by the constructor's path parameter.
            
             Exceptions:
               T:System.ArgumentException:
                 The path is not valid, possibly because the syntax is not valid.
             </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType">
            <summary>
            message queue transaction type
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType.None">
            <summary>
            Operation will not be transactional
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType.Automatic">
            <summary>
            A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services.
            If there is already an MTS transaction context, it will be used when sending
            or receiving the message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType.Single">
            <summary>
            A transaction type used for single internal transactions.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_Purge_Integration">
            <summary>
            Msmq calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_Purge_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TMessageQueue">Message queue</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_Purge_Integration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>CallTargetReturn</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_ReceiveCurrent_Integration">
            <summary>
            Msmq calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_ReceiveCurrent_Integration.OnMethodBegin``1(``0,System.TimeSpan,System.Int32,System.Object,System.Object,System.Object,Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TMessageQueue">Generic TMessageQueue</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method, the message queue</param>
            <param name="timeout">A System.TimeSpan that indicates the time to wait until a new message is available for inspection.</param>
            <param name="action">If action is 0, it's a peek (message remains in the queue), otherwise it's a receive</param>
            <param name="cursorHandle">A System.Messaging.Cursor that maintains a specific position in the message queue.</param>
            <param name="messagePropertyFilter"> Controls and selects the properties that are retrieved when peeking or receiving messages from a message queue.</param>2
            <param name="messageQueueTransaction">transaction</param>
            <param name="messageQueueTransactionType">type of transaction</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_ReceiveCurrent_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="messageResult">message result</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>CallTargetReturn</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_SendInternal_Integration">
            <summary>
            Msmq calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_SendInternal_Integration.OnMethodBegin``1(``0,System.Object,System.Object,Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TMessageQueue">Message queue</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message itself, can be of any type</param>
            <param name="messageQueueTransaction">Message queue transaction can be null</param>
            <param name="messageQueueTransactionType">Message queue transaction type can be null</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_SendInternal_Integration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>CallTargetReturn</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicDeliverIntegration">
            <summary>
            RabbitMQ.Client BasicDeliver calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicDeliverIntegration.OnMethodBegin``3(``0,System.String,System.UInt64,System.Boolean,System.String,System.String,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBasicProperties">Type of the message properties</typeparam>
            <typeparam name="TBody">Type of the message body</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="consumerTag">The original consumerTag argument</param>
            <param name="deliveryTag">The original deliveryTag argument</param>
            <param name="redelivered">The original redelivered argument</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicDeliverIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicGetIntegration">
            <summary>
            RabbitMQ.Client BasicGet calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicGetIntegration.OnMethodBegin``1(``0,System.String,System.Boolean)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">The queue name of the message</param>
            <param name="autoAck">The original autoAck argument</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicGetIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">Type of the BasicGetResult</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="basicGetResult">BasicGetResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicPublishIntegration">
            <summary>
            RabbitMQ.Client BasicPublish calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicPublishIntegration.OnMethodBegin``3(``0,System.String,System.String,System.Boolean,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBasicProperties">Type of the message properties</typeparam>
            <typeparam name="TBody">Type of the message body</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="mandatory">The mandatory routing flag.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicPublishIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.ExchangeDeclareIntegration">
            <summary>
            RabbitMQ.Client ExchangeDeclare calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.ExchangeDeclareIntegration.OnMethodBegin``1(``0,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="type">Type of the exchange.</param>
            <param name="passive">The original passive setting</param>
            <param name="durable">The original durable setting</param>
            <param name="autoDelete">The original autoDelete setting</param>
            <param name="internal">The original internal setting</param>
            <param name="nowait">The original nowait setting</param>
            <param name="arguments">The original arguments setting</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.ExchangeDeclareIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicGetResult">
            <summary>
            BasicGetResult interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicGetResult.Body">
            <summary>
            Gets the message body of the result
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicGetResult.BasicProperties">
            <summary>
            Gets the message properties
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties">
            <summary>
            BasicProperties interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties.Headers">
            <summary>
            Gets or sets the headers of the message
            </summary>
            <returns>Message headers</returns>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties.DeliveryMode">
            <summary>
            Gets the delivery mode of the message
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties.IsDeliveryModePresent">
            <summary>
            Returns true if the DeliveryMode property is present
            </summary>
            <returns>true if the DeliveryMode property is present</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBody">
            <summary>
            Body interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBody.Length">
            <summary>
            Gets the length of the message body
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueBindIntegration">
            <summary>
            RabbitMQ.Client QueueBind calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueBindIntegration.OnMethodBegin``1(``0,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">Name of the queue.</param>
            <param name="exchange">The original exchange argument.</param>
            <param name="routingKey">The original routingKey argument.</param>
            <param name="arguments">The original arguments setting</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueBindIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueDeclareIntegration">
            <summary>
            RabbitMQ.Client QueueDeclare calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueDeclareIntegration.OnMethodBegin``1(``0,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">Name of the queue.</param>
            <param name="passive">The original passive setting</param>
            <param name="durable">The original durable setting</param>
            <param name="exclusive">The original exclusive settings</param>
            <param name="autoDelete">The original autoDelete setting</param>
            <param name="nowait">The original nowait setting</param>
            <param name="arguments">The original arguments setting</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueDeclareIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.RabbitMQIntegration">
            <summary>
            Tracing integration for RabbitMQ.Client
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.RabbitMQIntegration.BasicGetResultStruct.Body">
            <summary>
            Gets the message body of the result
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.RabbitMQIntegration.BasicGetResultStruct.BasicProperties">
            <summary>
            Gets the message properties
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.RabbitMQIntegration.IBasicProperties.Headers">
            <summary>
            Gets or sets the headers of the message
            </summary>
            <returns>Message headers</returns>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.RabbitMQIntegration.IBasicProperties.DeliveryMode">
            <summary>
            Gets the delivery mode of the message
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.RabbitMQIntegration.IBasicProperties.IsDeliveryModePresent">
            <summary>
            Returns true if the DeliveryMode property is present
            </summary>
            <returns>true if the DeliveryMode property is present</returns>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.RabbitMQIntegration.BodyStruct.Length">
            <summary>
            Gets the length of the message body
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.IRedisNativeClient">
            <summary>
            Redis native client for duck typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.IRedisNativeClient.Host">
            <summary>
            Gets Client Hostname
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.IRedisNativeClient.Port">
            <summary>
            Gets Client Port
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.RedisNativeClientSendReceiveIntegration">
            <summary>
            ServiceStack.Redis.RedisNativeClient.SendReceive[T] calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.RedisNativeClientSendReceiveIntegration.OnMethodBegin``3(``0,System.Byte[][],``1,``2,System.Boolean)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TFunc">Type of the result processor</typeparam>
            <typeparam name="TAction">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="cmdWithBinaryArgs">Cmd with binary args</param>
            <param name="fn">Function instance</param>
            <param name="completePipelineFn">Complete pipeline function instance</param>
            <param name="sendWithoutRead">Send without read boolean</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.RedisNativeClientSendReceiveIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteAsyncImplIntegration">
            <summary>
            StackExchange.Redis.ConnectionMultiplexer.ExecuteAsyncImpl calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteAsyncImplIntegration.OnMethodBegin``4(``0,``1,``2,System.Object,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TProcessor">Type of the result processor</typeparam>
            <typeparam name="TServerEndPoint">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message instance</param>
            <param name="resultProcessor">Result processor instance</param>
            <param name="state">State instance</param>
            <param name="serverEndPoint">Server endpoint instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteAsyncImplIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteSyncImplIntegration">
            <summary>
            StackExchange.Redis.ConnectionMultiplexer.ExecuteSyncImpl calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteSyncImplIntegration.OnMethodBegin``4(``0,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TProcessor">Type of the result processor</typeparam>
            <typeparam name="TServerEndPoint">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message instance</param>
            <param name="resultProcessor">Result processor instance</param>
            <param name="serverEndPoint">Server endpoint instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteSyncImplIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IConnectionMultiplexer">
            <summary>
            Connection multiplexer ducktype structure
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IConnectionMultiplexer.Configuration">
            <summary>
            Gets the conection configuration
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IMessageData">
            <summary>
            Message data interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IMessageData.CommandAndKey">
            <summary>
            Gets message command and key
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IRedisBase">
            <summary>
            RedisBase interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IRedisBase.Multiplexer">
            <summary>
            Gets multiplexer data structure
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.MultiplexerData">
            <summary>
            Multiplexer data structure for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.MultiplexerData.Configuration">
            <summary>
            Multiplexer configuration
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteAsyncIntegration">
            <summary>
            StackExchange.Redis.[RedisBase/RedisBatch/RedisTransaction].ExecuteAsync[T] calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteAsyncIntegration.OnMethodBegin``4(``0,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TProcessor">Type of the result processor</typeparam>
            <typeparam name="TServerEndPoint">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message instance</param>
            <param name="resultProcessor">Result processor instance</param>
            <param name="serverEndPoint">Server endpoint instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteSyncIntegration">
            <summary>
            StackExchange.Redis.RedisBase.ExecuteSync[T] calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteSyncIntegration.OnMethodBegin``4(``0,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TProcessor">Type of the result processor</typeparam>
            <typeparam name="TServerEndPoint">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message instance</param>
            <param name="resultProcessor">Result processor instance</param>
            <param name="serverEndPoint">Server endpoint instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteSyncIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.StackExchangeRedisHelper">
            <summary>
            Base class for redis integration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.StackExchangeRedisHelper.GetHostAndPort(System.String)">
            <summary>
            Get the host and port from the config
            </summary>
            <param name="config">The config</param>
            <returns>The host and port</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod">
            <summary>
            TestMethod ducktype interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.TestMethodName">
            <summary>
            Gets the test method name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.TestClassName">
            <summary>
            Gets the test class name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.MethodInfo">
            <summary>
            Gets the MethodInfo
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.Arguments">
            <summary>
            Gets the test arguments
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.GetAllAttributes(System.Boolean)">
            <summary>
            Gets all attributes
            </summary>
            <param name="inherit">Injerits all the attributes from base classes</param>
            <returns>Attribute array</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethodRunner">
            <summary>
            TestMethodRunner ducktype interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethodRunner.TestMethodInfo">
            <summary>
            Gets the TestMethodInfo instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestCategoryAttributeStruct">
            <summary>
            TestCategoryAttribute ducktype struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestCategoryAttributeStruct.TestCategories">
            <summary>
            Gets the test categories
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodAttributeExecuteIntegration">
            <summary>
            Microsoft.VisualStudio.TestPlatform.TestFramework.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodAttributeExecuteIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TTestMethod">Type of the ITestMethod</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="testMethod">Test method instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodAttributeExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodRunnerExecuteIntegration">
            <summary>
            Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestMethodRunner.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodRunnerExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestPropertyAttributeStruct">
            <summary>
            TestPropertyAttribute ducktype struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestPropertyAttributeStruct.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestPropertyAttributeStruct.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestResultStruct">
            <summary>
            TestResult ducktype struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestResultStruct.Outcome">
            <summary>
            Gets the outcome enum
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestResultStruct.TestFailureException">
            <summary>
            Test failure exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome">
            <summary>
            Unit test outcomes
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Failed">
            <summary>
            Test was executed, but there were issues.
            Issues may involve exceptions or failed assertions.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Inconclusive">
            <summary>
            Test has completed, but we can't say if it passed or failed.
            May be used for aborted tests.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Passed">
            <summary>
            Test was executed without any issues.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.InProgress">
            <summary>
            Test is currently executing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Error">
            <summary>
            There was a system error while we were trying to execute a test.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Timeout">
            <summary>
            The test timed out.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Aborted">
            <summary>
            Test was aborted by the user.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Unknown">
            <summary>
            Test is in an unknown state
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.NotRunnable">
            <summary>
            Test cannot be executed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome">
            <summary>
            UnitTestResult Outcome
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Timeout">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Inconclusive">
            <summary>
            Inconclusive
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Ignored">
            <summary>
            Ignored
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.NotRunnable">
            <summary>
            Not Runnable
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Passed">
            <summary>
            Passed
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.NotFound">
            <summary>
            Not Found
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.InProgress">
            <summary>
            In Progress
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultStruct">
            <summary>
            UnitTestResult ducktype struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultStruct.ErrorMessage">
            <summary>
            Gets the error message
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultStruct.ErrorStackTrace">
            <summary>
            Gets the error stacktrace
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultStruct.Outcome">
            <summary>
            Gets the outcome enum
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestRunnerIsTestMethodRunnableIntegration">
            <summary>
            Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.UnitTestRunner.IsTestMethodRunnable calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestRunnerIsTestMethodRunnableIntegration.OnMethodBegin``4(``0,``1,``2,``3@)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg1">Type of the arg1</typeparam>
            <typeparam name="TArg2">Type of the arg2</typeparam>
            <typeparam name="TArg3">Type of the arg3</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="testMethod">Test method argument</param>
            <param name="testMethodInfo">Test method info argument</param>
            <param name="notRunnableResult">Not runnable result argument</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestRunnerRunCleanupIntegration">
            <summary>
            Microsoft.VisualStudio.TestPlatform.TestFramework.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestRunnerRunCleanupIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestRunnerRunSingleTestIntegration">
            <summary>
            Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.UnitTestRunner.RunSingleTest calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestRunnerRunSingleTestIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite">
            <summary>
            The FailureSite enum indicates the stage of a test
            in which an error or failure occurred.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.Test">
            <summary>
            Failure in the test itself
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.SetUp">
            <summary>
            Failure in the SetUp method
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.TearDown">
            <summary>
            Failure in the TearDown method
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.Parent">
            <summary>
            Failure of a parent test
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.Child">
            <summary>
            Failure of a child test
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ICompositeWorkItem">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.Execution.CompositeWorkItem
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ICompositeWorkItem.Children">
            <summary>
            Gets the List of Child WorkItems
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IMethodInfo">
            <summary>
            DuckTyping interface for NUnit.Framework.Interfaces.IMethodInfo
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IMethodInfo.MethodInfo">
            <summary>
            Gets the MethodInfo for this method.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag">
            <summary>
            DuckTyping interface for NUnit.Framework.Interfaces.IPropertyBag
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag.Keys">
            <summary>
            Gets a collection containing all the keys in the property set
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag.Item(System.String)">
            <summary>
            Gets or sets the list of values for a particular key
            </summary>
            <param name="key">The key for which the values are to be retrieved</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag.Get(System.String)">
            <summary>
            Gets a single value for a key, using the first
            one if multiple values are present and returning
            null if the value is not found.
            </summary>
            <param name="key">the key for which the values are to be retrieved</param>
            <returns>First value of the list for the key; otherwise null.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IResultState">
            <summary>
            DuckTyping interface for NUnit.Framework.Interfaces.ResultState
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IResultState.Status">
            <summary>
            Gets the TestStatus for the test.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IResultState.Site">
            <summary>
            Gets the stage of test execution in which
            the failure or other result took place.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.Test
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.Name">
            <summary>
            Gets the test name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.FullName">
            <summary>
            Gets the fully qualified name of the test
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.Method">
            <summary>
            Gets a MethodInfo for the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.Arguments">
            <summary>
            Gets the arguments to use in creating the test or empty array if none required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.Properties">
            <summary>
            Gets the properties for this test
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestExecutionContext">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.TestExecutionContext
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestExecutionContext.CurrentTest">
            <summary>
            Gets the current test
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.TestResult
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult.Test">
            <summary>
            Gets the test with which this result is associated.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult.ResultState">
            <summary>
            Gets the resultstate of the test result.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult.Message">
            <summary>
            Gets the message associated with a test failure.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult.StackTrace">
            <summary>
            Gets any stacktrace associated with an error or failure.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestSuite">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.TestSuite
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestSuite.Tests">
            <summary>
            Gets the children tests
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IWorkItem">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.Execution.WorkItem
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IWorkItem.Result">
            <summary>
            Gets the test result
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitCompositeWorkItemSkipChildrenIntegration">
            <summary>
            NUnit.Framework.Internal.Execution.CompositeWorkItem.SkipChildren() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitCompositeWorkItemSkipChildrenIntegration.OnMethodBegin``3(``0,``1,``2,System.String)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSuite">Test suite type</typeparam>
            <typeparam name="TResultState">Result state type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="testSuite">Test suite instance</param>
            <param name="resultState">Result state instance</param>
            <param name="message">Message instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitCompositeWorkItemSkipChildrenIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitSkipCommandExecuteIntegration">
            <summary>
            NUnit.Framework.Internal.Commands.SkipCommand.Execute() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitSkipCommandExecuteIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">ExecutionContext type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionContext">Execution context instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitSkipCommandExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">TestResult type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original method return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestAdapterUnloadIntegration">
            <summary>
            NUnit.VisualStudio.TestAdapter.NUnitTestAdapter.Unload() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestAdapterUnloadIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestAssemblyRunnerWaitForCompletionIntegration">
            <summary>
            NUnit.Framework.Api.NUnitTestAssemblyRunner.WaitForCompletion() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestAssemblyRunnerWaitForCompletionIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">TestResult type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original method return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestMethodCommandExecuteIntegration">
            <summary>
            NUnit.Framework.Internal.Commands.TestMethodCommand.Execute() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestMethodCommandExecuteIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">ExecutionContext type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionContext">Execution context instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestMethodCommandExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">TestResult type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original method return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus">
            <summary>
            The TestStatus enum indicates the result of running a test
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Inconclusive">
            <summary>
            The test was inconclusive
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Skipped">
            <summary>
            The test has skipped
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Passed">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Warning">
            <summary>
            There was a warning
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Failed">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.IExceptionAggregator">
            <summary>
            Exception aggregator interface
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.IExceptionAggregator.ToException">
            <summary>
            Extract exception
            </summary>
            <returns>Exception instance</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestCaseStruct">
            <summary>
            TestCase structure
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestCaseStruct.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestCaseStruct.Traits">
            <summary>
            Traits dictionary
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct">
            <summary>
            TestInvoker`1 structure
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.TestClass">
            <summary>
            Test class Type
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.TestMethod">
            <summary>
            Test method MethodInfo
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.TestMethodArguments">
            <summary>
            Test method arguments
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.TestCase">
            <summary>
            Test case
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.Aggregator">
            <summary>
            Exception aggregator
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct">
            <summary>
            TestRunner`1 structure
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.TestClass">
            <summary>
            Test class Type
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.TestMethod">
            <summary>
            Test method MethodInfo
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.TestMethodArguments">
            <summary>
            Test method arguments
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.TestCase">
            <summary>
            Test case
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.Aggregator">
            <summary>
            Exception aggregator
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.SkipReason">
            <summary>
            Skip reason
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestAssemblyFinishedCtorIntegration">
            <summary>
            Xunit.Sdk.TestAssemblyFinished..ctor calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestAssemblyFinishedCtorIntegration.OnMethodBegin``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg1">Type of the argument 1</typeparam>
            <typeparam name="TArg2">Type of the argument 2</typeparam>
            <typeparam name="TArg3">Type of the argument 3</typeparam>
            <typeparam name="TArg4">Type of the argument 4</typeparam>
            <typeparam name="TArg5">Type of the argument 5</typeparam>
            <typeparam name="TArg6">Type of the argument 6</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="testCases">Test cases</param>
            <param name="testAssembly">Test assembly</param>
            <param name="executionTime">Execution time</param>
            <param name="testsRun">Test runs</param>
            <param name="testsFailed">Tests failed</param>
            <param name="testsSkipped">Tests skipped</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestAssemblyRunnerRunTestCollectionAsyncIntegration">
            <summary>
            Xunit.Sdk.TestAssemblyRunner`1.RunTestCollectionAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestAssemblyRunnerRunTestCollectionAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestInvokerRunAsyncIntegration">
            <summary>
            Xunit.Sdk.TestInvoker`1.RunAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestInvokerRunAsyncIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestInvokerRunAsyncIntegration.OnAsyncMethodEnd``1(``0,System.Decimal,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestOutputHelperQueueTestOutputIntegration">
            <summary>
            Xunit.Sdk.TestOutputHelper.QueueTestOutput calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestOutputHelperQueueTestOutputIntegration.OnMethodBegin``1(``0,System.String)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="output">Output string</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestRunnerRunAsyncIntegration">
            <summary>
            Xunit.Sdk.TestRunner`1.RunAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestRunnerRunAsyncIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.RuntimeHandleTuple.MethodHandle">
            <summary>
            The method handle
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.RuntimeHandleTuple.TypeHandle">
            <summary>
            The type handle
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.RuntimeHandleTuple.#ctor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.RuntimeHandleTuple"/> struct.
            </summary>
            <param name="methodHandle">The method handle</param>
            <param name="typeHandle">The owning type handle</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.RuntimeHandleTuple.GetHashCode">
            <summary>
            Gets the struct hashcode
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.RuntimeHandleTuple.Equals(System.Object)">
            <summary>
            Gets if the struct is equal to other object or struct
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if both are equals; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.RuntimeHandleTuple.Equals(Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.RuntimeHandleTuple)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.TraceAnnotationsIntegration">
            <summary>
            Calltarget instrumentation to generate a span for any arbitrary method
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.TraceAnnotationsIntegration.OnMethodBegin``1(``0,System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="methodHandle">The RuntimeMethodHandle representing the instrumented method</param>
            <param name="typeHandle">The RuntimeTypeHandle representing the instrumented method's owning type</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.TraceAnnotationsIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.TraceAnnotationsIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.TraceAnnotations.TraceAnnotationsIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return valuevalue</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.AsyncMethodInvoker_InvokeBegin_Integration">
            <summary>
            System.ServiceModel.Dispatcher.AsyncMethodInvoker calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.AsyncMethodInvoker_InvokeBegin_Integration.OnMethodBegin``1(``0,System.Object,System.Object[],System.AsyncCallback,System.Object)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="instanceArg">RequestContext instance</param>
            <param name="inputs">Input arguments</param>
            <param name="callback">Callback argument</param>
            <param name="state">State argument</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.AsyncMethodInvoker_InvokeEnd_Integration">
            <summary>
            System.ServiceModel.Dispatcher.AsyncMethodInvoker calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.AsyncMethodInvoker_InvokeEnd_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.ChannelHandlerIntegration">
            <summary>
            System.ServiceModel.Dispatcher.ChannelHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.ChannelHandlerIntegration.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestContext">Type of the request context</typeparam>
            <typeparam name="TOperationContext">Type of the operation context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="request">RequestContext instance</param>
            <param name="currentOperationContext">OperationContext instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.ChannelHandlerIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.HttpRequestMessagePropertyStruct">
            <summary>
            System.ServiceModel.Channels.HttpRequestMessageProperty interface for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.HttpRequestMessagePropertyStruct.Headers">
            <summary>
            Gets the http request headers
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.HttpRequestMessagePropertyStruct.Method">
            <summary>
            Gets the http request method
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IMessage">
            <summary>
            System.ServiceModel.Channels.Message interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IMessage.Properties">
            <summary>
            Gets the properties dictionary
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IMessage.Headers">
            <summary>
            Gets the message headers object
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IMessageHeaders">
            <summary>
            System.ServiceModel.Channels.MessageHeaders interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IMessageHeaders.Action">
            <summary>
            Gets the Action header
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IMessageHeaders.To">
            <summary>
            Gets the To header
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IOperationContextStruct">
            <summary>
            System.ServiceModel.OperationContext interface for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IOperationContextStruct.RequestContext">
            <summary>
            Gets the request context
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IRequestContext">
            <summary>
            System.ServiceModel.Channels.RequestContext interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.IRequestContext.RequestMessage">
            <summary>
            Gets the request message
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.SyncMethodInvokerIntegration">
            <summary>
            System.ServiceModel.Dispatcher.SyncMethodInvoker calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.SyncMethodInvokerIntegration.OnMethodBegin``1(``0,System.Object,System.Object[],System.Object[]@)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="instanceArg">RequestContext instance</param>
            <param name="inputs">Input arguments</param>
            <param name="outputs">Output arguments</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.SyncMethodInvokerIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.TaskMethodInvokerIntegration">
            <summary>
            System.ServiceModel.Dispatcher.TaskMethodInvoker calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.TaskMethodInvokerIntegration.OnMethodBegin``1(``0,System.Object,System.Object[])">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="instanceArg">RequestContext instance</param>
            <param name="inputs">Input arguments</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf.TaskMethodInvokerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutomaticTracer.GetDistributedTrace">
            <summary>
            Gets the internal distributed trace object
            </summary>
            <returns>Shared distributed trace object instance</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutomaticTracer.SetDistributedTrace(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets the internal distributed trace object
            </summary>
            <param name="value">Shared distributed trace object instance</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker">
            <summary>
            CallTarget Invoker
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``2(``1)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="instance">Instance value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``3(``1,``2)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``4(``1,``2,``3)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``5(``1,``2,``3,``4)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``6(``1,``2,``3,``4,``5)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``7(``1,``2,``3,``4,``5,``6)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``8(``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``9(``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <typeparam name="TArg7">Seventh argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <param name="arg7">Seventh argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``10(``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <typeparam name="TArg7">Seventh argument type</typeparam>
            <typeparam name="TArg8">Eighth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <param name="arg7">Seventh argument value</param>
            <param name="arg8">Eighth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``3(``1,``2@)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``4(``1,``2@,``3@)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``5(``1,``2@,``3@,``4@)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``6(``1,``2@,``3@,``4@,``5@)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``7(``1,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``8(``1,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``9(``1,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <typeparam name="TArg7">Seventh argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <param name="arg7">Seventh argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``10(``1,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <typeparam name="TArg7">Seventh argument type</typeparam>
            <typeparam name="TArg8">Eighth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <param name="arg7">Seventh argument value</param>
            <param name="arg8">Eighth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``2(``1,System.Object[])">
            <summary>
            Begin Method Invoker Slow Path
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arguments">Object arguments array</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.EndMethod``2(``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            End Method with Void return value invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="instance">Instance value</param>
            <param name="exception">Exception value</param>
            <param name="state">CallTarget state</param>
            <returns>CallTarget return structure</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.EndMethod``3(``1,``2,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            End Method with Return value invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="instance">Instance value</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception value</param>
            <param name="state">CallTarget state</param>
            <returns>CallTarget return structure</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.EndMethod``2(``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            End Method with Void return value invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="instance">Instance value</param>
            <param name="exception">Exception value</param>
            <param name="state">CallTarget state</param>
            <returns>CallTarget return structure</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.EndMethod``3(``1,``2,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            End Method with Return value invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="instance">Instance value</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception value</param>
            <param name="state">CallTarget state</param>
            <returns>CallTarget return structure</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.LogException``2(System.Exception)">
            <summary>
            Log integration exception
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="exception">Integration exception instance</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.GetDefaultValue``1">
            <summary>
            Gets the default value of a type
            </summary>
            <typeparam name="T">Type to get the default value</typeparam>
            <returns>Default value of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1">
            <summary>
            Call target return value
            </summary>
            <typeparam name="T">Type of the return value</typeparam>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1"/> struct.
            </summary>
            <param name="returnValue">Return value</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1.GetDefault">
            <summary>
            Gets the default call target return value (used by the native side to initialize the locals)
            </summary>
            <returns>Default call target return value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1.GetReturnValue">
            <summary>
            Gets the return value
            </summary>
            <returns>Return value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1.ToString">
            <summary>
            ToString override
            </summary>
            <returns>String value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn">
            <summary>
            Call target return value
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn.GetDefault">
            <summary>
            Gets the default call target return value (used by the native side to initialize the locals)
            </summary>
            <returns>Default call target return value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState">
            <summary>
            Call target execution state
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.#ctor(Datadog.Trace.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState"/> struct.
            </summary>
            <param name="scope">Scope instance</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.#ctor(Datadog.Trace.Scope,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState"/> struct.
            </summary>
            <param name="scope">Scope instance</param>
            <param name="state">Object state instance</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.#ctor(Datadog.Trace.Scope,System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState"/> struct.
            </summary>
            <param name="scope">Scope instance</param>
            <param name="state">Object state instance</param>
            <param name="startTime">The intended start time of the scope, intended for scopes created in the OnMethodEnd handler</param>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.Scope">
            <summary>
            Gets the CallTarget BeginMethod scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.State">
            <summary>
            Gets the CallTarget BeginMethod state
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.StartTime">
            <summary>
            Gets the CallTarget state StartTime
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.GetDefault">
            <summary>
            Gets the default call target state (used by the native side to initialize the locals)
            </summary>
            <returns>Default call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.ToString">
            <summary>
            ToString override
            </summary>
            <returns>String value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.PreserveContextAttribute">
            <summary>
            Apply on a calltarget async callback to indicate that the method
            should execute under the current synchronization context/task scheduler.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CommonTracer">
            <summary>
            This class contains methods implemented by both the automatic and manual tracer.
            It is used for duplex communication.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.DistributedTracer">
            <summary>
            Used to distribute traces across multiple versions of the tracer
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.DistributedTracer.GetDistributedTracer">
            <summary>
            Get the instance of IDistributedTracer. This method will be rewritten by the profiler.
            </summary>
            <remarks>Don't ever change the return type of this method,
            as this would require special handling by the profiler.</remarks>
            <returns>The instance of IDistributedTracer</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Helpers.Interception">
            <summary>
            Convenience properties and methods for integration definitions.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Instrumentation">
            <summary>
            Provides access to the profiler CLSID and whether it is attached to the process.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Instrumentation._firstInitialization">
            <summary>
            Indicates whether we're initializing Instrumentation for the first time
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Instrumentation.ProfilerClsid">
            <summary>
            Gets the CLSID for the Datadog .NET profiler
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.Instrumentation.ProfilerAttached">
            <summary>
            Gets a value indicating whether Datadog's profiler is attached to the current process.
            </summary>
            <value>
              <c>true</c> if the profiler is currently attached; <c>false</c> otherwise.
            </value>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Instrumentation.Initialize">
            <summary>
            Initializes global instrumentation values.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute">
            <summary>
            Attribute that indicates that the decorated class is meant to intercept a method
            by modifying the method body with callbacks. Used to generate the integration definitions file.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyName">
            <summary>
            Gets or sets the name of the assembly that contains the target method to be intercepted.
            Required if <see cref="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyNames"/> is not set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyNames">
            <summary>
            Gets or sets the name of the assemblies that contain the target method to be intercepted.
            Required if <see cref="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyName"/> is not set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.TypeName">
            <summary>
            Gets or sets the name of the type that contains the target method to be intercepted.
            Required if <see cref="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.TypeNames"/> is not set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.TypeNames">
            <summary>
            Gets or sets the name of the types that contain the target method to be intercepted.
            Required if <see cref="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.TypeName"/> is not set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.MethodName">
            <summary>
            Gets or sets the name of the target method to be intercepted.
            If null, default to the name of the decorated method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.ReturnTypeName">
            <summary>
            Gets or sets the return type name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.ParameterTypeNames">
            <summary>
            Gets or sets the parameters type array for the target method to be intercepted.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.VersionRange">
            <summary>
            Gets the target version range for <see cref="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyName"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.MinimumVersion">
            <summary>
            Gets or sets the target minimum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.MaximumVersion">
            <summary>
            Gets or sets the target maximum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.IntegrationName">
            <summary>
            Gets or sets the integration name. Allows to group several integration with a single integration name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.CallTargetType">
            <summary>
            Gets or sets the CallTarget Class used to instrument the method
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.CallTargetIntegrationType">
            <summary>
            Gets or sets the CallTarget integration type
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.InstrumentationCategory">
            <summary>
            Gets or sets the InstrumentationFilter
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.IntegrationType.Default">
            <summary>
            Default calltarget integration
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.IntegrationType.Derived">
            <summary>
            Derived calltarget integration
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.IntegrationVersionRange">
            <summary>
            Specifies a safe version range for an integration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MinimumMajor">
            <summary>
            Gets the minimum major version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MinimumMinor">
            <summary>
            Gets the minimum minor version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MinimumPatch">
            <summary>
            Gets the minimum patch version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MaximumMajor">
            <summary>
            Gets the maximum major version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MaximumMinor">
            <summary>
            Gets the maximum minor version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MaximumPatch">
            <summary>
            Gets the maximum patch version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MinimumVersion">
            <summary>
            Gets or sets the MinimumMajor, MinimumMinor, and MinimumPatch properties.
            Convenience property for setting target minimum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MaximumVersion">
            <summary>
            Gets or sets the MaximumMajor, MaximumMinor, and MaximumPatch properties.
            Convenience property for setting target maximum version.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ScopeFactory">
            <summary>
            Convenience class that creates scopes and populates them with some standard details.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ScopeFactory.CreateOutboundHttpScope(Datadog.Trace.Tracer,System.String,System.Uri,Datadog.Trace.Configuration.IntegrationId,Datadog.Trace.Tagging.HttpTags@,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a scope for outbound http requests and populates some common details.
            </summary>
            <param name="tracer">The tracer instance to use to create the new scope.</param>
            <param name="httpMethod">The HTTP method used by the request.</param>
            <param name="requestUri">The URI requested by the request.</param>
            <param name="integrationId">The id of the integration creating this scope.</param>
            <param name="tags">The tags associated to the scope</param>
            <param name="traceId">The trace id - this id will be ignored if there's already an active trace</param>
            <param name="spanId">The span id</param>
            <param name="startTime">The start time that should be applied to the span</param>
            <returns>A new pre-populated scope.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ScopeFactory.CreateInactiveOutboundHttpSpan(Datadog.Trace.Tracer,System.String,System.Uri,Datadog.Trace.Configuration.IntegrationId,Datadog.Trace.Tagging.HttpTags@,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Creates a scope for outbound http requests and populates some common details.
            </summary>
            <param name="tracer">The tracer instance to use to create the new scope.</param>
            <param name="httpMethod">The HTTP method used by the request.</param>
            <param name="requestUri">The URI requested by the request.</param>
            <param name="integrationId">The id of the integration creating this scope.</param>
            <param name="tags">The tags associated to the scope</param>
            <param name="traceId">The trace id - this id will be ignored if there's already an active trace</param>
            <param name="spanId">The span id</param>
            <param name="startTime">The start time that should be applied to the span</param>
            <param name="addToTraceContext">Set to false if the span is meant to be discarded. In that case, the span won't be added to the TraceContext.</param>
            <returns>A new pre-populated scope.</returns>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.IClientContext.Custom">
            <summary>
            Gets the datadog injected trace context
            Used with the datadog ducktyping library
            </summary>
            <returns>The trace context</returns>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.ILambdaContext.ClientContext">
            <summary>
            Gets the lambda context client
            Contains the trace context
            Used with the datadog ducktyping library
            </summary>
            <returns>The client context</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.ILambdaExtensionRequest.GetTraceContextRequest">
            <summary>
            Get the trace context request
            </summary>
            <returns>The trace context request</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.ILambdaExtensionRequest.GetStartInvocationRequest">
            <summary>
            Get the start invocation request
            </summary>
            <returns>The start invocation request</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.ILambdaExtensionRequest.GetEndInvocationRequest(System.Boolean)">
            <summary>
            Get the end invocation request
            </summary>
            <returns>The end invocation request</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamAsync">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamAsync.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamAsync.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamSync">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamSync.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamSync.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamVoid">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamVoid.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaNoParamVoid.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamAsync">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamAsync.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg">Type of the incomingEventOrContent</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="incomingEventOrContext">IncomingEventOrContext value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamAsync.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamSync">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamSync.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg">Type of the incomingEventOrContent</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="incomingEventOrContext">IncomingEventOrContext value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamSync.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamVoid">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamVoid.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg">Type of the incomingEventOrContent</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="incomingEventOrContext">IncomingEventOrContext value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaOneParamVoid.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsAsync">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsAsync.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg1">Type of the incomingEvent</typeparam>
            <typeparam name="TArg2">Type of the context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="incomingEvent">IncomingEvent value</param>
            <param name="context">Context value.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsAsync.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsSync">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsSync.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg1">Type of the incomingEvent</typeparam>
            <typeparam name="TArg2">Type of the context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="incomingEvent">IncomingEvent value</param>
            <param name="context">Context value.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsSync.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsVoid">
            <summary>
            Lambda customer handler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsVoid.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg1">Type of the incomingEvent</typeparam>
            <typeparam name="TArg2">Type of the context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="incomingEvent">IncomingEvent value</param>
            <param name="context">Context value.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ServerlessInstrumentation.AWS.LambdaTwoParamsVoid.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState@)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
        </member>
        <member name="T:Datadog.Trace.Configuration.CompositeConfigurationSource">
            <summary>
            Represents one or more configuration sources.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.Add(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Adds a new configuration source to this instance.
            </summary>
            <param name="source">The configuration source to add.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.Insert(System.Int32,Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Inserts an element into the <see cref="T:Datadog.Trace.Configuration.CompositeConfigurationSource"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The configuration source to insert.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetString(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> value of the first setting found with
            the specified key from the current list of configuration sources.
            Sources are queried in the order in which they were added.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetInt32(System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of the first setting found with
            the specified key from the current list of configuration sources.
            Sources are queried in the order in which they were added.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetDouble(System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of the first setting found with
            the specified key from the current list of configuration sources.
            Sources are queried in the order in which they were added.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetBool(System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of the first setting found with
            the specified key from the current list of configuration sources.
            Sources are queried in the order in which they were added.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.System#Collections#Generic#IEnumerable{Datadog#Trace#Configuration#IConfigurationSource}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetDictionary(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetDictionary(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Configuration.ConfigurationKeys">
            <summary>
            String constants for standard Datadog configuration keys.
            </summary>
            <summary>
            String constants for standard Datadog configuration keys.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.Enabled">
            <summary>
            Configuration key for enabling or disabling the AppSec.
            Default is value is false (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.Rules">
            <summary>
            Override the default rules file provided. Must be a path to a valid JSON rules file.
            Default is value is null (do not override).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.CustomIpHeader">
            <summary>
            Configuration key indicating the optional name of the custom header to take into account for the ip address.
            Default is value is null (do not override).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.ExtraHeaders">
            <summary>
            Comma separated keys indicating the optional custom headers the user wants to send.
            Default is value is null.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.KeepTraces">
            <summary>
            Specifies if the AppSec traces should be explicitly kept or dropped.
            Default is true, to keep all traces, false means drop all traces (by setting AutoReject as sampling priority).
            For internal testing only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.TraceRateLimit">
            <summary>
            Limits the amount of AppSec traces sent per second with an integer value, strictly positive.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.WafTimeout">
            <summary>
            WAF timeout in microseconds of each WAF execution (the timeout value passed to ddwaf_run).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.ObfuscationParameterKeyRegex">
            <summary>
            The regex that will be used to obfuscate possible senative data in keys that are highlighted WAF as potentially malicious
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSec.ObfuscationParameterValueRegex">
            <summary>
            The regex that will be used to obfuscate possible senative data in values that are highlighted WAF as potentially malicious
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ConfigurationFileName">
            <summary>
            Configuration key for the path to the configuration file.
            Can only be set with an environment variable
            or in the <c>app.config</c>/<c>web.config</c> file.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Environment">
            <summary>
            Configuration key for the application's environment. Sets the "env" tag on every <see cref="T:Datadog.Trace.Span"/>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.Environment"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceName">
            <summary>
            Configuration key for the application's default service name.
            Used as the service name for top-level spans,
            and used to determine service name of some child spans.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.ServiceName"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceVersion">
            <summary>
            Configuration key for the application's version. Sets the "version" tag on every <see cref="T:Datadog.Trace.Span"/>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.ServiceVersion"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceEnabled">
            <summary>
            Configuration key for enabling or disabling the Tracer.
            Default is value is true (enabled).
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.TraceEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DebugEnabled">
            <summary>
            Configuration key for enabling or disabling the Tracer's debug mode.
            Default is value is false (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DisabledIntegrations">
            <summary>
            Configuration key for a list of integrations to disable. All other integrations remain enabled.
            Default is empty (all integrations are enabled).
            Supports multiple values separated with semi-colons.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.DisabledIntegrationNames"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalAnalyticsEnabled">
            <summary>
            Configuration key for enabling or disabling default Analytics.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.AnalyticsEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalTags">
            <summary>
            Configuration key for a list of tags to be applied globally to spans.
            Supports multiple key key-value pairs which are comma-separated, and for which the key and
            value are colon-separated. For example Key1:Value1, Key2:Value2
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.GlobalTags"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.HeaderTags">
            <summary>
            Configuration key for a map of header keys to tag names.
            Automatically apply header values as tags on traces.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HeaderTags"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.GrpcTags">
            <summary>
            Configuration key for a map of metadata keys to tag names.
            Automatically apply GRPC metadata values as tags on traces.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HeaderTags"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceNameMappings">
            <summary>
            Configuration key for a map of services to rename.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.ServiceNameMappings"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.BufferSize">
            <summary>
            Configuration key for setting the size in bytes of the trace buffer
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.SerializationBatchInterval">
            <summary>
            Configuration key for setting the batch interval in milliseconds for the serialization queue
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.LogsInjectionEnabled">
            <summary>
            Configuration key for enabling or disabling the automatic injection
            of correlation identifiers into the logging context.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.LogsInjectionEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.MaxTracesSubmittedPerSecond">
            <summary>
            Configuration key for setting the number of traces allowed
            to be submitted per second.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceRateLimit">
            <summary>
            Configuration key for setting the number of traces allowed
            to be submitted per second.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.StartupDiagnosticLogEnabled">
            <summary>
            Configuration key for enabling or disabling the diagnostic log at startup
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.StartupDiagnosticLogEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.CustomSamplingRules">
             <summary>
             Configuration key for setting custom sampling rules based on regular expressions.
             Semi-colon separated list of sampling rules.
             The rule is matched in order of specification. The first match in a list is used.
            
             Per entry:
               The item "sample_rate" is required in decimal format.
               The item "service" is optional in regular expression format, to match on service name.
               The item "name" is optional in regular expression format, to match on operation name.
            
             To give a rate of 50% to any traces in a service starting with the text "cart":
               '[{"sample_rate":0.5, "service":"cart.*"}]'
            
             To give a rate of 20% to any traces which have an operation name of "http.request":
               '[{"sample_rate":0.2, "name":"http.request"}]'
            
             To give a rate of 100% to any traces within a service named "background" and with an operation name of "sql.query":
               '[{"sample_rate":1.0, "service":"background", "name":"sql.query"}]
            
             To give a rate of 10% to all traces
               '[{"sample_rate":0.1}]'
            
             To configure multiple rules, separate by semi-colon and order from most specific to least specific:
               '[{"sample_rate":0.5, "service":"cart.*"}, {"sample_rate":0.2, "name":"http.request"}, {"sample_rate":1.0, "service":"background", "name":"sql.query"}, {"sample_rate":0.1}]'
            
             If no rules are specified, or none match, default internal sampling logic will be used.
             </summary>
             <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.CustomSamplingRules"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalSamplingRate">
            <summary>
            Configuration key for setting the global rate for the sampler.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TracerMetricsEnabled">
            <summary>
            Configuration key for enabling or disabling internal metrics sent to DogStatsD.
            Default value is <c>false</c> (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.RuntimeMetricsEnabled">
            <summary>
            Configuration key for enabling or disabling runtime metrics sent to DogStatsD.
            Default value is <c>false</c> (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.MaxLogFileSize">
            <summary>
            Configuration key for setting the approximate maximum size,
            in bytes, for Tracer log files.
            Default value is 10 MB.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.LogRateLimit">
            <summary>
            Configuration key for setting the number of seconds between,
            identical log messages, for Tracer log files.
            Default value is 60s. Setting to 0 disables rate limiting.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ProfilerLogPath">
            <summary>
            Configuration key for setting the path to the .NET Tracer native log file.
            This also determines the output folder of the .NET Tracer managed log files.
            Overridden by <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.LogDirectory"/> if present.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.LogDirectory">
            <summary>
            Configuration key for setting the directory of the .NET Tracer logs.
            Overrides the value in <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ProfilerLogPath"/> if present.
            Default value is "%ProgramData%"\Datadog .NET Tracer\logs\" on Windows
            or "/var/log/datadog/dotnet/" on Linux.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceAgentPath">
            <summary>
            Configuration key for when a standalone instance of the Trace Agent needs to be started.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceAgentArgs">
            <summary>
            Configuration key for arguments to pass to the Trace Agent process.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsDPath">
            <summary>
            Configuration key for when a standalone instance of DogStatsD needs to be started.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsDArgs">
            <summary>
            Configuration key for arguments to pass to the DogStatsD process.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DiagnosticSourceEnabled">
            <summary>
            Configuration key for enabling or disabling the use of System.Diagnostics.DiagnosticSource.
            Default value is <c>true</c> (enabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ApiKey">
            <summary>
            Configuration key for setting the API key, used by the Agent.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Site">
            <summary>
            Configuration key for setting the default Datadog destination site.
            Defaults to "datadoghq.com".
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientExcludedUrlSubstrings">
            <summary>
            Configuration key for overriding which URLs are skipped by the tracer.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HttpClientExcludedUrlSubstrings"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpServerErrorStatusCodes">
            <summary>
            Configuration key for the application's server http statuses to set spans as errors by.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HttpServerErrorStatusCodes"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientErrorStatusCodes">
            <summary>
            Configuration key for the application's client http statuses to set spans as errors by.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HttpClientErrorStatusCodes"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.KafkaCreateConsumerScopeEnabled">
            <summary>
            Configuration key to enable or disable the creation of a span context on exiting a successful Kafka
            Consumer.Consume() call, and closing the scope on entering Consumer.Consume().
            Default value is <c>true</c> (enabled).
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.KafkaCreateConsumerScopeEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ExpandRouteTemplatesEnabled">
            <summary>
            Configuration key for controlling whether route parameters in ASP.NET and ASP.NET Core resource names
            should be expanded with their values. Only applies when
            <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.RouteTemplateResourceNamesEnabled"/> is enabled.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.ExpandRouteTemplatesEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.PropagationStyleInject">
            <summary>
            Configuration key for setting the propagation style injection.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.PropagationStyleExtract">
            <summary>
            Configuration key for setting the propagation style extraction.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceMethods">
            <summary>
            Configuration key for enabling automatic instrumentation on specified methods.
            Default value is "" (disabled).
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.ConfigurationKeys.CIVisibility">
            <summary>
            String constants for CI Visibility configuration keys.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.CIVisibility.Enabled">
            <summary>
            Configuration key for enabling or disabling CI Visibility.
            Default is value is false (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.CIVisibility.AgentlessEnabled">
            <summary>
            Configuration key for enabling or disabling Agentless in CI Visibility.
            Default is value is false (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.CIVisibility.AgentlessUrl">
            <summary>
            Configuration key for setting the agentless url endpoint
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.CIVisibility.Logs">
            <summary>
            Configuration key for enabling or disabling Logs direct submission.
            Default is value is false (disabled).
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.ConfigurationKeys.Proxy">
            <summary>
            String constants for proxy configuration keys.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Proxy.ProxyHttps">
            <summary>
            Configuration key to set a proxy server for https requests.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Proxy.ProxyNoProxy">
            <summary>
            Configuration key to set a list of hosts that should bypass the proxy.
            The list is space-separated.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.ConfigurationKeys.Integrations">
            <summary>
            String format patterns used to match integration-specific configuration keys.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Integrations.Enabled">
            <summary>
            Configuration key pattern for enabling or disabling an integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Integrations.AnalyticsEnabled">
            <summary>
            Configuration key pattern for enabling or disabling Analytics in an integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Integrations.AnalyticsSampleRate">
            <summary>
            Configuration key pattern for setting Analytics sampling rate in an integration.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.ConfigurationKeys.Debug">
            <summary>
            String constants for debug configuration keys.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Debug.ForceMdTokenLookup">
            <summary>
            Configuration key for forcing the automatic instrumentation to only use the mdToken method lookup mechanism.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Debug.ForceFallbackLookup">
            <summary>
            Configuration key for forcing the automatic instrumentation to only use the fallback method lookup mechanism.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.RouteTemplateResourceNamesEnabled">
            <summary>
            Feature Flag: enables updated resource names on `aspnet.request`, `aspnet-mvc.request`,
            `aspnet-webapi.request`, and `aspnet_core.request` spans. Enables `aspnet_core_mvc.request` spans and
            additional features on `aspnet_core.request` spans.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.RouteTemplateResourceNamesEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.DelayWcfInstrumentationEnabled">
            <summary>
            Configuration key to enable or disable the updated WCF instrumentation that delays execution
            until later in the WCF pipeline when the WCF server exception handling is established.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.DelayWcfInstrumentationEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.HeaderTagsNormalizationFixEnabled">
            <summary>
            Enables a fix around header tags normalization.
            We used to normalize periods even if a tag was provided for a header, whereas we should not.
            This flag defaults to true and is here in case customers need retrocompatibility only
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.ActivityListenerEnabled">
            <summary>
            Enables experimental support for activity listener
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Telemetry.Enabled">
            <summary>
            Configuration key for enabling or disabling internal telemetry.
            Default value is <c>true</c> (enabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Telemetry.Uri">
            <summary>
            Configuration key for the telemetry URL where the Tracer sends telemetry.
            Ignored (and <see cref="P:Datadog.Trace.Configuration.ExporterSettings.AgentUri"/> is used instead) unless <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ApiKey"/> is set.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.EnabledIntegrations">
            <summary>
            Configuration key for a list of direct log submission integrations to enable.
            Only selected integrations are enabled for direct log submission
            Default is empty (direct log submission disabled).
            Supports multiple values separated with semi-colons.
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionEnabledIntegrations"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.Host">
            <summary>
            Set the name of the originating host for direct logs submission.
            Required for direct logs submission (default is machine name).
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionHost"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.Source">
            <summary>
            Set the originating source for direct logs submission.
            Default is 'csharp'
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionSource"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.GlobalTags">
            <summary>
            Configuration key for a list of tags to be applied globally to all logs directly submitted.
            Supports multiple key key-value pairs which are comma-separated, and for which the key and
            value are colon-separated. For example Key1:Value1, Key2:Value2. If not provided,
            <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalTags"/> are used instead
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionGlobalTags"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.Url">
            <summary>
            Configuration key for the url to send logs to.
            Default value uses the domain set in <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.Site"/>, so defaults to
            <c>https://http-intake.logs.datadoghq.com:443</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionUrl"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.MinimumLevel">
            <summary>
            Configuration key for the minimum level logs should have to be sent to the intake.
            Default value is <c>Information</c>.
            Should be one of <c>Verbose</c>,<c>Debug</c>,<c>Information</c>,<c>Warning</c>,<c>Error</c>,<c>Fatal</c>
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionMinimumLevel"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.BatchSizeLimit">
            <summary>
            Configuration key for the maximum number of logs to send at one time
            Default value is <c>1,000</c>, the maximum accepted by the Datadog log API
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionBatchSizeLimit"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.QueueSizeLimit">
            <summary>
            Configuration key for the maximum number of logs to hold in internal queue at any one time
            Default value is <c>100,000</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionQueueSizeLimit"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.BatchPeriodSeconds">
            <summary>
            Configuration key for the time to wait between checking for batches
            Default value is <c>2</c>s.
            </summary>
            <seealso cref="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionBatchPeriod"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentHost">
            <summary>
            Configuration key for the Agent host where the Tracer can send traces.
            Overridden by <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentUri"/> if present.
            Default value is "localhost".
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort">
            <summary>
            Configuration key for the Agent port where the Tracer can send traces.
            Default value is 8126.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeName">
            <summary>
            Configuration key for the named pipe where the Tracer can send traces.
            Default value is <c>null</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.TracesPipeName"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeTimeoutMs">
            <summary>
            Configuration key for setting the timeout in milliseconds for named pipes communication.
            Default value is <c>0</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.TracesPipeTimeoutMs"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.MetricsPipeName">
            <summary>
            Configuration key for the named pipe that DogStatsD binds to.
            Default value is <c>null</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.MetricsPipeName"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceAgentPortKey">
            <summary>
            Sibling setting for <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort"/>.
            Used to force a specific port binding for the Trace Agent.
            Default value is 8126.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentUri">
            <summary>
            Configuration key for the Agent URL where the Tracer can send traces.
            Overrides values in <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentHost"/> and <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort"/> if present.
            Default value is "http://localhost:8126".
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsdPort">
            <summary>
            Configuration key for the DogStatsd port where the Tracer can send metrics.
            Default value is 8125.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.DogStatsdPort"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.PartialFlushEnabled">
            <summary>
            Configuration key to enable sending partial traces to the agent
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.PartialFlushEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.PartialFlushMinSpans">
            <summary>
            Configuration key to set the minimum number of closed spans in a trace before it's partially flushed
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.PartialFlushMinSpans"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesUnixDomainSocketPath">
            <summary>
            Configuration key for the unix domain socket where the Tracer can send traces.
            Default value is <c>null</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.TracesUnixDomainSocketPath"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.MetricsUnixDomainSocketPath">
            <summary>
            Configuration key for the unix domain socket that DogStatsD binds to.
            Default value is <c>null</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.ExporterSettings.MetricsUnixDomainSocketPath"/>
        </member>
        <member name="T:Datadog.Trace.Configuration.EnvironmentConfigurationSource">
            <summary>
            Represents a configuration source that
            retrieves values from environment variables.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.EnvironmentConfigurationSource.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Configuration.ExporterSettings">
            <summary>
            Contains exporter settings.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ExporterSettings._fileExists">
            <summary>
            Allows overriding of file system access for tests.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ExporterSettings.DefaultAgentHost">
            <summary>
            The default host value for <see cref="P:Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ExporterSettings.DefaultAgentPort">
            <summary>
            The default port value for <see cref="P:Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ExporterSettings.DefaultDogstatsdPort">
            <summary>
            The default port value for dogstatsd.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ExporterSettings.UnixDomainSocketPrefix">
            <summary>
            Prefix for unix domain sockets.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ExporterSettings.DefaultTracesUnixDomainSocket">
            <summary>
            Default traces UDS path.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ExporterSettings.DefaultMetricsUnixDomainSocket">
            <summary>
            Default metrics UDS path.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.ExporterSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ExporterSettings"/> class with default values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.ExporterSettings.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ExporterSettings"/> class
            using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to initialize values.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.ExporterSettings.#ctor(Datadog.Trace.Configuration.IConfigurationSource,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ExporterSettings"/> class.
            Direct use in tests only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.AgentUri">
            <summary>
            Gets or sets the Uri where the Tracer can connect to the Agent.
            Default is <c>"http://localhost:8126"</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentUri"/>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentHost"/>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.TracesPipeName">
            <summary>
            Gets or sets the windows pipe name where the Tracer can connect to the Agent.
            Default is <c>null</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.TracesPipeTimeoutMs">
            <summary>
            Gets or sets the timeout in milliseconds for the windows named pipe requests.
            Default is <c>100</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeTimeoutMs"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.MetricsPipeName">
            <summary>
            Gets or sets the windows pipe name where the Tracer can send stats.
            Default is <c>null</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.MetricsPipeName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.TracesUnixDomainSocketPath">
            <summary>
            Gets or sets the unix domain socket path where the Tracer can connect to the Agent.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesUnixDomainSocketPath"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.MetricsUnixDomainSocketPath">
            <summary>
            Gets or sets the unix domain socket path where the Tracer can send stats.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.MetricsUnixDomainSocketPath"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.DogStatsdPort">
            <summary>
            Gets or sets the port where the DogStatsd server is listening for connections.
            Default is <c>8125</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsdPort"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.PartialFlushEnabled">
            <summary>
            Gets or sets a value indicating whether partial flush is enabled
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.PartialFlushMinSpans">
            <summary>
            Gets or sets the minimum number of closed spans in a trace before it's partially flushed
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.TracesTransport">
            <summary>
            Gets or sets the transport used to send traces to the Agent.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ExporterSettings.MetricsTransport">
            <summary>
            Gets or sets the transport used to connect to the DogStatsD.
            Default is <c>TransportStrategy.Tcp</c>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.GlobalSettings">
            <summary>
            Contains global datadog settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.GlobalSettings"/> class with default values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.GlobalSettings"/> class
            using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to initialize values.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.GlobalSettings.DebugEnabled">
            <summary>
            Gets a value indicating whether debug mode is enabled.
            Default is <c>false</c>.
            Set in code via <see cref="M:Datadog.Trace.Configuration.GlobalSettings.SetDebugEnabled(System.Boolean)"/>
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DebugEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.GlobalSettings.Source">
            <summary>
            Gets or sets the global settings instance.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.GlobalSettings.DiagnosticSourceEnabled">
            <summary>
            Gets a value indicating whether the use
            of System.Diagnostics.DiagnosticSource is enabled.
            This value can only be set with environment variables
            or a configuration file, not through code.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.SetDebugEnabled(System.Boolean)">
            <summary>
            Set whether debug mode is enabled.
            Affects the level of logs written to file.
            </summary>
            <param name="enabled">Whether debug is enabled.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.Reload">
            <summary>
            Used to refresh global settings when environment variables or config sources change.
            This is not necessary if changes are set via code, only environment.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.FromDefaultSources">
            <summary>
            Create a <see cref="T:Datadog.Trace.Configuration.GlobalSettings"/> populated from the default sources
            returned by <see cref="M:Datadog.Trace.Configuration.GlobalSettings.CreateDefaultConfigurationSource"/>.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> populated from the default sources.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.CreateDefaultConfigurationSource">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> by combining environment variables,
            AppSettings where available, and a local datadog.json file, if present.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> instance.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.IConfigurationSource">
            <summary>
            A source of configuration settings, identifiable by a string key.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetString(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetInt32(System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetDouble(System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetBool(System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetDictionary(System.String)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IDictionary`2"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetDictionary(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IDictionary`2"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <param name="allowOptionalMappings">Determines whether to create dictionary entries when the input has no value mapping</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.ImmutableExporterSettings">
            <summary>
            Contains exporter related settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.ImmutableExporterSettings.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ImmutableExporterSettings"/> class
            using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to initialize values.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.ImmutableExporterSettings.#ctor(Datadog.Trace.Configuration.ExporterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ImmutableExporterSettings"/> class from
            a TracerSettings instance.
            </summary>
            <param name="settings">The tracer settings to use to populate the immutable tracer settings</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.AgentUri">
            <summary>
            Gets the Uri where the Tracer can connect to the Agent.
            Default is <c>"http://localhost:8126"</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentUri"/>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentHost"/>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.TracesPipeName">
            <summary>
            Gets the windows pipe name where the Tracer can connect to the Agent.
            Default is <c>null</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.TracesPipeTimeoutMs">
            <summary>
            Gets the timeout in milliseconds for the windows named pipe requests.
            Default is <c>100</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeTimeoutMs"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.MetricsPipeName">
            <summary>
            Gets the windows pipe name where the Tracer can send stats.
            Default is <c>null</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.MetricsPipeName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.DogStatsdPort">
            <summary>
            Gets the port where the DogStatsd server is listening for connections.
            Default is <c>8125</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsdPort"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.PartialFlushEnabled">
            <summary>
            Gets a value indicating whether partial flush is enabled
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.PartialFlushMinSpans">
            <summary>
            Gets the minimum number of closed spans in a trace before it's partially flushed
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.TracesUnixDomainSocketPath">
            <summary>
            Gets the unix domain socket path where the Tracer can connect to the Agent.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesUnixDomainSocketPath"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.MetricsUnixDomainSocketPath">
            <summary>
            Gets the unix domain socket path where the Tracer can send stats.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.MetricsUnixDomainSocketPath"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.TracesTransport">
            <summary>
            Gets the transport used to send traces to the Agent.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableExporterSettings.MetricsTransport">
            <summary>
            Gets the transport used to connect to the DogStatsD.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.ImmutableIntegrationSettings">
            <summary>
            Contains integration-specific settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.ImmutableIntegrationSettings.#ctor(Datadog.Trace.Configuration.IntegrationSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ImmutableIntegrationSettings"/> class from an instance of
            <see cref="T:Datadog.Trace.Configuration.IntegrationSettings"/>.
            </summary>
            <param name="settings">The values to use.</param>
            <param name="isExplicitlyDisabled">If true forces the setting Enabled = false. Otherwise, uses <see cref="P:Datadog.Trace.Configuration.IntegrationSettings.Enabled"/></param>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableIntegrationSettings.IntegrationName">
            <summary>
            Gets the name of the integration. Used to retrieve integration-specific settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableIntegrationSettings.Enabled">
            <summary>
            Gets a value indicating whether
            this integration is enabled.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableIntegrationSettings.AnalyticsEnabled">
            <summary>
            Gets a value indicating whether
            Analytics are enabled for this integration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableIntegrationSettings.AnalyticsSampleRate">
            <summary>
            Gets a value between 0 and 1 (inclusive)
            that determines the sampling rate for this integration.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.ImmutableIntegrationSettingsCollection">
            <summary>
            A collection of <see cref="T:Datadog.Trace.Configuration.ImmutableIntegrationSettings"/> instances, referenced by name.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.ImmutableIntegrationSettingsCollection.#ctor(Datadog.Trace.Configuration.IntegrationSettingsCollection,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ImmutableIntegrationSettingsCollection"/> class.
            </summary>
            <param name="settings">The <see cref="T:Datadog.Trace.Configuration.IntegrationSettingsCollection"/> to populate the immutable settings.</param>
            <param name="disabledIntegrationNames">Additional integrations that should be disabled</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableIntegrationSettingsCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Configuration.ImmutableIntegrationSettings"/> for the specified integration.
            </summary>
            <param name="integrationName">The name of the integration.</param>
            <returns>The integration-specific settings for the specified integration.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.ImmutableTracerSettings">
            <summary>
            Contains Tracer settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.ImmutableTracerSettings.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ImmutableTracerSettings"/> class
            using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to initialize values.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.ImmutableTracerSettings.#ctor(Datadog.Trace.Configuration.TracerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.ImmutableTracerSettings"/> class from
            a TracerSettings instance.
            </summary>
            <param name="settings">The tracer settings to use to populate the immutable tracer settings</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.Environment">
            <summary>
            Gets the default environment name applied to all spans.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.Environment"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.ServiceName">
            <summary>
            Gets the service name applied to top-level spans and used to build derived service names.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.ServiceVersion">
            <summary>
            Gets the version tag applied to all spans.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceVersion"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.TraceEnabled">
            <summary>
            Gets a value indicating whether tracing is enabled.
            Default is <c>true</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.Exporter">
            <summary>
            Gets the exporter settings that dictate how the tracer exports data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.AnalyticsEnabled">
            <summary>
            Gets a value indicating whether default Analytics are enabled.
            Settings this value is a shortcut for setting
            <see cref="P:Datadog.Trace.Configuration.IntegrationSettings.AnalyticsEnabled"/> on some predetermined integrations.
            See the documentation for more details.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalAnalyticsEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.LogsInjectionEnabled">
            <summary>
            Gets a value indicating whether correlation identifiers are
            automatically injected into the logging context.
            Default is <c>false</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.LogsInjectionEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.MaxTracesSubmittedPerSecond">
            <summary>
            Gets a value indicating the maximum number of traces set to AutoKeep (p1) per second.
            Default is <c>100</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceRateLimit"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.CustomSamplingRules">
            <summary>
            Gets a value indicating custom sampling rules.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.CustomSamplingRules"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.GlobalSamplingRate">
            <summary>
            Gets a value indicating a global rate for sampling.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalSamplingRate"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.Integrations">
            <summary>
            Gets a collection of <see cref="P:Datadog.Trace.Configuration.ImmutableTracerSettings.Integrations"/> keyed by integration name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.GlobalTags">
            <summary>
            Gets the global tags, which are applied to all <see cref="T:Datadog.Trace.Span"/>s.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.HeaderTags">
            <summary>
            Gets the map of header keys to tag names, which are applied to the root <see cref="T:Datadog.Trace.Span"/>
            of incoming and outgoing requests.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.GrpcTags">
            <summary>
            Gets the map of metadata keys to tag names, which are applied to the root <see cref="T:Datadog.Trace.Span"/>
            of incoming and outgoing GRPC requests.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.TracerMetricsEnabled">
            <summary>
            Gets a value indicating whether internal metrics
            are enabled and sent to DogStatsd.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.KafkaCreateConsumerScopeEnabled">
            <summary>
            Gets a value indicating whether a span context should be created on exiting a successful Kafka
            Consumer.Consume() call, and closed on entering Consumer.Consume().
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.KafkaCreateConsumerScopeEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.StartupDiagnosticLogEnabled">
            <summary>
            Gets a value indicating whether the diagnostic log at startup is enabled
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.RuntimeMetricsEnabled">
            <summary>
            Gets a value indicating whether runtime metrics
            are enabled and sent to DogStatsd.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.HttpClientExcludedUrlSubstrings">
            <summary>
            Gets the comma separated list of url patterns to skip tracing.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientExcludedUrlSubstrings"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.HttpServerErrorStatusCodes">
            <summary>
            Gets the HTTP status code that should be marked as errors for server integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpServerErrorStatusCodes"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.HttpClientErrorStatusCodes">
            <summary>
            Gets the HTTP status code that should be marked as errors for client integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientErrorStatusCodes"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.ServiceNameMappings">
            <summary>
            Gets configuration values for changing service names based on configuration
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.TraceBufferSize">
            <summary>
            Gets a value indicating the size in bytes of the trace buffer
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.TraceBatchInterval">
            <summary>
            Gets a value indicating the batch interval for the serialization queue, in milliseconds
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.RouteTemplateResourceNamesEnabled">
            <summary>
            Gets a value indicating whether the feature flag to enable the updated ASP.NET resource names is enabled
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.RouteTemplateResourceNamesEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.ExpandRouteTemplatesEnabled">
            <summary>
            Gets a value indicating whether route parameters in ASP.NET and ASP.NET Core resource names
            should be expanded with their values. Only applies when  <see cref="P:Datadog.Trace.Configuration.ImmutableTracerSettings.RouteTemplateResourceNamesEnabled"/>
            is enabled.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ExpandRouteTemplatesEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.DelayWcfInstrumentationEnabled">
            <summary>
            Gets a value indicating whether to enable the updated WCF instrumentation that delays execution
            until later in the WCF pipeline when the WCF server exception handling is established.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.PropagationStyleInject">
            <summary>
            Gets a value indicating the injection propagation style.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.PropagationStyleExtract">
            <summary>
            Gets a value indicating the extraction propagation style.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.TraceMethods">
            <summary>
            Gets a value indicating the trace methods configuration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.ImmutableTracerSettings.IsActivityListenerEnabled">
            <summary>
            Gets a value indicating whether the activity listener is enabled or not.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.ImmutableTracerSettings.FromDefaultSources">
            <summary>
            Create a <see cref="T:Datadog.Trace.Configuration.ImmutableTracerSettings"/> populated from the default sources
            returned by <see cref="M:Datadog.Trace.Configuration.GlobalSettings.CreateDefaultConfigurationSource"/>.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Configuration.ImmutableTracerSettings"/> populated from the default sources.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.IntegrationSettings">
            <summary>
            Contains integration-specific settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.IntegrationSettings.#ctor(System.String,Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.IntegrationSettings"/> class.
            </summary>
            <param name="integrationName">The integration name.</param>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettings.IntegrationName">
            <summary>
            Gets the name of the integration. Used to retrieve integration-specific settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether
            this integration is enabled.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettings.AnalyticsEnabled">
            <summary>
            Gets or sets a value indicating whether
            Analytics are enabled for this integration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettings.AnalyticsSampleRate">
            <summary>
            Gets or sets a value between 0 and 1 (inclusive)
            that determines the sampling rate for this integration.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.IntegrationSettingsCollection">
            <summary>
            A collection of <see cref="T:Datadog.Trace.Configuration.IntegrationSettings"/> instances, referenced by name.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.IntegrationSettingsCollection.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.IntegrationSettingsCollection"/> class.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettingsCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Configuration.IntegrationSettings"/> for the specified integration.
            </summary>
            <param name="integrationName">The name of the integration.</param>
            <returns>The integration-specific settings for the specified integration.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.JsonConfigurationSource">
            <summary>
            Represents a configuration source that retrieves
            values from the provided JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.JsonConfigurationSource"/>
            class with the specified JSON string.
            </summary>
            <param name="json">A JSON string that contains configuration values.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.FromFile(System.String)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Configuration.JsonConfigurationSource"/> instance
            by loading the JSON string from the specified file.
            </summary>
            <param name="filename">A JSON file that contains configuration values.</param>
            <returns>The newly created configuration source.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.Datadog#Trace#Configuration#IConfigurationSource#GetString(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> value of
            the setting with the specified key.
            Supports JPath.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or null if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.Datadog#Trace#Configuration#IConfigurationSource#GetInt32(System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of
            the setting with the specified key.
            Supports JPath.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or null if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.Datadog#Trace#Configuration#IConfigurationSource#GetDouble(System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of
            the setting with the specified key.
            Supports JPath.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or null if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.Datadog#Trace#Configuration#IConfigurationSource#GetBool(System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of
            the setting with the specified key.
            Supports JPath.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or null if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.GetValue``1(System.String)">
            <summary>
            Gets the value of the setting with the specified key and converts it into type <typeparamref name="T"/>.
            Supports JPath.
            </summary>
            <typeparam name="T">The type to convert the setting value into.</typeparam>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or the default value of T if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.GetDictionary(System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all of the values.
            </summary>
            <remarks>
            Example JSON where `globalTags` is the configuration key.
            {
             "globalTags": {
                "name1": "value1",
                "name2": "value2"
                }
            }
            </remarks>
            <param name="key">The key that identifies the setting.</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> containing all of the key-value pairs.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">Thrown if the configuration value is not a valid JSON string.</exception>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.GetDictionary(System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all of the values.
            </summary>
            <remarks>
            Example JSON where `globalTags` is the configuration key.
            {
             "globalTags": {
                "name1": "value1",
                "name2": "value2"
                }
            }
            </remarks>
            <param name="key">The key that identifies the setting.</param>
            <param name="allowOptionalMappings">Determines whether to create dictionary entries when the input has no value mapping. This only applies to string values, not JSON objects</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> containing all of the key-value pairs.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">Thrown if the configuration value is not a valid JSON string.</exception>
        </member>
        <member name="T:Datadog.Trace.Configuration.NameValueConfigurationSource">
            <summary>
            Represents a configuration source that retrieves
            values from the provided <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.NameValueConfigurationSource.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.NameValueConfigurationSource"/> class
            that wraps the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="nameValueCollection">The collection that will be wrapped by this configuration source.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.NameValueConfigurationSource.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Configuration.StringConfigurationSource">
            <summary>
            A base <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> implementation
            for string-only configuration sources.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.ParseCustomKeyValues(System.String)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IDictionary`2"/> from parsing
            <paramref name="data"/>.
            </summary>
            <param name="data">A string containing key-value pairs which are comma-separated, and for which the key and value are colon-separated.</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> of key value pairs.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.ParseCustomKeyValues(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IDictionary`2"/> from parsing
            <paramref name="data"/>.
            </summary>
            <param name="data">A string containing key-value pairs which are comma-separated, and for which the key and value are colon-separated.</param>
            <param name="allowOptionalMappings">Determines whether to create dictionary entries when the input has no value mapping</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> of key value pairs.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetInt32(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetDouble(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetBool(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetDictionary(System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> from parsing
            </summary>
            <param name="key">The key</param>
            <returns><see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all of the key-value pairs.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetDictionary(System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> from parsing
            </summary>
            <param name="key">The key</param>
            <param name="allowOptionalMappings">Determines whether to create dictionary entries when the input has no value mapping</param>
            <returns><see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all of the key-value pairs.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.TracerSettings">
            <summary>
            Contains Tracer settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> class with default values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> class with default values,
            or initializes the configuration from environment variables and configuration files.
            Calling <c>new TracerSettings(true)</c> is equivalent to calling <c>TracerSettings.FromDefaultSources()</c>
            </summary>
            <param name="useDefaultSources">If <c>true</c>, creates a <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> populated from
            the default sources such as environment variables etc. If <c>false</c>, uses the default values.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> class
            using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to initialize values.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.Environment">
            <summary>
            Gets or sets the default environment name applied to all spans.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.Environment"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.ServiceName">
            <summary>
            Gets or sets the service name applied to top-level spans and used to build derived service names.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.ServiceVersion">
            <summary>
            Gets or sets the version tag applied to all spans.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceVersion"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TraceEnabled">
            <summary>
            Gets or sets a value indicating whether tracing is enabled.
            Default is <c>true</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.DisabledIntegrationNames">
            <summary>
            Gets or sets the names of disabled integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DisabledIntegrations"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.Exporter">
            <summary>
            Gets or sets the transport settings that dictate how the tracer connects to the agent.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.AnalyticsEnabled">
            <summary>
            Gets or sets a value indicating whether default Analytics are enabled.
            Settings this value is a shortcut for setting
            <see cref="P:Datadog.Trace.Configuration.IntegrationSettings.AnalyticsEnabled"/> on some predetermined integrations.
            See the documentation for more details.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalAnalyticsEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.LogsInjectionEnabled">
            <summary>
            Gets or sets a value indicating whether correlation identifiers are
            automatically injected into the logging context.
            Default is <c>false</c>, unless <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.EnabledIntegrations"/>
            enables Direct Log Submission.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.LogsInjectionEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond">
            <summary>
            Gets or sets a value indicating the maximum number of traces set to AutoKeep (p1) per second.
            Default is <c>100</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceRateLimit"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.CustomSamplingRules">
            <summary>
            Gets or sets a value indicating custom sampling rules.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.CustomSamplingRules"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.GlobalSamplingRate">
            <summary>
            Gets or sets a value indicating a global rate for sampling.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalSamplingRate"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.Integrations">
            <summary>
            Gets a collection of <see cref="P:Datadog.Trace.Configuration.TracerSettings.Integrations"/> keyed by integration name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.GlobalTags">
            <summary>
            Gets or sets the global tags, which are applied to all <see cref="T:Datadog.Trace.Span"/>s.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.HeaderTags">
            <summary>
            Gets or sets the map of header keys to tag names, which are applied to the root <see cref="T:Datadog.Trace.Span"/>
            of incoming and outgoing HTTP requests.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.GrpcTags">
            <summary>
            Gets or sets the map of metadata keys to tag names, which are applied to the root <see cref="T:Datadog.Trace.Span"/>
            of incoming and outgoing GRPC requests.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TracerMetricsEnabled">
            <summary>
            Gets or sets a value indicating whether internal metrics
            are enabled and sent to DogStatsd.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.DiagnosticSourceEnabled">
            <summary>
            Gets or sets a value indicating whether the use
            of System.Diagnostics.DiagnosticSource is enabled.
            Default is <c>true</c>.
            </summary>
            <remark>
            This value cannot be set in code. Instead,
            set it using the <c>DD_TRACE_DIAGNOSTIC_SOURCE_ENABLED</c>
            environment variable or in configuration files.
            </remark>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.KafkaCreateConsumerScopeEnabled">
            <summary>
            Gets or sets a value indicating whether a span context should be created on exiting a successful Kafka
            Consumer.Consume() call, and closed on entering Consumer.Consume().
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.KafkaCreateConsumerScopeEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.DelayWcfInstrumentationEnabled">
            <summary>
            Gets or sets a value indicating whether to enable the updated WCF instrumentation that delays execution
            until later in the WCF pipeline when the WCF server exception handling is established.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.StartupDiagnosticLogEnabled">
            <summary>
            Gets or sets a value indicating whether the diagnostic log at startup is enabled
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.PropagationStyleInject">
            <summary>
            Gets or sets a value indicating the injection propagation style.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.PropagationStyleExtract">
            <summary>
            Gets or sets a value indicating the extraction propagation style.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.RuntimeMetricsEnabled">
            <summary>
            Gets or sets a value indicating whether runtime metrics
            are enabled and sent to DogStatsd.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.HttpClientExcludedUrlSubstrings">
            <summary>
            Gets or sets the comma separated list of url patterns to skip tracing.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientExcludedUrlSubstrings"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.HttpServerErrorStatusCodes">
            <summary>
            Gets or sets the HTTP status code that should be marked as errors for server integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpServerErrorStatusCodes"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.HttpClientErrorStatusCodes">
            <summary>
            Gets or sets the HTTP status code that should be marked as errors for client integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientErrorStatusCodes"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.ServiceNameMappings">
            <summary>
            Gets configuration values for changing service names based on configuration
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TraceBufferSize">
            <summary>
            Gets or sets a value indicating the size in bytes of the trace buffer
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TraceBatchInterval">
            <summary>
            Gets or sets a value indicating the batch interval for the serialization queue, in milliseconds
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.RouteTemplateResourceNamesEnabled">
            <summary>
            Gets a value indicating whether the feature flag to enable the updated ASP.NET resource names is enabled
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.RouteTemplateResourceNamesEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.ExpandRouteTemplatesEnabled">
            <summary>
            Gets a value indicating whether resource names for ASP.NET and ASP.NET Core spans should be expanded. Only applies
            when <see cref="P:Datadog.Trace.Configuration.TracerSettings.RouteTemplateResourceNamesEnabled"/> is <code>true</code>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.LogSubmissionSettings">
            <summary>
            Gets or sets the direct log submission settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TraceMethods">
            <summary>
            Gets or sets a value indicating the trace methods configuration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.IsActivityListenerEnabled">
            <summary>
            Gets a value indicating whether the activity listener is enabled or not.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.FromDefaultSources">
            <summary>
            Create a <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> populated from the default sources
            returned by <see cref="M:Datadog.Trace.Configuration.TracerSettings.CreateDefaultConfigurationSource"/>.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> populated from the default sources.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.CreateDefaultConfigurationSource">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> by combining environment variables,
            AppSettings where available, and a local datadog.json file, if present.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> instance.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.SetHttpClientErrorStatusCodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets the HTTP status code that should be marked as errors for client integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientErrorStatusCodes"/>
            <param name="statusCodes">Status codes that should be marked as errors</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.SetHttpServerErrorStatusCodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets the HTTP status code that should be marked as errors for server integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpServerErrorStatusCodes"/>
            <param name="statusCodes">Status codes that should be marked as errors</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.SetServiceNameMappings(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets the mappings to use for service names within a <see cref="T:Datadog.Trace.Span"/>
            </summary>
            <param name="mappings">Mappings to use from original service name (e.g. <code>sql-server</code> or <code>graphql</code>)
            as the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>) to replacement service names as <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/>).</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.Build">
            <summary>
            Create an instance of <see cref="T:Datadog.Trace.Configuration.ImmutableTracerSettings"/> that can be used to build a <see cref="T:Datadog.Trace.Tracer"/>
            </summary>
            <returns>The <see cref="T:Datadog.Trace.Configuration.ImmutableTracerSettings"/> that can be passed to a <see cref="T:Datadog.Trace.Tracer"/> instance</returns>
        </member>
        <member name="F:Datadog.Trace.ContinuousProfiler.ContextTracker._traceContextPtr">
            <summary>
            _traceContextPtr points to a structure with this layout
            The structure is as follow:
            offset size(bytes)
                               |--------------------|
              0        8       |     WriteGuard     |    // 8-byte for the alignment
                               |--------------------|
              8        8       | Local Root Span Id |
                               |--------------------|
              16       8       |       Span Id      |
                               |--------------------|
            This allows us to inform the profiler sampling thread when we are writing or not the data
            and avoid torn read/write (Using memory barriers).
            We take advantage of this layout in SpanContext.Write
            </summary>
        </member>
        <member name="T:Datadog.Trace.CorrelationIdentifier">
            <summary>
            An API to access identifying values of the service and the active span
            </summary>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.Service">
            <summary>
            Gets the name of the service
            </summary>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.Version">
            <summary>
            Gets the version of the service
            </summary>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.Env">
            <summary>
            Gets the environment name of the service
            </summary>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.TraceId">
            <summary>
            Gets the id of the active trace.
            </summary>
            <returns>The id of the active trace. If there is no active trace, returns zero.</returns>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.SpanId">
            <summary>
            Gets the id of the active span.
            </summary>
            <returns>The id of the active span. If there is no active span, returns zero.</returns>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.EndpointFeatureProxy">
            <summary>
            Proxy for ducktyping IEndpointFeature when the interface is implemented
            explicitly, e.g. by https://github.com/dotnet/aspnetcore/blob/v3.0.3/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.FeatureCollection.cs
            Also see AspNetCoreDiagnosticObserver.EndpointFeatureStruct
            </summary>
        </member>
        <member name="M:Datadog.Trace.DiagnosticListeners.EndpointFeatureProxy.GetEndpoint">
            <summary>
            Delegates to IEndpointFeature.Endpoint;
            </summary>
            <returns>The <see cref="T:Datadog.Trace.DiagnosticListeners.RouteEndpoint"/> proxy</returns>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.RouteEndpoint">
            <summary>
            Endpoint for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DiagnosticListeners.RouteEndpoint.RoutePattern">
            <summary>
            Delegates to Endpoint.RoutePattern;
            </summary>
        </member>
        <member name="F:Datadog.Trace.DiagnosticListeners.RouteEndpoint.DisplayName">
            <summary>
            Delegates to Endpoint.DisplayName;
            </summary>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.RoutePattern">
            <summary>
            RoutePattern for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DiagnosticListeners.RoutePattern.PathSegments">
            <summary>
            Gets the list of IReadOnlyList&lt;RoutePatternPathSegment&gt;
            </summary>
        </member>
        <member name="F:Datadog.Trace.DiagnosticListeners.RoutePattern.RawText">
            <summary>
            Gets the RoutePattern.RawText
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Requests">
            <summary>
            Count: Total number of API requests made
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Responses">
            <summary>
            Count: Count of API responses.
            This metric has an additional tag of "status: {code}" to group the responses by the HTTP response code.
            This is different from <seealso cref="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Errors"/> in that this is all HTTP responses
            regardless of status code, and <seealso cref="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Errors"/> is exceptions raised from making an API call.
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Errors">
            <summary>
            Count: Total number of exceptions raised by API calls.
            This is different from receiving a 4xx or 5xx response.
            It is a "timeout error" or something from making the API call.
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.EnqueuedTraces">
            <summary>
            Count: Total number of traces pushed into the queue (does not include traces dropped due to a full queue)
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.EnqueuedSpans">
            <summary>
            Count: Total number of spans pushed into the queue (does not include traces dropped due to a full queue)
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.EnqueuedBytes">
            <summary>
            Count: Total size in bytes of traces pushed into the queue (does not include traces dropped due to a full queue)
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DroppedTraces">
            <summary>
            Count: Total number of traces dropped due to a full queue
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DroppedSpans">
            <summary>
            Count: Total number of spans dropped due to a full queue
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DequeuedTraces">
            <summary>
            Count: Number of traces pulled from the queue for flushing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DequeuedSpans">
            <summary>
            Count: Total number of spans pulled from the queue for flushing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DequeuedBytes">
            <summary>
            Count: Size in bytes of traces pulled from the queue for flushing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Health.Heartbeat">
            <summary>
            Gauge: Set to 1 by each Tracer instance.
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Health.Exceptions">
            <summary>
            Count: The number of exceptions thrown by the Tracer.
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Health.Warnings">
            <summary>
            Count: The number of warnings generated by the Tracer.
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckKind">
            <summary>
            Duck kind
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckKind.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckKind.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckAttribute">
            <summary>
            Duck attribute
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckAttribute.DefaultFlags">
            <summary>
            Default BindingFlags
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttribute.Kind">
            <summary>
            Gets or sets duck kind
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckAttributeBase">
            <summary>
            Duck attribute
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.Name">
            <summary>
            Gets or sets the underlying type member name
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.BindingFlags">
            <summary>
            Gets or sets the binding flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.GenericParameterTypeNames">
            <summary>
            Gets or sets the generic parameter type names definition for a generic method call (required when calling generic methods and instance type is non public)
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.ParameterTypeNames">
            <summary>
            Gets or sets the parameter type names of the target method (optional / used to disambiguation)
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.ExplicitInterfaceTypeName">
            <summary>
            Gets or sets the explicit interface type name
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckCopyAttribute">
            <summary>
            Duck copy struct attribute
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckFieldAttribute">
            <summary>
            Duck attribute where the underlying member is a field
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.DuckTyping.DuckFieldAttribute"/> class.
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckIgnoreAttribute">
            <summary>
            Ignores the member when DuckTyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckIncludeAttribute">
            <summary>
            Use to include a member that would normally be ignored
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckReverseMethodAttribute">
            <summary>
            Duck reverse method attribute
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.CreateProxyInstance`1">
            <summary>
            Create struct proxy instance delegate
            </summary>
            <typeparam name="T">Type of struct</typeparam>
            <param name="instance">Object instance</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckType">
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.Create``1(System.Object)">
            <summary>
            Create duck type proxy using a base type
            </summary>
            <param name="instance">Instance object</param>
            <typeparam name="T">Duck type</typeparam>
            <returns>Duck type proxy</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.Create(System.Type,System.Object)">
            <summary>
            Create duck type proxy using a base type
            </summary>
            <param name="proxyType">Duck type</param>
            <param name="instance">Instance object</param>
            <returns>Duck Type proxy</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CanCreate``1(System.Object)">
            <summary>
            Gets if a proxy can be created
            </summary>
            <param name="instance">Instance object</param>
            <typeparam name="T">Duck type</typeparam>
            <returns>true if the proxy can be created; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CanCreate(System.Type,System.Object)">
            <summary>
            Gets if a proxy can be created
            </summary>
            <param name="proxyType">Duck type</param>
            <param name="instance">Instance object</param>
            <returns>true if the proxy can be created; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.GetOrCreateProxyType(System.Type,System.Type)">
            <summary>
            Gets or create a new proxy type for ducktyping
            </summary>
            <param name="proxyType">ProxyType interface</param>
            <param name="targetType">Target type</param>
            <returns>CreateTypeResult instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateReverse(System.Type,System.Object)">
            <summary>
            Create duck type proxy using a base type
            </summary>
            <param name="typeToDeriveFrom">The type to derive from</param>
            <param name="delegationInstance">The instance to which additional implementation details are delegated</param>
            <returns>Duck Type proxy</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.GetOrCreateReverseProxyType(System.Type,System.Type)">
            <summary>
            Gets or create a new reverse proxy type for ducktyping
            </summary>
            <param name="typeToDeriveFrom">The type to derive from</param>
            <param name="delegationType">The type to delegate additional implementations to</param>
            <returns>CreateTypeResult instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.AddInterfaceProperties(System.Type,System.Collections.Generic.List{System.Reflection.PropertyInfo})">
            <summary>
            Adds the properties of any implemented interfaces in <paramref name="proxyDefinitionType"/>
            to list <paramref name="selectedProperties"/> list
            </summary>
            <param name="proxyDefinitionType">The type to search the interfaces for</param>
            <param name="selectedProperties">Existing selected properties</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateProperties(System.Reflection.Emit.TypeBuilder,System.Type,System.Type,System.Reflection.FieldInfo)">
            <summary>
            Create properties in <paramref name="proxyTypeBuilder"/>
            </summary>
            <param name="proxyTypeBuilder">The type builder for the new proxy</param>
            <param name="proxyDefinitionType">The type we're inheriting from/implementing</param>
            <param name="targetType">The original type of the instance we're duck typing</param>
            <param name="instanceField">The field for accessing the instance of the <paramref name="targetType"/></param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateReverseProxyProperties(System.Reflection.Emit.TypeBuilder,System.Type,System.Type,System.Reflection.FieldInfo)">
            <summary>
            Create properties in <paramref name="proxyTypeBuilder"/>
            </summary>
            <param name="proxyTypeBuilder">The type builder for the new proxy</param>
            <param name="typeToDeriveFrom">The type we're inheriting from/implementing</param>
            <param name="typeToDelegateTo">The type we're delegating the implementation too</param>
            <param name="instanceField">The field for accessing the instance of the <paramref name="typeToDelegateTo"/></param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreatePropertiesFromStruct(System.Reflection.Emit.TypeBuilder,System.Type,System.Type,System.Reflection.FieldInfo)">
            <summary>
            Create properties in <paramref name="proxyTypeBuilder"/>
            </summary>
            <param name="proxyTypeBuilder">The type builder for the new proxy</param>
            <param name="proxyDefinitionType">The custom type we defined</param>
            <param name="targetType">The original type we are proxying</param>
            <param name="instanceField">The field for accessing the instance of the <paramref name="targetType"/></param>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult">
            <summary>
            Struct to store the result of creating a proxy type
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.Success">
            <summary>
            Gets if the proxy type creation was successful
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.TargetType">
            <summary>
            Target type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.#ctor(System.Type,System.Type,System.Type,System.Delegate,System.Runtime.ExceptionServices.ExceptionDispatchInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult"/> struct.
            </summary>
            <param name="proxyTypeDefinition">Proxy type definition</param>
            <param name="proxyType">Proxy type</param>
            <param name="targetType">Target type</param>
            <param name="activator">Proxy activator</param>
            <param name="exceptionInfo">Exception dispatch info instance</param>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.ProxyType">
            <summary>
            Gets the Proxy type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.CreateInstance``1(System.Object)">
            <summary>
            Create a new proxy instance from a target instance
            </summary>
            <typeparam name="T">Type of the return value</typeparam>
            <param name="instance">Target instance value</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.CreateInstance``2(``1)">
            <summary>
            Create a new proxy instance from a target instance
            </summary>
            <typeparam name="T">Type of the return value</typeparam>
            <typeparam name="TOriginal">Type of the original value</typeparam>
            <param name="instance">Target instance value</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.CanCreate">
            <summary>
            Get if the proxy instance can be created
            </summary>
            <returns>true if the proxy can be created; otherwise, false.</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckType.CreateCache`1">
            <summary>
            Generics Create Cache FastPath
            </summary>
            <typeparam name="T">Type of proxy definition</typeparam>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.Type">
            <summary>
            Gets the type of T
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.GetProxy(System.Type)">
            <summary>
            Gets the proxy type for a target type using the T proxy definition
            </summary>
            <param name="targetType">Target type</param>
            <returns>CreateTypeResult instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.Create(System.Object)">
            <summary>
            Create a new instance of a proxy type for a target instance using the T proxy definition
            </summary>
            <param name="instance">Object instance</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.CreateFrom``1(``0)">
            <summary>
            Create a new instance of a proxy type for a target instance using the T proxy definition
            </summary>
            <typeparam name="TOriginal">The original instance's type </typeparam>
            <param name="instance">Object instance</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.CanCreate(System.Object)">
            <summary>
            Get if the proxy instance can be created
            </summary>
            <param name="instance">Object instance</param>
            <returns>true if a proxy can be created; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.CreateReverse(System.Object)">
            <summary>
            Create a reverse proxy type for a target instance using the T proxy definition
            </summary>
            <param name="instance">Object instance</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.GetReverseProxy(System.Type)">
            <summary>
            Gets the proxy type for a target type using the T proxy definition
            </summary>
            <param name="targetType">Target type</param>
            <returns>CreateTypeResult instance</returns>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckType.GetTypeFromHandleMethodInfo">
            <summary>
            Gets the Type.GetTypeFromHandle method info
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckType.EnumToObjectMethodInfo">
            <summary>
            Gets the Enum.ToObject method info
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.GetModuleBuilder(System.Type,System.Boolean)">
            <summary>
            Gets the ModuleBuilder instance from a target type.  (.NET Framework / Non AssemblyLoadContext version)
            </summary>
            <param name="targetType">Target type for ducktyping</param>
            <param name="isVisible">Is visible boolean</param>
            <returns>ModuleBuilder instance</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckType.DelegateCache`1">
            <summary>
            DynamicMethods delegates cache
            </summary>
            <typeparam name="TProxyDelegate">Proxy delegate type</typeparam>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.DelegateCache`1.GetDelegate">
            <summary>
            Get cached delegate from the DynamicMethod
            </summary>
            <returns>TProxyDelegate instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.DelegateCache`1.FillDelegate(System.Int32)">
            <summary>
            Create delegate from a DynamicMethod index
            </summary>
            <param name="index">Dynamic method index</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.EnsureArguments(System.Type,System.Object)">
            <summary>
            Checks and ensures the arguments for the Create methods
            </summary>
            <param name="proxyType">Duck type</param>
            <param name="instance">Instance value</param>
            <exception cref="T:System.ArgumentNullException">If the duck type or the instance value is null</exception>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.EnsureTypeVisibility(System.Reflection.Emit.ModuleBuilder,System.Type)">
            <summary>
            Ensures the visibility access to the type
            </summary>
            <param name="builder">Module builder</param>
            <param name="type">Type to gain internals visibility</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.UseDirectAccessTo(System.Reflection.Emit.ModuleBuilder,System.Type)">
            <summary>
            Gets if the direct access method should be used or the indirect method (dynamic method)
            </summary>
            <param name="builder">Module builder</param>
            <param name="targetType">Target type</param>
            <returns>true for direct method; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.UseDirectAccessTo(System.Reflection.Emit.TypeBuilder,System.Type)">
            <summary>
            Gets if the direct access method should be used or the indirect method (dynamic method)
            </summary>
            <param name="builder">Type builder</param>
            <param name="targetType">Target type</param>
            <returns>true for direct method; otherwise, false.</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeException">
            <summary>
            DuckType Exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyTypeDefinitionIsNull">
            <summary>
            DuckType proxy type definition is null
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeTargetObjectInstanceIsNull">
            <summary>
            DuckType target object instance is null
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeInvalidTypeConversionException">
            <summary>
            DuckType invalid type conversion exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypePropertyCantBeReadException">
            <summary>
            DuckType property can't be read
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypePropertyCantBeWrittenException">
            <summary>
            DuckType property can't be written
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypePropertyArgumentsLengthException">
            <summary>
            DuckType property argument doesn't have the same argument length
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeFieldIsReadonlyException">
            <summary>
            DuckType field is readonly
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypePropertyOrFieldNotFoundException">
            <summary>
            DuckType property or field not found
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeStructMembersCannotBeChangedException">
            <summary>
            DuckType struct members cannot be changed exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeTargetMethodNotFoundException">
            <summary>
            DuckType target method can not be found exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyMethodParameterIsMissingException">
            <summary>
            DuckType proxy method parameter is missing exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyAndTargetMethodParameterSignatureMismatchException">
            <summary>
            DuckType parameter signature mismatch between proxy and target method
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyAndTargetMethodReturnTypeMismatchException">
            <summary>
            DuckType parameter signature mismatch between proxy and target method
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyMethodsWithGenericParametersNotSupportedInNonPublicInstancesException">
            <summary>
            DuckType proxy methods with generic parameters are not supported in non public instances exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeTargetMethodAmbiguousMatchException">
            <summary>
            DuckType proxy method has an ambiguous match in the target type exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyBaseIsStructException">
            <summary>
            DuckType reverse proxy type to derive from is a struct exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyImplementorIsAbstractOrInterfaceException">
            <summary>
            DuckType proxy method is abstract
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyPropertyCannotBeAbstractException">
            <summary>
            DuckType property can't be read
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeIncorrectReverseMethodUsageException">
            <summary>
            DuckType method was [DuckReverseMethod] in non-reverse proxy
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeIncorrectReversePropertyUsageException">
            <summary>
            DuckType property was [DuckReverseMethod] in non-reverse proxy
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyMissingPropertyImplementationException">
            <summary>
            DuckType proxy was missing an implementation
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyMissingMethodImplementationException">
            <summary>
            DuckType proxy was missing an implementation
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseAttributeParameterNamesMismatchException">
            <summary>
            DuckType proxy tried to implement a generic method in a non-generic way
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyMustImplementGenericMethodAsGenericException">
            <summary>
            DuckType proxy tried to implement a generic method in a non-generic way
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeExtensions">
            <summary>
            Duck type extensions
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckCast``1(System.Object)">
            <summary>
            Gets the duck type instance for the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <typeparam name="T">Target type</typeparam>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckCast(System.Object,System.Type)">
            <summary>
            Gets the duck type instance for the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <param name="targetType">Target type</param>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.TryDuckCast``1(System.Object,``0@)">
            <summary>
            Tries to ducktype the object implementing a base class or interface T
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="instance">Object instance</param>
            <param name="value">Ducktype instance</param>
            <returns>true if the object instance was ducktyped; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.TryDuckCast(System.Object,System.Type,System.Object@)">
            <summary>
            Tries to ducktype the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <param name="targetType">Target type</param>
            <param name="value">Ducktype instance</param>
            <returns>true if the object instance was ducktyped; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckAs``1(System.Object)">
            <summary>
            Gets the duck type instance for the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <typeparam name="T">Target type</typeparam>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckAs(System.Object,System.Type)">
            <summary>
            Gets the duck type instance for the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <param name="targetType">Target type</param>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckIs``1(System.Object)">
            <summary>
            Gets if a proxy can be created
            </summary>
            <param name="instance">Instance object</param>
            <typeparam name="T">Duck type</typeparam>
            <returns>true if the proxy can be created; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckIs(System.Object,System.Type)">
            <summary>
            Gets if a proxy can be created
            </summary>
            <param name="instance">Instance object</param>
            <param name="targetType">Duck type</param>
            <returns>true if the proxy can be created; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckImplement(System.Object,System.Type)">
            <summary>
            Gets or creates a proxy that implements/derives from <paramref name="typeToDeriveFrom"/>,
            and delegates implementations/overrides to <paramref name="instance"/>
            </summary>
            <param name="instance">The instance containing additional overrides/implementations</param>
            <param name="typeToDeriveFrom">The type to derive from</param>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.TryDuckImplement(System.Object,System.Type,System.Object@)">
            <summary>
            Tries to create a proxy that implements/derives from <paramref name="typeToDeriveFrom"/>,
            and delegates implementations/overrides to <paramref name="instance"/>
            ducktype the object implementing a base class or interface T
            </summary>
            <param name="instance">The instance containing additional overrides/implementations</param>
            <param name="typeToDeriveFrom">The type to derive from</param>
            <param name="value">The Ducktype instance</param>
            <returns>true if the object instance was ducktyped; otherwise, false.</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.IDuckType">
            <summary>
            Duck type interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.IDuckType.Instance">
            <summary>
            Gets instance
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.IDuckType.Type">
            <summary>
            Gets instance Type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.IDuckType.ToString">
            <summary>
            Calls ToString() on the instance
            </summary>
            <returns>ToString result</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.ILHelpersExtensions">
            <summary>
            Internal IL Helpers
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.LoadInstanceArgument(Datadog.Trace.DuckTyping.LazyILGenerator,System.Type,System.Type)">
            <summary>
            Load instance argument
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="actualType">Actual type</param>
            <param name="expectedType">Expected type</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteLoadArgument(Datadog.Trace.DuckTyping.LazyILGenerator,System.Int32,System.Boolean)">
            <summary>
            Write load arguments
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="index">Argument index</param>
            <param name="isStatic">Define if we need to take into account the instance argument</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteLoadLocal(Datadog.Trace.DuckTyping.LazyILGenerator,System.Int32)">
            <summary>
            Write load local
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="index">Local index</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteLoadLocal(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Write load local
            </summary>
            <param name="il">ILGenerator instance</param>
            <param name="index">Local index</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteStoreLocal(Datadog.Trace.DuckTyping.LazyILGenerator,System.Int32)">
            <summary>
            Write store local
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="index">Local index</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteInt(Datadog.Trace.DuckTyping.LazyILGenerator,System.Int32)">
            <summary>
            Write constant int value
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="value">int value</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteTypeConversion(Datadog.Trace.DuckTyping.LazyILGenerator,System.Type,System.Type)">
            <summary>
            Convert a current type to an expected type
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="actualType">Actual type</param>
            <param name="expectedType">Expected type</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteMethodCalli(Datadog.Trace.DuckTyping.LazyILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Write a Call to a method using Calli
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="method">Method to get called</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteDynamicMethodCall(Datadog.Trace.DuckTyping.LazyILGenerator,System.Reflection.Emit.DynamicMethod,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Write a DynamicMethod call by creating and injecting a custom delegate in the proxyType
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="dynamicMethod">Dynamic method to get called</param>
            <param name="proxyType">ProxyType builder</param>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.TypesTuple.ProxyDefinitionType">
            <summary>
            The proxy definition type
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.TypesTuple.TargetType">
            <summary>
            The target type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.TypesTuple.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.DuckTyping.TypesTuple"/> struct.
            </summary>
            <param name="proxyDefinitionType">The proxy definition type</param>
            <param name="targetType">The target type</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.TypesTuple.GetHashCode">
            <summary>
            Gets the struct hashcode
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.TypesTuple.Equals(System.Object)">
            <summary>
            Gets if the struct is equal to other object or struct
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if both are equals; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.TypesTuple.Equals(Datadog.Trace.DuckTyping.TypesTuple)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.ExtensionMethods.NameValueCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Specialized.NameValueCollection"/> objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.NameValueCollectionExtensions.Wrap(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Provides an <see cref="T:Datadog.Trace.Headers.NameValueHeadersCollection"/> implementation that wraps the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="collection">The name/value collection to wrap.</param>
            <returns>An object that implements <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.ExtensionMethods.SpanExtensions">
            <summary>
            Extension methods for the <see cref="T:Datadog.Trace.ISpan"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.SpanExtensions.SetTraceSamplingPriority(Datadog.Trace.ISpan,Datadog.Trace.SamplingPriority)">
            <summary>
            Sets the sampling priority for the trace that contains the specified <see cref="T:Datadog.Trace.ISpan"/>.
            </summary>
            <param name="span">A span that belongs to the trace.</param>
            <param name="samplingPriority">The new sampling priority for the trace.</param>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.StringExtensions.TrimEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Removes the trailing occurrence of a substring from the current string.
            </summary>
            <param name="value">The original string.</param>
            <param name="suffix">The string to remove from the end of <paramref name="value"/>.</param>
            <param name="comparisonType">One of the enumeration values that determines how this string and <paramref name="suffix"/> are compared.</param>
            <returns>A new string with <paramref name="suffix"/> removed from the end, if found. Otherwise, <paramref name="value"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.StringExtensions.ToBoolean(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> into a <see cref="T:System.Boolean"/> by comparing it to commonly used values
            such as "True", "yes", "T", "Y", or "1" for <c>true</c> and "False", "no", "F", "N", or "0" for <c>false</c>. Case-insensitive.
            Defaults to <c>null</c> if string is not recognized.
            </summary>
            <param name="value">The string to convert.</param>
            <returns><c>true</c> or <c>false</c> if <paramref name="value"/> is one of the accepted values; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.StringExtensions.TryConvertToNormalizedTagName(System.String,System.Boolean,System.String@)">
             <summary>
             Datadog tag requirements:
             1. Tag must start with a letter
             2. Tag cannot exceed 200 characters
             3. If the first two requirements are met, then valid characters will be retained while all other characters will be converted to underscores. Valid characters include:
                - Alphanumerics
                - Underscores
                - Minuses
                - Colons
                - Slashes
            
             4. Optionally, periods can be replaced by underscores.
             Note: This method will trim leading/trailing whitespace before checking the requirements.
             </summary>
             <param name="value">Input string to convert into tag name</param>
             <param name="normalizePeriods">True if we replace dots by underscores</param>
             <param name="normalizedTagName">If the method returns true, the normalized tag name</param>
             <returns>Returns whether the conversion was successful</returns>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.TimeExtensions.ToUnixTimeNanoseconds(System.DateTimeOffset)">
            <summary>
            Returns the number of nanoseconds that have elapsed since 1970-01-01T00:00:00.000Z.
            </summary>
            <param name="dateTimeOffset">The value to get the number of elapsed nanoseconds for.</param>
            <returns>The number of nanoseconds that have elapsed since 1970-01-01T00:00:00.000Z.</returns>
        </member>
        <member name="T:Datadog.Trace.ExtensionMethods.WebHeadersExtensions">
            <summary>
            Extension methods for <see cref="T:System.Net.WebHeaderCollection"/> objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.WebHeadersExtensions.Wrap(System.Net.WebHeaderCollection)">
            <summary>
            Provides an <see cref="T:Datadog.Trace.Headers.WebHeadersCollection"/> implementation that wraps the specified <see cref="T:System.Net.WebHeaderCollection"/>.
            </summary>
            <param name="headers">The Web headers to wrap.</param>
            <returns>An object that implements <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Headers.IHeadersCollection">
            <summary>
            Specified a common interface that can be used to manipulate collections of headers.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Headers.IHeadersCollection.GetValues(System.String)">
            <summary>
            Returns all header values for a specified header stored in the collection.
            </summary>
            <param name="name">The specified header to return values for.</param>
            <returns>Zero or more header strings.</returns>
        </member>
        <member name="M:Datadog.Trace.Headers.IHeadersCollection.Set(System.String,System.String)">
            <summary>
            Sets the value of an entry in the collection, replacing any previous values.
            </summary>
            <param name="name">The header to add to the collection.</param>
            <param name="value">The content of the header.</param>
        </member>
        <member name="M:Datadog.Trace.Headers.IHeadersCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified header and its value into the collection.
            </summary>
            <param name="name">The header to add to the collection.</param>
            <param name="value">The content of the header.</param>
        </member>
        <member name="M:Datadog.Trace.Headers.IHeadersCollection.Remove(System.String)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="name">The name of the header to remove from the collection.</param>
        </member>
        <member name="T:Datadog.Trace.HttpHeaderNames">
            <summary>
            Names of HTTP headers that can be used tracing inbound or outbound HTTP requests.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.TraceId">
            <summary>
            ID of a distributed trace.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.ParentId">
            <summary>
            ID of the parent span in a distributed trace.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.SamplingPriority">
            <summary>
            Setting used to determine whether a trace should be sampled or not.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.TracingEnabled">
            <summary>
            If header is set to "false", tracing is disabled for that http request.
            Tracing is enabled by default.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.Origin">
            <summary>
            Origin of the distributed trace.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.UserAgent">
            <summary>
            The user agent that originated an http request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.DatadogTags">
            <summary>
            Internal Datadog tags.
            A collection of internal Datadog tags. Only tags with names that
            begin with "_dd.p.*" will be propagated using this header.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.SpanId">
            <summary>
            ID of a span.
            Used in a serverless context only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.InvocationError">
            <summary>
            If header is set to "true", the extension will know that the current invocation has failed
            Used in a serverless context only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpOverStreams.DatadogHttpClient.MaxRequestHeadersBufferSize">
            <summary>
            Typical headers sent to the agent are small.
            Allow enough room for future expansion of headers.
            </summary>
        </member>
        <member name="T:Datadog.Trace.IDatadogOpenTracingTracer">
            <summary>
            Internal interface for keeping a consistent Tracer API between the Datadog.Trace.OpenTracing assembly and the Datadog.Trace assemblies
            </summary>
        </member>
        <member name="T:Datadog.Trace.IDatadogTracer">
            <summary>
            Internal interface used for mocking the Tracer in <see cref="T:Datadog.Trace.TraceContext"/>, its associated tests,
            and the AgentWriterTests
            </summary>
        </member>
        <member name="T:Datadog.Trace.ILockedTracer">
            <summary>
            Defines a tracer that cannot be replaced once is setted in the singleton
            </summary>
        </member>
        <member name="T:Datadog.Trace.IScope">
            <summary>
            A scope is a handle used to manage the concept of an active span.
            Meaning that at a given time at most one span is considered active and
            all newly created spans that are not created with the ignoreActiveSpan
            parameter will be automatically children of the active span.
            </summary>
        </member>
        <member name="P:Datadog.Trace.IScope.Span">
            <summary>
            Gets the active span wrapped in this scope
            </summary>
        </member>
        <member name="M:Datadog.Trace.IScope.Close">
            <summary>
            Closes the current scope and makes its parent scope active
            </summary>
        </member>
        <member name="T:Datadog.Trace.IScopeManager">
            <summary>
            Interface for managing a scope.
            </summary>
        </member>
        <member name="T:Datadog.Trace.IScopeRawAccess">
            <summary>
            Interface for scope getter and setter access
            </summary>
        </member>
        <member name="T:Datadog.Trace.ISpan">
            <summary>
            A Span represents a logical unit of work in the system. It may be
            related to other spans by parent/children relationships. The span
            tracks the duration of an operation as well as associated metadata in
            the form of a resource name, a service name, and user defined tags.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpan.OperationName">
            <summary>
            Gets or sets operation name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpan.ResourceName">
            <summary>
            Gets or sets the resource name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpan.Type">
            <summary>
            Gets or sets the type of request this span represents (ex: web, db).
            Not to be confused with span kind.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanTypes"/>
        </member>
        <member name="P:Datadog.Trace.ISpan.Error">
            <summary>
            Gets or sets a value indicating whether this span represents an error
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpan.ServiceName">
            <summary>
            Gets or sets the service name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpan.TraceId">
            <summary>
            Gets the trace's unique identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpan.SpanId">
            <summary>
            Gets the span's unique identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpan.Context">
            <summary>
            Gets the span's span context
            </summary>
        </member>
        <member name="M:Datadog.Trace.ISpan.SetTag(System.String,System.String)">
            <summary>
            Add a the specified tag to this span.
            </summary>
            <param name="key">The tag's key.</param>
            <param name="value">The tag's value.</param>
            <returns>This span to allow method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.ISpan.Finish">
            <summary>
            Record the end time of the span and flushes it to the backend.
            After the span has been finished all modifications will be ignored.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ISpan.Finish(System.DateTimeOffset)">
            <summary>
            Explicitly set the end time of the span and flushes it to the backend.
            After the span has been finished all modifications will be ignored.
            </summary>
            <param name="finishTimestamp">Explicit value for the end time of the Span</param>
        </member>
        <member name="M:Datadog.Trace.ISpan.SetException(System.Exception)">
            <summary>
            Add the StackTrace and other exception metadata to the span
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Datadog.Trace.ISpan.GetTag(System.String)">
            <summary>
            Gets the value (or default/null if the key is not a valid tag) of a tag with the key value passed
            </summary>
            <param name="key">The tag's key</param>
            <returns> The value for the tag with the key specified, or null if the tag does not exist</returns>
        </member>
        <member name="T:Datadog.Trace.ISpanContext">
            <summary>
            Span context interface.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpanContext.TraceId">
            <summary>
            Gets the trace identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpanContext.SpanId">
            <summary>
            Gets the span identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpanContext.ServiceName">
            <summary>
            Gets the service name to propagate to child spans.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ISpanContextExtractor">
            <summary>
            The ISpanContextExtractor is responsible for extracting SpanContext in the rare cases where the Tracer couldn't propagate it itself.
            This can happen for instance when libraries add an extra layer above the instrumented ones
            (eg consuming Kafka messages and enqueuing them prior to generate a span).
            </summary>
        </member>
        <member name="M:Datadog.Trace.ISpanContextExtractor.Extract``1(``0,System.Func{``0,System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Given a SpanContext carrier and a function to access the values, this method will extract SpanContext if any
            </summary>
            <param name="carrier">The carrier of the SpanContext. Often a header (http, kafka message header...)</param>
            <param name="getter">Given a key name, returns values from the carrier</param>
            <typeparam name="TCarrier">Type of the carrier</typeparam>
            <returns>A potentially null Datadog SpanContext</returns>
        </member>
        <member name="T:Datadog.Trace.ITracer">
            <summary>
            The tracer is responsible for creating spans and flushing them to the Datadog agent
            </summary>
        </member>
        <member name="P:Datadog.Trace.ITracer.ActiveScope">
            <summary>
            Gets the active scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.ITracer.Settings">
            <summary>
            Gets this tracer's settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ITracer.StartActive(System.String)">
            <summary>
            This creates a new span with the given parameters and makes it active.
            </summary>
            <param name="operationName">The span's operation name</param>
            <returns>A scope wrapping the newly created span</returns>
        </member>
        <member name="M:Datadog.Trace.ITracer.StartActive(System.String,Datadog.Trace.SpanCreationSettings)">
            <summary>
            This creates a new span with the given parameters and makes it active.
            </summary>
            <param name="operationName">The span's operation name</param>
            <param name="settings">Settings for the new <see cref="T:Datadog.Trace.IScope"/></param>
            <returns>A scope wrapping the newly created span</returns>
        </member>
        <member name="T:Datadog.Trace.LifetimeManager">
            <summary>
            Used to run hooks on application shutdown
            </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings">
            <summary>
            Contains settings for Direct Log Submission.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionEnabledIntegrations">
            <summary>
            Gets or Sets the integrations enabled for direct log submission
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.EnabledIntegrations" />
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionHost">
            <summary>
            Gets or Sets the originating host name for direct logs submission
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.Host" />
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionSource">
            <summary>
            Gets or Sets the originating source for direct logs submission
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.Source" />
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionGlobalTags">
            <summary>
            Gets or sets the global tags, which are applied to all directly submitted logs. If not provided,
            <see cref="P:Datadog.Trace.Configuration.TracerSettings.GlobalTags"/> are used instead
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.GlobalTags" />
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionUrl">
            <summary>
            Gets or sets the url to send logs to
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.Url" />
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionMinimumLevel">
            <summary>
            Gets or sets the minimum level logs should have to be sent to the intake.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.Url" />
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionBatchSizeLimit">
            <summary>
            Gets or sets the maximum number of logs to send at one time
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.BatchSizeLimit"/>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionQueueSizeLimit">
            <summary>
            Gets or sets the maximum number of logs to hold in internal queue at any one time
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.QueueSizeLimit"/>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.DirectLogSubmissionBatchPeriod">
            <summary>
            Gets or sets the time to wait between checking for batches
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DirectLogSubmission.BatchPeriodSeconds"/>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.ApiKey">
            <summary>
            Gets or sets the Datadog API key
            </summary>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionSettings.LogsInjectionEnabled">
            <summary>
            Gets or sets whether logs injection has been explicitly enabled or disabled
            </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.DirectSubmission.DirectSubmissionLogLevel">
            <summary>
            The unified log levels to use with direct submission
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.DirectSubmission.DirectSubmissionLogLevel.Verbose">
            <summary>
            The most verbose level. Also known as Trace
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.DirectSubmission.DirectSubmissionLogLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.DirectSubmission.DirectSubmissionLogLevel.Information">
            <summary>
            The default log level
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.DirectSubmission.DirectSubmissionLogLevel.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.DirectSubmission.DirectSubmissionLogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.DirectSubmission.DirectSubmissionLogLevel.Fatal">
            <summary>
            The least verbose/most severe level. Also known as critical
            </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.DirectSubmission.Formatting.EventIdHash">
            <summary>
            Hash functions for message templates. See <see cref="M:Datadog.Trace.Logging.DirectSubmission.Formatting.EventIdHash.Compute(System.String)"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Formatting.EventIdHash.Compute(System.String)">
            <summary>
            Compute a 32-bit hash of the provided <paramref name="messageTemplate"/>. The
            resulting hash value can be uses as an event id in lieu of transmitting the
            full template string.
            </summary>
            <param name="messageTemplate">A message template.</param>
            <returns>A 32-bit hash of the template.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Formatting.LogFormatter.WritePropertyName(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.String)">
            <summary>
            Helper for writing property names in JSON
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Formatting.LogFormatter.WriteValue(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Helper for writing values as JSON
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Formatting.LogFormatter.FormatLog``1(System.Text.StringBuilder,``0@,System.DateTime,System.String,System.Nullable{System.Int32},System.String,System.Exception,Datadog.Trace.Logging.DirectSubmission.Formatting.LogFormatter.FormatDelegate{``0})">
            <summary>
            Format the log, based on <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>
            and CompactFormatter
            </summary>
            <typeparam name="T">The type of state being formatted</typeparam>
        </member>
        <member name="T:Datadog.Trace.Logging.DirectSubmission.ImmutableDirectLogSubmissionSettings">
            <summary>
            Contains direct-log-submission-specific settings
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Sink.DatadogLogEvent.Format(System.Text.StringBuilder,Datadog.Trace.Logging.DirectSubmission.Formatting.LogFormatter)">
            <summary>
            Formats the event to the provided <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="sb">The builder to format the log into</param>
            <param name="formatter">A formatter for log events</param>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Sink.DatadogSink.EmitBatch(System.Collections.Generic.Queue{Datadog.Trace.Logging.DirectSubmission.Sink.DatadogLogEvent})">
            <summary>
            Emit a batch of log events to Datadog logs-backend.
            </summary>
            <param name="events">The events to emit.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Sink.IDatadogSink.EnqueueLog(Datadog.Trace.Logging.DirectSubmission.Sink.DatadogLogEvent)">
            <summary>
            Emit the provided log event to the sink. If the sink is being disposed or
            the app domain unloaded, then the event is ignored.
            </summary>
            <param name="logEvent">Log event to emit.</param>
            <exception cref="T:System.ArgumentNullException">The event is null.</exception>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Sink.IDatadogSink.Start">
            <summary>
            Start the background process to send logs to the backend
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Sink.IDatadogSink.FlushAsync">
            <summary>
            Flushes the sink
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Sink.IDatadogSink.DisposeAsync">
            <summary>
            Disposes the instance asynchronously
            </summary>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.Sink.LogsApiHeaderNames.DefaultHeaders">
            <summary>
            Gets the default constant header that should be added to any request to the agent
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Sink.PeriodicBatching.BatchingSink.EnqueueLog(Datadog.Trace.Logging.DirectSubmission.Sink.DatadogLogEvent)">
            <summary>
            Emit the provided log event to the sink. If the sink is being disposed or
            the app domain unloaded, then the event is ignored.
            </summary>
            <param name="logEvent">Log event to emit.</param>
            <exception cref="T:System.ArgumentNullException">The event is null.</exception>
        </member>
        <member name="M:Datadog.Trace.Logging.DirectSubmission.Sink.PeriodicBatching.BatchingSink.EmitBatch(System.Collections.Generic.Queue{Datadog.Trace.Logging.DirectSubmission.Sink.DatadogLogEvent})">
            <summary>
            Emit a batch of log events, running to completion synchronously.
            </summary>
            <param name="events">The events to emit.</param>
            <returns><c>true</c> if the batch was emitted successfully. <c>false</c> if there was an error</returns>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.Sink.PeriodicBatching.BatchingSinkOptions.BatchSizeLimit">
            <summary>
            Gets the maximum number of events to include in a single batch.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.Sink.PeriodicBatching.BatchingSinkOptions.Period">
            <summary>
            Gets the time to wait between checking for event batches.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.Sink.PeriodicBatching.BatchingSinkOptions.CircuitBreakPeriod">
            <summary>
            Gets the time to ignore logs when repeated failures to emit a batch cause the circuit to break.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Logging.DirectSubmission.Sink.PeriodicBatching.BatchingSinkOptions.QueueLimit">
            <summary>
            Gets maximum number of events to hold in the sink's internal queue, or <c>null</c>
            for an unbounded queue.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.DirectSubmission.Sink.PeriodicBatching.CircuitBreaker">
            <summary>
            A simple circuit breaker for periodic batching, which, if never succeeds remains permanently broken
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.ILogRateLimiter.ShouldLog(System.String,System.Int32,System.UInt32@)">
            <summary>
            Check whether a log message for the given location should be written or skipped
            </summary>
            <param name="filePath">The file path of the source code file writing the log</param>
            <param name="lineNumber">The line number of the source code file writing the log</param>
            <param name="skipCount">If the log should be written, the number of similar log messages that were previously skipped</param>
            <returns><c>true</c> if the log should be written, otherwise <c>false</c></returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogRateLimiter.ShouldLog(System.String,System.Int32,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Logging.NullLogRateLimiter.ShouldLog(System.String,System.Int32,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Metrics.SamplingAgentDecision">
            <summary>
            To be set when the agent determines the sampling rate for a trace
            Read: Agent Priority Sample Rate
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.SamplingRuleDecision">
            <summary>
            To be set when a sampling rule is applied to a trace
            Read: Sampling Rule Priority Sample Rate
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.SamplingLimitDecision">
            <summary>
            To be set when a rate limiter is applied to a trace.
            Read: Rate Limiter Priority Sample Rate
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.MessageQueueTimeMs">
            <summary>
            The length of time a record has been on the queue
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.TopLevelSpan">
            <summary>
            Identifies top-level spans.
            Top-level spans have a different service name from their immediate parent or have no parent.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.TracesKeepRate">
            <summary>
            Records the keep rate of spans in the tracer, independent of sampling rate
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.ProcessId">
            <summary>
            The process id.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.AppSecEnabled">
            <summary>
            Whether the libraries application security features are enabled.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.AppSecRateLimitDroppedTraces">
            <summary>
            The number of AppSec traces ignored by the AppSec rate limiter
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.AppSecWafDuration">
            <summary>
            Total cumulative waf duration across spans for one request
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.AppSecWafAndBindingsDuration">
            <summary>
            Total cumulative waf duration across spans for one request, including parameters encoding, bindings, for non managed waf
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.AppSecWafInitRulesLoaded">
            <summary>
            Float representing the number of rules loaded successfully
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.AppSecWafInitRulesErrorCount">
            <summary>
            Float representing the number of rules which failed to load
            </summary>
        </member>
        <member name="T:Datadog.Trace.PDBs.DatadogPdbReader">
            <summary>
            Reads both Windows and Portable PDBs.
            Note: reading Windows PDBs is only supported on Windows.
            </summary>
        </member>
        <member name="P:Datadog.Trace.PDBs.MethodSymbolResolver.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.PDBs.MethodSymbolResolver.TryGetMethodSymbol(System.Reflection.MethodInfo,Datadog.Trace.PDBs.MethodSymbolResolver.MethodSymbol@)">
            <summary>
            Try get the method symbols from the MethodInfo
            </summary>
            <param name="methodInfo">MethodInfo instance</param>
            <param name="methodSymbol">MethodSymbol instance</param>
            <returns>true if the method symbol struct could be retrieved, otherwise; false</returns>
        </member>
        <member name="M:Datadog.Trace.PDBs.MethodSymbolResolver.Clear">
            <summary>
            Clear modules cache
            </summary>
        </member>
        <member name="T:Datadog.Trace.PDBs.MethodSymbolResolver.MethodSymbol">
            <summary>
            Method symbols struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.PDBs.MethodSymbolResolver.MethodSymbol.File">
            <summary>
            File Path
            </summary>
        </member>
        <member name="F:Datadog.Trace.PDBs.MethodSymbolResolver.MethodSymbol.StartLine">
            <summary>
            Start line
            </summary>
        </member>
        <member name="F:Datadog.Trace.PDBs.MethodSymbolResolver.MethodSymbol.EndLine">
            <summary>
            End line
            </summary>
        </member>
        <member name="T:Datadog.Trace.PDBs.MethodSymbolResolver.ThreadSafeModuleContext">
            <summary>
            Module context with thread safe Resolver and AssemblyResolver
            </summary>
        </member>
        <member name="T:Datadog.Trace.PlatformHelpers.AzureAppServices">
            <summary>
            Helper class for gathering metadata about the execution context in Azure App Services.
            References:
            https://docs.microsoft.com/en-us/azure/app-service/environment/intro
            https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings
            https://github.com/projectkudu/kudu/wiki/Azure-runtime-environment
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.AzureAppServicesContextKey">
            <summary>
            Configuration key which is used as a flag to tell us whether we are running in the context of Azure App Services.
            This is set within the applicationHost.xdt file of the Azure Site Extension.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.SiteExtensionVersionKey">
            <summary>
            Configuration key which has the running version of the Azure Site Extension.
            This is set within the applicationHost.xdt file.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.WebsiteOwnerNameKey">
            <summary>
            Example: 8c500027-5f00-400e-8f00-60000000000f+apm-dotnet-EastUSwebspace
            Format: {subscriptionId}+{planResourceGroup}-{hostedInRegion}
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.ResourceGroupKey">
            <summary>
            This is the name of the resource group the site instance is assigned to.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.SiteNameKey">
            <summary>
            This is the unique name of the website instance within Azure App Services.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.FunctionsExtensionVersionKey">
            <summary>
            The version of the functions runtime to use in this function app.
            Reference: https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings#functions_extension_version
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.FunctionsWorkerRuntimeKey">
            <summary>
            This variable is only present in Azure Functions.
            Valid values are dotnet, node, java, powershell, and python.
            In this context, we will only ever see dotnet.
            Reference: https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings#functions_extension_version
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.InstanceNameKey">
            <summary>
            The instance name in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.InstanceIdKey">
            <summary>
            The instance ID in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.OperatingSystemKey">
            <summary>
            The operating system in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.AasEnableCustomTracing">
            <summary>
            Used to force the loader to start the tracer agent (in case automatic instrumentation is disabled)
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.AasEnableCustomMetrics">
            <summary>
            Used to force the loader to start dogstatsd (in case automatic instrumentation is disabled)
            </summary>
        </member>
        <member name="T:Datadog.Trace.PlatformHelpers.ContainerMetadata">
            <summary>
            Utility class with methods to interact with container hosts.
            </summary>
        </member>
        <member name="M:Datadog.Trace.PlatformHelpers.ContainerMetadata.GetContainerId">
            <summary>
            Gets the id of the container executing the code.
            Return <c>null</c> if code is not executing inside a supported container.
            </summary>
            <returns>The container id or <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.PlatformHelpers.ContainerMetadata.ParseCgroupLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Uses regular expression to try to extract a container id from the specified string.
            </summary>
            <param name="lines">Lines of text from a cgroup file.</param>
            <returns>The container id if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.PlatformHelpers.ContainerMetadata.ParseCgroupLine(System.String)">
            <summary>
            Uses regular expression to try to extract a container id from the specified string.
            </summary>
            <param name="line">A single line from a cgroup file.</param>
            <returns>The container id if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.HostMetadata.Hostname">
            <summary>
            Gets the name of the host on which the code is running
            Returns <c>null</c> if the host name can not be determined
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.HostMetadata.KernelName">
            <summary>
            Gets the name of the kernel, e.g. Linux
            Returns <c>null</c> if it can not be determined
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.HostMetadata.KernelRelease">
            <summary>
            Gets the release name of the kernel, e.g. 3.2.0-4-686-pae
            Returns <c>null</c> if it can not be determined
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.HostMetadata.KernelVersion">
            <summary>
            Gets the version number of the kernel, e.g. #1 SMP Debian 3.2.63-2+deb7u2
            Returns <c>null</c> if it can not be determined
            </summary>
        </member>
        <member name="F:Datadog.Trace.Propagators.B3ContextPropagator.TraceId">
            <summary>
            B3 TraceId header
            </summary>
        </member>
        <member name="F:Datadog.Trace.Propagators.B3ContextPropagator.SpanId">
            <summary>
            B3 SpanId header
            </summary>
        </member>
        <member name="F:Datadog.Trace.Propagators.B3ContextPropagator.Sampled">
            <summary>
            B3 SpanId header
            </summary>
        </member>
        <member name="F:Datadog.Trace.Propagators.B3SingleHeaderContextPropagator.B3">
            <summary>
            B3 single header
            </summary>
        </member>
        <member name="M:Datadog.Trace.Propagators.SpanContextPropagator.Inject``1(Datadog.Trace.SpanContext,``0)">
            <summary>
            Propagates the specified context by adding new headers to a <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/>.
            This locks the sampling priority for <paramref name="context"/>.
            </summary>
            <param name="context">A <see cref="T:Datadog.Trace.SpanContext"/> value that will be propagated into <paramref name="headers"/>.</param>
            <param name="headers">A <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/> to add new headers to.</param>
            <typeparam name="TCarrier">Type of header collection</typeparam>
        </member>
        <member name="M:Datadog.Trace.Propagators.SpanContextPropagator.Inject``1(Datadog.Trace.SpanContext,``0,System.Action{``0,System.String,System.String})">
            <summary>
            Propagates the specified context by adding new headers to a <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/>.
            This locks the sampling priority for <paramref name="context"/>.
            </summary>
            <param name="context">A <see cref="T:Datadog.Trace.SpanContext"/> value that will be propagated into <paramref name="carrier"/>.</param>
            <param name="carrier">The headers to add to.</param>
            <param name="setter">The action that can set a header in the carrier.</param>
            <typeparam name="TCarrier">Type of header collection</typeparam>
        </member>
        <member name="M:Datadog.Trace.Propagators.SpanContextPropagator.Extract``1(``0)">
            <summary>
            Extracts a <see cref="T:Datadog.Trace.SpanContext"/> from the values found in the specified headers.
            </summary>
            <param name="headers">The headers that contain the values to be extracted.</param>
            <typeparam name="TCarrier">Type of header collection</typeparam>
            <returns>A new <see cref="T:Datadog.Trace.SpanContext"/> that contains the values obtained from <paramref name="headers"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Propagators.SpanContextPropagator.Extract``1(``0,System.Func{``0,System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Extracts a <see cref="T:Datadog.Trace.SpanContext"/> from the values found in the specified headers.
            </summary>
            <param name="carrier">The headers that contain the values to be extracted.</param>
            <param name="getter">The function that can extract a list of values for a given header name.</param>
            <typeparam name="TCarrier">Type of header collection</typeparam>
            <returns>A new <see cref="T:Datadog.Trace.SpanContext"/> that contains the values obtained from <paramref name="carrier"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Propagators.SpanContextPropagator.Extract(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Extracts a <see cref="T:Datadog.Trace.SpanContext"/> from its serialized dictionary.
            </summary>
            <param name="serializedSpanContext">The serialized dictionary.</param>
            <returns>A new <see cref="T:Datadog.Trace.SpanContext"/> that contains the values obtained from the serialized dictionary.</returns>
        </member>
        <member name="M:Datadog.Trace.Propagators.SpanContextPropagator.Key.GetHashCode">
            <summary>
            Gets the struct hashcode
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:Datadog.Trace.Propagators.SpanContextPropagator.Key.Equals(System.Object)">
            <summary>
            Gets if the struct is equal to other object or struct
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if both are equals; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Propagators.SpanContextPropagator.Key.Equals(Datadog.Trace.Propagators.SpanContextPropagator.Key)">
            <inheritdoc />
        </member>
        <member name="F:Datadog.Trace.Propagators.W3CContextPropagator.TraceParent">
            <summary>
            W3C TraceParent header
            </summary>
        </member>
        <member name="T:Datadog.Trace.RuntimeMetrics.Keywords">
            <summary>
            Keywords used by the CLR events.
            Enum and comments taken from Perfview source code: https://github.com/microsoft/perfview/blob/master/src/TraceEvent/Parsers/ClrTraceEventParser.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GC">
            <summary>
            Logging when garbage collections and finalization happen.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHandle">
            <summary>
            Events when GC handles are set or destroyed.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Loader">
            <summary>
            Logging when modules actually get loaded and unloaded.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Jit">
            <summary>
            Logging when Just in time (JIT) compilation occurs.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.NGen">
            <summary>
            Logging when precompiled native (NGEN) images are loaded.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.StartEnumeration">
            <summary>
            Indicates that on attach or module load , a rundown of all existing methods should be done
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.StopEnumeration">
            <summary>
            Indicates that on detach or process shutdown, a rundown of all existing methods should be done
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Security">
            <summary>
            Events associated with validating security restrictions.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.AppDomainResourceManagement">
            <summary>
            Events for logging resource consumption on an app-domain level granularity
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.JitTracing">
            <summary>
            Logging of the internal workings of the Just In Time compiler.  This is fairly verbose.
            It details decisions about interesting optimization (like inlining and tail call)
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Interop">
            <summary>
            Log information about code thunks that transition between managed and unmanaged code.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Contention">
            <summary>
            Log when lock contention occurs.  (Monitor.Enters actually blocks)
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Exception">
            <summary>
            Log exception processing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Threading">
            <summary>
            Log events associated with the threadpool, and other threading events.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.JittedMethodILToNativeMap">
            <summary>
            Dump the native to IL mapping of any method that is JIT compiled.  (V4.5 runtimes and above).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.OverrideAndSuppressNGenEvents">
            <summary>
            If enabled will suppress the rundown of NGEN events on V4.0 runtime (has no effect on Pre-V4.0 runtimes).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Type">
            <summary>
            Enables the 'BulkType' event
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapDump">
            <summary>
            Enables the events associated with dumping the GC heap
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCSampledObjectAllocationHigh">
            <summary>
            Enables allocation sampling with the 'fast'.  Sample to limit to 100 allocations per second per type.
            This is good for most detailed performance investigations.   Note that this DOES update the allocation
            path to be slower and only works if the process start with this on.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapSurvivalAndMovement">
            <summary>
            Enables events associate with object movement or survival with each GC.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapCollect">
            <summary>
            Triggers a GC.  Can pass a 64 bit value that will be logged with the GC Start event so you know which GC you actually triggered.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapAndTypeNames">
            <summary>
            Indicates that you want type names looked up and put into the events (not just meta-data tokens).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCSampledObjectAllocationLow">
            <summary>
            Enables allocation sampling with the 'slow' rate, Sample to limit to 5 allocations per second per type.
            This is reasonable for monitoring.    Note that this DOES update the allocation path to be slower
            and only works if the process start with this on.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCAllObjectAllocation">
            <summary>
            Turns on capturing the stack and type of object allocation made by the .NET Runtime.   This is only
            supported after V4.5.3 (Late 2014)   This can be very verbose and you should seriously using  GCSampledObjectAllocationHigh
            instead (and GCSampledObjectAllocationLow for production scenarios).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.SupressNGen">
            <summary>
            This suppresses NGEN events on V4.0 (where you have NGEN PDBs), but not on V2.0 (which does not know about this
            bit and also does not have NGEN PDBS).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Stack">
            <summary>
            Also log the stack trace of events for which this is valuable.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.ThreadTransfer">
            <summary>
            This allows tracing work item transfer events (thread pool enqueue/dequeue/ioenqueue/iodequeue/a.o.)
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Debugger">
            <summary>
            .NET Debugger events
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Monitoring">
            <summary>
            Events intended for monitoring on an ongoing basis.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Codesymbols">
            <summary>
            Events that will dump PDBs of dynamically generated assemblies to the ETW stream.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Compilation">
            <summary>
            Events that provide information about compilation.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.CompilationDiagnostic">
            <summary>
            Diagnostic events for diagnosing compilation and pre-compilation features.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.MethodDiagnostic">
            <summary>
            Diagnostic events for capturing token information for events that express MethodID
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.TypeDiagnostic">
            <summary>
            Diagnostic events for diagnosing issues involving the type loader.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Default">
            <summary>
            Recommend default flags (good compromise on verbosity).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.JITSymbols">
            <summary>
            What is needed to get symbols for JIT compiled code.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapSnapshot">
            <summary>
            This provides the flags commonly needed to take a heap .NET Heap snapshot with ETW.
            </summary>
        </member>
        <member name="P:Datadog.Trace.RuntimeMetrics.RuntimeMetricsWriter.ExceptionCounts">
            <summary>
            Gets the internal exception counts, to be used for tests
            </summary>
        </member>
        <member name="T:Datadog.Trace.SamplingPriority">
            <summary>
            Sampling "priorities" indicate whether a trace should be kept (sampled) or dropped (not sampled).
            Trace statistics are computed based on all traces, even if they are dropped
            </summary>
            <remarks>
            <para>
            Currently, all traces are still sent to the Agent (for stats computation, etc),
            but this may change in future versions of the tracer.
            </para>
            <para>
            Despite the name, there is no relative priority between the different values.
            All the "keep" and "reject" values have the same weight, they only indicate where
            the decision originated from.
            </para>
            </remarks>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.UserReject">
            <summary>
            Trace should be dropped (not sampled).
            Sampling decision made explicitly by user through
            code or configuration (e.g. the rules sampler).
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.AutoReject">
            <summary>
            Trace should be dropped (not sampled).
            Sampling decision made by the built-in sampler.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.AutoKeep">
            <summary>
            Trace should be kept (sampled).
            Sampling decision made by the built-in sampler.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.UserKeep">
            <summary>
            Trace should be kept (sampled).
            Sampling decision made explicitly by user through
            code or configuration (e.g. the rules sampler).
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriorityValues.UserReject">
            <summary>
            Trace should be dropped (not sampled).
            Sampling decision made explicitly by user through
            code or configuration (e.g. the rules sampler).
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriorityValues.AutoReject">
            <summary>
            Trace should be dropped (not sampled).
            Sampling decision made by the built-in sampler.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriorityValues.AutoKeep">
            <summary>
            Trace should be kept (sampled).
            Sampling decision made by the built-in sampler.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriorityValues.UserKeep">
            <summary>
            Trace should be kept (sampled).
            Sampling decision made explicitly by user through
            code or configuration (e.g. the rules sampler).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.CustomSamplingRule.Priority">
            <summary>
            Gets or sets the priority of the rule.
            Configuration rules will default to 1 as a priority and rely on order of specification.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.DefaultSamplingRule.Priority">
            <summary>
            Gets the lowest possible priority
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.GlobalSamplingRule.Priority">
            <summary>
            Gets the priority which is one beneath custom rules.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.ISamplingRule.RuleName">
            <summary>
            Gets the rule name.
            Used for debugging purposes mostly.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.ISamplingRule.Priority">
            <summary>
            Gets the priority.
            Higher number means higher priority.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Sampling.RuleBasedSampler.RegisterRule(Datadog.Trace.Sampling.ISamplingRule)">
            <summary>
            Will insert a rule according to how high the Priority field is set.
            If the priority is equal to other rules, the new rule will be the last in that priority group.
            </summary>
            <param name="rule">The new rule being registered.</param>
        </member>
        <member name="T:Datadog.Trace.Scope">
            <summary>
            A scope is a handle used to manage the concept of an active span.
            Meaning that at a given time at most one span is considered active and
            all newly created spans that are not created with the ignoreActiveSpan
            parameter will be automatically children of the active span.
            </summary>
            <summary>
            A scope is a handle used to manage the concept of an active span.
            Meaning that at a given time at most one span is considered active and
            all newly created spans that are not created with the ignoreActiveSpan
            parameter will be automatically children of the active span.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Scope.Span">
            <summary>
            Gets the active span wrapped in this scope
            </summary>
        </member>
        <member name="M:Datadog.Trace.Scope.Dispose">
            <summary>
            Closes the current scope and makes its parent scope active
            </summary>
        </member>
        <member name="M:Datadog.Trace.Scope.Close">
            <summary>
            Closes the current scope and makes its parent scope active
            </summary>
        </member>
        <member name="P:Datadog.Trace.Scope.Datadog#Trace#IScope#Span">
            <summary>
            Gets the active span wrapped in this scope
            </summary>
        </member>
        <member name="M:Datadog.Trace.Scope.Datadog#Trace#IScope#Close">
            <summary>
            Closes the current scope and makes its parent scope active
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.ServiceRemotingClient">
            <summary>
            Provides tracing of ServiceRemotingClientEvents.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingClient.StartTracing">
            <summary>
            Start tracing ServiceRemotingClientEvents.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingClient.ServiceRemotingClientEvents_SendRequest(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the Service Remoting client sends a request.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingClient.ServiceRemotingClientEvents_ReceiveResponse(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the Service Remoting client receives a response
            from the server after it finishes processing a request.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments. Can be of type <c>IServiceRemotingResponseEventArgs2</c> on success
            or <c>IServiceRemotingFailedResponseEventArgs</c> on failure.</param>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.ServiceRemotingService">
            <summary>
            Provides tracing of ServiceRemotingServiceEvents.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingService.StartTracing">
            <summary>
            Start tracing ServiceRemotingServiceEvents.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingService.ServiceRemotingServiceEvents_ReceiveRequest(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the Service Remoting server receives an incoming request.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingService.ServiceRemotingServiceEvents_SendResponse(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the Service Remoting server sends a response
            after processing an incoming request.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments. Can be of type <c>IServiceRemotingResponseEventArgs2</c> on success
            or <c>IServiceRemotingFailedResponseEventArgs2</c> on failure.</param>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingTags.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ServiceFabric.ServiceRemotingTags"/> class.
            For testing purposes only. Do not use directly.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.MethodId">
            <summary>
            Gets the method id. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.InterfaceId">
            <summary>
            Gets the method identifier. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.InvocationId">
            <summary>
            Gets the invocation identifier. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.MethodName">
            <summary>
            Gets the method name. For internal use only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.AddHeader(System.String,System.Byte[])">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.TryGetHeaderValue(System.String,System.Byte[]@)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessage">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessage.GetHeader">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.IServiceRemotingRequestEventArgs">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestEventArgs.Request">
            <summary>
            Gets the request message. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestEventArgs.ServiceUri">
            <summary>
            Gets the service URI. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestEventArgs.MethodName">
            <summary>
            Gets the method name. For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.IServiceRemotingFailedResponseEventArgs">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingFailedResponseEventArgs.Error">
            <summary>
            Gets the exception. For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Span">
            <summary>
            A Span represents a logical unit of work in the system. It may be
            related to other spans by parent/children relationships. The span
            tracks the duration of an operation as well as associated metadata in
            the form of a resource name, a service name, and user defined tags.
            </summary>
            <summary>
            A Span represents a logical unit of work in the system. It may be
            related to other spans by parent/children relationships. The span
            tracks the duration of an operation as well as associated metadata in
            the form of a resource name, a service name, and user defined tags.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.OperationName">
            <summary>
            Gets or sets operation name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.ResourceName">
            <summary>
            Gets or sets the resource name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.Type">
            <summary>
            Gets or sets the type of request this span represents (ex: web, db).
            Not to be confused with span kind.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanTypes"/>
        </member>
        <member name="P:Datadog.Trace.Span.Error">
            <summary>
            Gets or sets a value indicating whether this span represents an error
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.ServiceName">
            <summary>
            Gets or sets the service name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.TraceId">
            <summary>
            Gets the trace's unique identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.SpanId">
            <summary>
            Gets the span's unique identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.RootSpanId">
            <summary>
            Gets <i>local root span id</i>, i.e. the <c>SpanId</c> of the span that is the root of the local, non-reentrant
            sub-operation of the distributed operation that is represented by the trace that contains this span.
            </summary>
            <remarks>
            <para>If the trace has been propagated from a remote service, the <i>remote global root</i> is not relevant for this API.</para>
            <para>A distributed operation represented by a trace may be re-entrant (e.g. service-A calls service-B, which calls service-A again).
            In such cases, the local process may be concurrently executing multiple local root spans.
            This API returns the id of the root span of the non-reentrant trace sub-set.</para></remarks>
        </member>
        <member name="M:Datadog.Trace.Span.Dispose">
            <summary>
            Record the end time of the span and flushes it to the backend.
            After the span has been finished all modifications will be ignored.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Span.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Span.SetTag(System.String,System.String)">
            <summary>
            Add a the specified tag to this span.
            </summary>
            <param name="key">The tag's key.</param>
            <param name="value">The tag's value.</param>
            <returns>This span to allow method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Span.Finish">
            <summary>
            Record the end time of the span and flushes it to the backend.
            After the span has been finished all modifications will be ignored.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Span.Finish(System.DateTimeOffset)">
            <summary>
            Explicitly set the end time of the span and flushes it to the backend.
            After the span has been finished all modifications will be ignored.
            </summary>
            <param name="finishTimestamp">Explicit value for the end time of the Span</param>
        </member>
        <member name="M:Datadog.Trace.Span.SetException(System.Exception)">
            <summary>
            Add the StackTrace and other exception metadata to the span
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Datadog.Trace.Span.GetTag(System.String)">
            <summary>
            Gets the value (or default/null if the key is not a valid tag) of a tag with the key value passed
            </summary>
            <param name="key">The tag's key</param>
            <returns> The value for the tag with the key specified, or null if the tag does not exist</returns>
        </member>
        <member name="P:Datadog.Trace.Span.Datadog#Trace#ISpan#OperationName">
            <inheritdoc />
        </member>
        <member name="P:Datadog.Trace.Span.Datadog#Trace#ISpan#ResourceName">
            <inheritdoc />
        </member>
        <member name="P:Datadog.Trace.Span.Datadog#Trace#ISpan#Type">
            <inheritdoc />
        </member>
        <member name="P:Datadog.Trace.Span.Datadog#Trace#ISpan#Error">
            <inheritdoc />
        </member>
        <member name="P:Datadog.Trace.Span.Datadog#Trace#ISpan#ServiceName">
            <inheritdoc />
        </member>
        <member name="P:Datadog.Trace.Span.Datadog#Trace#ISpan#TraceId">
            <inheritdoc />
        </member>
        <member name="P:Datadog.Trace.Span.Datadog#Trace#ISpan#SpanId">
            <inheritdoc />
        </member>
        <member name="P:Datadog.Trace.Span.Datadog#Trace#ISpan#Context">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Span.Datadog#Trace#ISpan#SetTag(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Span.Datadog#Trace#ISpan#Finish">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Span.Datadog#Trace#ISpan#Finish(System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Span.Datadog#Trace#ISpan#SetException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Span.Datadog#Trace#ISpan#GetTag(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.SpanContext">
            <summary>
            The SpanContext contains all the information needed to express relationships between spans inside or outside the process boundaries.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanContext.None">
            <summary>
            An <see cref="T:Datadog.Trace.ISpanContext"/> with default values. Can be used as the value for
            <see cref="P:Datadog.Trace.SpanCreationSettings.Parent"/> in <see cref="M:Datadog.Trace.Tracer.StartActive(System.String,Datadog.Trace.SpanCreationSettings)"/>
            to specify that the new span should not inherit the currently active scope as its parent.
            </summary>
        </member>
        <member name="M:Datadog.Trace.SpanContext.#ctor(System.Nullable{System.UInt64},System.UInt64,System.Nullable{Datadog.Trace.SamplingPriority},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SpanContext"/> class
            from a propagated context. <see cref="P:Datadog.Trace.SpanContext.Parent"/> will be null
            since this is a root context locally.
            </summary>
            <param name="traceId">The propagated trace id.</param>
            <param name="spanId">The propagated span id.</param>
            <param name="samplingPriority">The propagated sampling priority.</param>
            <param name="serviceName">The service name to propagate to child spans.</param>
        </member>
        <member name="M:Datadog.Trace.SpanContext.#ctor(System.Nullable{System.UInt64},System.UInt64,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SpanContext"/> class
            from a propagated context. <see cref="P:Datadog.Trace.SpanContext.Parent"/> will be null
            since this is a root context locally.
            </summary>
            <param name="traceId">The propagated trace id.</param>
            <param name="spanId">The propagated span id.</param>
            <param name="samplingPriority">The propagated sampling priority.</param>
            <param name="serviceName">The service name to propagate to child spans.</param>
            <param name="origin">The propagated origin of the trace.</param>
        </member>
        <member name="M:Datadog.Trace.SpanContext.#ctor(System.Nullable{System.UInt64},System.UInt64,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SpanContext"/> class
            from a propagated context. <see cref="P:Datadog.Trace.SpanContext.Parent"/> will be null
            since this is a root context locally.
            </summary>
            <param name="traceId">The propagated trace id.</param>
            <param name="spanId">The propagated span id.</param>
            <param name="samplingPriority">The propagated sampling priority.</param>
            <param name="serviceName">The service name to propagate to child spans.</param>
            <param name="origin">The propagated origin of the trace.</param>
            <param name="rawTraceId">The raw propagated trace id</param>
            <param name="rawSpanId">The raw propagated span id</param>
        </member>
        <member name="M:Datadog.Trace.SpanContext.#ctor(Datadog.Trace.ISpanContext,Datadog.Trace.TraceContext,System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SpanContext"/> class
            that is the child of the specified parent context.
            </summary>
            <param name="parent">The parent context.</param>
            <param name="traceContext">The trace context.</param>
            <param name="serviceName">The service name to propagate to child spans.</param>
            <param name="traceId">Override the trace id if there's no parent.</param>
            <param name="spanId">The propagated span id.</param>
            <param name="rawTraceId">Raw trace id value</param>
            <param name="rawSpanId">Raw span id value</param>
        </member>
        <member name="P:Datadog.Trace.SpanContext.Parent">
            <summary>
            Gets the parent context.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.TraceId">
            <summary>
            Gets the trace id
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.ParentId">
            <summary>
            Gets the span id of the parent span
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.SpanId">
            <summary>
            Gets the span id
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.ServiceName">
            <summary>
            Gets or sets the service name to propagate to child spans.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.Origin">
            <summary>
            Gets or sets the origin of the trace
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.TraceContext">
            <summary>
            Gets the trace context.
            Returns null for contexts created from incoming propagated context.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.SamplingPriority">
            <summary>
            Gets the sampling priority for contexts created from incoming propagated context.
            Returns null for local contexts.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.RawTraceId">
            <summary>
            Gets the raw traceId (to support > 64bits)
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.RawSpanId">
            <summary>
            Gets the raw spanId
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{System#String,System#String}}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.SpanContext.System#Collections#Generic#IReadOnlyDictionary{System#String,System#String}#Keys">
            <inheritdoc />
        </member>
        <member name="P:Datadog.Trace.SpanContext.System#Collections#Generic#IReadOnlyDictionary{System#String,System#String}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.SpanContext.System#Collections#Generic#IReadOnlyDictionary{System#String,System#String}#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.SpanContext.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#String}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.SpanContext.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.SpanContext.System#Collections#Generic#IReadOnlyDictionary{System#String,System#String}#ContainsKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.SpanContext.System#Collections#Generic#IReadOnlyDictionary{System#String,System#String}#TryGetValue(System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.SpanContextExtractor">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.SpanContextExtractor.Extract``1(``0,System.Func{``0,System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.SpanCreationSettings">
            <summary>
            Settings to use when creating a new <see cref="T:Datadog.Trace.IScope"/> and <see cref="T:Datadog.Trace.ISpan"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanCreationSettings.StartTime">
            <summary>
            Gets or sets an explicit start time for the new span. If not set, uses the current time.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanCreationSettings.Parent">
            <summary>
            Gets or sets the new span's parent. To prevent a new span from inheriting a parent,
            set to <see cref="F:Datadog.Trace.SpanContext.None"/>. If not set, defaults to <c>null</c> and
            the currently active span (if any) is used as the parent.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanCreationSettings.FinishOnClose">
            <summary>
            Gets or sets whether closing the new scope will close the contained span.
            If not set, defaults to <c>true</c>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.SpanExtensions">
            <summary>
            Extension methods for the <see cref="T:Datadog.Trace.ISpan"/> interface
            </summary>
        </member>
        <member name="M:Datadog.Trace.SpanExtensions.SetUser(Datadog.Trace.ISpan,Datadog.Trace.UserDetails)">
            <summary>
            Sets the details of the user on the local root span
            </summary>
            <param name="span">The span to be tagged</param>
            <param name="userDetails">The details of the current logged on user</param>
        </member>
        <member name="T:Datadog.Trace.SpanKinds">
            <summary>
            A set of standard span kinds that can be used by integrations.
            Not to be confused with span types.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanTypes"/>
        </member>
        <member name="F:Datadog.Trace.SpanKinds.Client">
            <summary>
            A span generated by the client in a client/server architecture.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.SpanKind"/>
        </member>
        <member name="F:Datadog.Trace.SpanKinds.Server">
            <summary>
            A span generated by the server in a client/server architecture.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.SpanKind"/>
        </member>
        <member name="F:Datadog.Trace.SpanKinds.Producer">
            <summary>
            A span generated by the producer in a producer/consumer architecture.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.SpanKind"/>
        </member>
        <member name="F:Datadog.Trace.SpanKinds.Consumer">
            <summary>
            A span generated by the consumer in a producer/consumer architecture.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.SpanKind"/>
        </member>
        <member name="T:Datadog.Trace.SpanTypes">
            <summary>
            A set of standard span types that can be used by integrations.
            Not to be confused with span kinds.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanKinds"/>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Redis">
            <summary>
            The span type for a Redis client integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Sql">
            <summary>
            The span type for a SQL client integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Web">
            <summary>
            The span type for a web framework integration (incoming HTTP requests).
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.MongoDb">
            <summary>
            The span type for a MongoDB integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Http">
            <summary>
            The span type for an outgoing HTTP integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.GraphQL">
            <summary>
            The span type for a GraphQL integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Queue">
            <summary>
            The span type for a message queue integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Custom">
            <summary>
            The span type for a custom integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Test">
            <summary>
            The span type for a Test integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Benchmark">
            <summary>
            The span type for a Benchmark integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Build">
            <summary>
            The span type for msbuild integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Aerospike">
            <summary>
            The span type for an Aerospike integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Serverless">
            <summary>
            The span type for serverless integrations.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Db">
            <summary>
            The span type for db integrations (including couchbase)
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Grpc">
            <summary>
            The span type for GRPC integrations
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tagging.AzureFunctionsTags.SetRootTags(Datadog.Trace.Span)">
            <summary>
            Used to set the current tags on a given root span
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tagging.MsmqTags.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Tagging.MsmqTags"/> class.
            </summary>
            <param name="spanKind">kind of span</param>
        </member>
        <member name="P:Datadog.Trace.Tagging.MsmqTags.SpanKind">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Tagging.TraceTagCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Datadog.Trace.Tagging.TraceTagCollection"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tagging.TraceTagCollection.ParseFromPropagationHeader(System.String)">
            <summary>
            Parses the "x-datadog-tags" header value in "key1=value1,key2=value2" format.
            Propagated tags require the an "_dd.p.*" prefix, so any other tags are ignored.
            </summary>
            <param name="propagationHeader">The header value to parse.</param>
            <returns>A <see cref="T:Datadog.Trace.Tagging.TraceTagCollection"/> that contains the valid tags parsed from the specified header value.</returns>
        </member>
        <member name="M:Datadog.Trace.Tagging.TraceTagCollection.ToPropagationHeader">
            <summary>
            Constructs a string that can be used for horizontal propagation using the "x-datadog-tags" header
            in a "key1=value1,key2=value2" format. This header should only include tags with the "_dd.p.*" prefix.
            The returned string is cached and reused if no relevant tags are changed between calls.
            </summary>
            <returns>A string that can be used for horizontal propagation using the "x-datadog-tags" header.</returns>
            <seealso cref="M:Datadog.Trace.Tagging.TraceTagCollection.FormatPropagationHeader"/>
        </member>
        <member name="M:Datadog.Trace.Tagging.TraceTagCollection.FormatPropagationHeader">
            <seealso cref="M:Datadog.Trace.Tagging.TraceTagCollection.ToPropagationHeader"/>
        </member>
        <member name="M:Datadog.Trace.Tagging.TraceTagCollection.ToEnumerable">
            <summary>
            Returns the trace tags an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Use for testing only as it will allocate on the heap.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Tags">
            <summary>
            Standard span tags used by integrations.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Env">
            <summary>
            The environment of the profiled service.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Version">
            <summary>
            The version of the profiled service.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.InstrumentationName">
            <summary>
            The name of the integration that generated the span.
            Use OpenTracing tag "component"
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.InstrumentedMethod">
            <summary>
            The name of the method that was instrumented to generate the span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.SpanKind">
            <summary>
            The kind of span (e.g. client, server). Not to be confused with <see cref="P:Datadog.Trace.Span.Type"/>.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanKinds"/>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpUrl">
            <summary>
            The URL of an HTTP request
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpMethod">
            <summary>
            The method of an HTTP request
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpRequestHeadersHost">
            <summary>
            The host of an HTTP request
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpStatusCode">
            <summary>
            The status code of an HTTP response
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpEndpoint">
            <summary>
            The end point requested
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ErrorMsg">
            <summary>
            The error message of an exception
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ErrorType">
            <summary>
            The type of an exception
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ErrorStack">
            <summary>
            The stack trace of an exception
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.DbType">
            <summary>
            The type of database (e.g. "sql-server", "mysql", "postgres", "sqlite", "oracle")
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.DbUser">
            <summary>
            The user used to sign into a database
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.DbName">
            <summary>
            The name of the database.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.SqlQuery">
            <summary>
            The query text
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.SqlRows">
            <summary>
            The number of rows returned by a query
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetRoute">
            <summary>
            The ASP.NET routing template.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetController">
            <summary>
            The MVC or Web API controller name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetAction">
            <summary>
            The MVC or Web API action name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetArea">
            <summary>
            The MVC or Web API area name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreRoute">
            <summary>
            The ASP.NET routing template.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreController">
            <summary>
            The MVC or Web API controller name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreAction">
            <summary>
            The MVC or Web API action name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreArea">
            <summary>
            The MVC or Web API area name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCorePage">
            <summary>
            The Razor Pages page name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreEndpoint">
            <summary>
            The Endpoint name in ASP.NET Core endpoint routing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.OutHost">
            <summary>
            The hostname of a outgoing server connection.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.OutPort">
            <summary>
            The port of a outgoing server connection.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.RedisRawCommand">
            <summary>
            The raw command sent to Redis.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MongoDbQuery">
            <summary>
            A MongoDB query.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MongoDbCollection">
            <summary>
            A MongoDB collection name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.GraphQLOperationName">
            <summary>
            The operation name of the GraphQL request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.GraphQLOperationType">
            <summary>
            The operation type of the GraphQL request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.GraphQLSource">
            <summary>
            The source defining the GraphQL request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpCommand">
            <summary>
            The AMQP method.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpExchange">
            <summary>
            The name of the AMQP exchange the message was originally published to.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpRoutingKey">
            <summary>
            The routing key for the AMQP message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpQueue">
            <summary>
            The name of the queue for the AMQP message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpDeliveryMode">
            <summary>
            The delivery mode of the AMQP message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.KafkaPartition">
            <summary>
            The partition associated with a record
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.KafkaOffset">
            <summary>
            The offset inside a partition associated with a record
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.KafkaTombstone">
            <summary>
            Whether the record was a "tombstone" record
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MessageSize">
            <summary>
            The size of the message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsAgentName">
            <summary>
            The agent that instrumented the associated AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsOperationName">
            <summary>
            The operation associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsRegion">
            <summary>
            The region associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsRequestId">
            <summary>
            The request ID associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsServiceName">
            <summary>
            The service associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsQueueName">
            <summary>
            The queue name associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsQueueUrl">
            <summary>
            The queue URL associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.SamplingPriority">
            <summary>
            The sampling priority for the entire trace.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ManualKeep">
            <summary>
            A user-friendly tag that sets the sampling priority to <see cref="F:Datadog.Trace.SamplingPriority.UserKeep"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ManualDrop">
            <summary>
            A user-friendly tag that sets the sampling priority to <see cref="F:Datadog.Trace.SamplingPriority.UserReject"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Analytics">
            <summary>
            Configures Trace Analytics.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Language">
            <summary>
            Language tag, applied to root spans that are .NET runtime (e.g., ASP.NET)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.RuntimeFamily">
            <summary>
            The runtime family tag, it will be placed on the service entry span, the first span opened for a
            service. For this library it will always have the value "dotnet".
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesResourceId">
            <summary>
            The resource ID of the site instance in Azure App Services where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesResourceGroup">
            <summary>
            The resource group of the site instance in Azure App Services where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesSiteName">
            <summary>
            The site name of the site instance in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesExtensionVersion">
            <summary>
            The version of the extension installed where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesInstanceName">
            <summary>
            The instance name in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesInstanceId">
            <summary>
            The instance ID in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesOperatingSystem">
            <summary>
            The operating system in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesRuntime">
            <summary>
            The runtime in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesSiteKind">
            <summary>
            The kind of application instance running in Azure.
            Possible values: app, api, mobileapp, app_linux, app_linux_container, functionapp, functionapp_linux, functionapp_linux_container
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesSiteType">
            <summary>
            The type of application instance running in Azure.
            Possible values: app, function
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesSubscriptionId">
            <summary>
            The subscription ID of the site instance in Azure App Services where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureFunctionTriggerType">
            <summary>
            The type of trigger for an azure function
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureFunctionName">
            <summary>
            The UI name of the azure function
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureFunctionMethod">
            <summary>
            The full method name of the azure function
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureFunctionBindingSource">
            <summary>
            The literal type of the binding for the azure function trigger
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Origin">
            <summary>
            Configures the origin of the trace
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Measured">
            <summary>
            Configures the measured metric for a span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MsmqCommand">
            <summary>
            The name of the Msmq command the message was published to.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MsmqIsTransactionalQueue">
            <summary>
            Is the msmq queue supporting transactional messages
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MsmqQueuePath">
            <summary>
            The name of the Msmq queue the message was published to, containing host name and path.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MsmqMessageWithTransaction">
            <summary>
            A boolean indicating if it's part of a transaction.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.CosmosDbContainer">
            <summary>
            A CosmosDb container name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AppSecEvent">
            <summary>
            If a span was involved with an application security event
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AppSecJson">
            <summary>
            The details of the security event
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AppSecRuleFileVersion">
            <summary>
            Ruleset file version, string satisfying the regular expression: [0-9]+\.[0-9]+\.[0-9]+
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AppSecWafVersion">
            <summary>
            Version of the waf
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AppSecWafInitRuleErrors">
            <summary>
             String-serialized JSON array, each item being a map containing:
             Error(e) - the error string.
             Rules(r) - an array of rules which failed to load with this error.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ActorIp">
            <summary>
            Should contain the public IP of the host initiating the request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.NetworkClientIp">
            <summary>
            The ip as reported by the framework.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ConfigurationTelemetryCollector.GetApplicationData">
            <summary>
            Get the application data. Will be null if not yet initialized.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ConfigurationTelemetryCollector.GetHostData">
            <summary>
            Get the application data. Will be null if not yet initialized.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ConfigurationTelemetryCollector.GetConfigurationData">
            <summary>
            Get the latest data to send to the intake.
            </summary>
            <returns>Null if there are no changes, or the collector is not yet initialized</returns>
        </member>
        <member name="M:Datadog.Trace.Telemetry.DependencyTelemetryCollector.AssemblyLoaded(System.Reflection.AssemblyName)">
            <summary>
            Called when an assembly is loaded
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.DependencyTelemetryCollector.GetData">
            <summary>
            Get the latest data to send to the intake.
            </summary>
            <returns>Null if there are no changes, or the collector is not yet initialized</returns>
        </member>
        <member name="M:Datadog.Trace.Telemetry.IntegrationTelemetryCollector.IntegrationRunning(Datadog.Trace.Configuration.IntegrationId)">
            <summary>
            Should be called when an integration is first executed (not necessarily successfully)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.IntegrationTelemetryCollector.IntegrationGeneratedSpan(Datadog.Trace.Configuration.IntegrationId)">
            <summary>
            Should be called when an integration successfully generates a span
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.IntegrationTelemetryCollector.GetData">
            <summary>
            Get the latest data to send to the intake.
            </summary>
            <returns>Null if there are no changes, or the collector is not yet initialized</returns>
        </member>
        <member name="F:Datadog.Trace.Telemetry.IntegrationTelemetryCollector.IntegrationDetail.Name">
            <summary>
            Gets or sets the integration info of the integration
            </summary>
        </member>
        <member name="F:Datadog.Trace.Telemetry.IntegrationTelemetryCollector.IntegrationDetail.HasGeneratedSpan">
            <summary>
            Gets or sets a value indicating whether an integration successfully generated a span
            0 = not generated, 1 = generated
            </summary>
        </member>
        <member name="F:Datadog.Trace.Telemetry.IntegrationTelemetryCollector.IntegrationDetail.WasExecuted">
            <summary>
            Gets or sets a value indicating whether the integration ever executed
            0 = not generated, 1 = generated
            </summary>
        </member>
        <member name="F:Datadog.Trace.Telemetry.IntegrationTelemetryCollector.IntegrationDetail.WasExplicitlyDisabled">
            <summary>
            Gets or sets a value indicating whether the integration was disabled by a user
            0 = not generated, 1 = generated
            </summary>
        </member>
        <member name="F:Datadog.Trace.Telemetry.IntegrationTelemetryCollector.IntegrationDetail.Error">
            <summary>
            Gets or sets a value indicating whether an integration was disabled due to a fatal error
            </summary>
        </member>
        <member name="T:Datadog.Trace.Telemetry.DependencyTelemetryData">
            <summary>
            Using a record as used as dictionary key so getting equality comparison for free
            </summary>
        </member>
        <member name="T:Datadog.Trace.Telemetry.TelemetryData">
            <summary>
            DTO that is serialized.
            Be aware that the property names control serialization
            </summary>
        </member>
        <member name="P:Datadog.Trace.Telemetry.TelemetryData.RequestType">
            <summary>
            Gets or sets requested API function
            </summary>
        </member>
        <member name="P:Datadog.Trace.Telemetry.TelemetryData.TracerTime">
            <summary>
            Gets or sets unix timestamp (in seconds) of when the message is being sent
            </summary>
        </member>
        <member name="P:Datadog.Trace.Telemetry.TelemetryData.SeqId">
            <summary>
            Gets or sets counter that should be auto incremented every time an API call is being made
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.IntegrationRunning(Datadog.Trace.Configuration.IntegrationId)">
            <summary>
            Should be called when an integration is first executed (not necessarily successfully)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.IntegrationGeneratedSpan(Datadog.Trace.Configuration.IntegrationId)">
            <summary>
            Should be called when an integration successfully generates a span
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.IntegrationDisabledDueToError(Datadog.Trace.Configuration.IntegrationId,System.String)">
            <summary>
            Should be called when an integration is disabled for some reason.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.RecordTracerSettings(Datadog.Trace.Configuration.ImmutableTracerSettings,System.String,Datadog.Trace.PlatformHelpers.AzureAppServices)">
            <summary>
            Called when a tracer is initialized to record the tracer's settings
            Only the first tracer registered is recorded
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.RecordSecuritySettings(Datadog.Trace.AppSec.SecuritySettings)">
            <summary>
            Called when app sec security is enabled to record the security settings
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.RecordProfilerSettings(Datadog.Trace.ContinuousProfiler.Profiler)">
            <summary>
            Called to record profiler-related telemetry
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.DisposeAsync(System.Boolean)">
            <summary>
            Dispose resources for sending telemetry
            </summary>
            <param name="sendAppClosingTelemetry">True if the controller should send "app closing" telemetry before disposing</param>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.DisposeAsync">
            <summary>
            Dispose resources for sending telemetry
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryController.Start">
            <summary>
            Indicates the
            </summary>
        </member>
        <member name="M:Datadog.Trace.Telemetry.ITelemetryTransport.PushTelemetry(Datadog.Trace.Telemetry.TelemetryData)">
            <summary>
            Push telemetry data to the endpoint.
            </summary>
            <param name="data">The data to send</param>
            <returns><c>true</c> if the data was sent successfully, or a non-fatal error occurred
            <c>false</c> if a fatal error occured, and no further telemetry should be sent.</returns>
        </member>
        <member name="P:Datadog.Trace.Telemetry.TelemetryHttpHeaderNames.DefaultHeaders">
            <summary>
            Gets the default constant header that should be added to any request to the agent
            </summary>
        </member>
        <member name="T:Datadog.Trace.Telemetry.TelemetryPushResult">
            <summary>
            The result of attempting to push telemetry to the agent
            </summary>
        </member>
        <member name="P:Datadog.Trace.Telemetry.TelemetrySettings.TelemetryEnabled">
            <summary>
            Gets a value indicating whether internal telemetry is enabled
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.Telemetry.Enabled"/>
        </member>
        <member name="P:Datadog.Trace.Telemetry.TelemetrySettings.TelemetryUri">
            <summary>
            Gets a value indicating the URL where telemetry should be sent
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.Telemetry.Uri"/>
        </member>
        <member name="P:Datadog.Trace.Telemetry.TelemetrySettings.ApiKey">
            <summary>
            Gets the api key to use when sending requests to the telemetry intake
            </summary>
        </member>
        <member name="P:Datadog.Trace.TraceContext.SamplingPriority">
            <summary>
            Gets the trace's sampling priority.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Tracer">
            <summary>
            The tracer is responsible for creating spans and flushing them to the Datadog agent
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tracer._liveTracerCount">
            <summary>
            The number of Tracer instances that have been created and not yet destroyed.
            This is used in the heartbeat metrics to estimate the number of
            "live" Tracers that could potentially be sending traces to the Agent.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tracer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Tracer"/> class with default settings. Replaces the
            settings for all tracers in the application with the default settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tracer.#ctor(Datadog.Trace.Configuration.TracerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Tracer"/>
            class using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/>. This constructor updates the global settings
            for all <see cref="T:Datadog.Trace.Tracer"/> instances in the application.
            </summary>
            <param name="settings">
            A <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> instance with the desired settings,
            or null to use the default configuration sources. This is used to configure global settings
            </param>
        </member>
        <member name="M:Datadog.Trace.Tracer.#ctor(Datadog.Trace.Configuration.TracerSettings,Datadog.Trace.Agent.IAgentWriter,Datadog.Trace.Sampling.ISampler,Datadog.Trace.IScopeManager,Datadog.Trace.Vendors.StatsdClient.IDogStatsd,Datadog.Trace.Telemetry.ITelemetryController)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Tracer"/> class.
            For testing only.
            Note that this API does NOT replace the global Tracer instance.
            The <see cref="P:Datadog.Trace.Tracer.TracerManager"/> created will be scoped specifically to this instance.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tracer.#ctor(Datadog.Trace.TracerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Tracer"/> class.
            Should only be called DIRECTLY for testing purposes.
            If non-null the provided <see cref="P:Datadog.Trace.Tracer.TracerManager"/> will be tied to this TracerInstance (for testing purposes only)
            If null, the global <see cref="P:Datadog.Trace.Tracer.TracerManager"/> will be fetched or created, but will not be modified.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tracer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Datadog.Trace.Tracer"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Instance">
            <summary>
            Gets or sets the global <see cref="T:Datadog.Trace.Tracer"/> instance.
            Used by all automatic instrumentation and recommended
            as the entry point for manual instrumentation.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.ActiveScope">
            <summary>
            Gets the active scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.DistributedSpanContext">
            <summary>
            Gets the active span context dictionary by consulting DistributedTracer.Instance
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.InternalActiveScope">
            <summary>
            Gets the active scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.ScopeManager">
            <summary>
            Gets the tracer's scope manager, which determines which span is currently active, if any.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.DefaultServiceName">
            <summary>
            Gets the default service name for traces where a service name is not specified.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Settings">
            <summary>
            Gets this tracer's settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Datadog#Trace#ITracer#ActiveScope">
            <summary>
            Gets the active scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Datadog#Trace#ITracer#Settings">
            <summary>
            Gets this tracer's settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#Sampler">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Sampling.ISampler"/> instance used by this <see cref="T:Datadog.Trace.IDatadogTracer"/> instance.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tracer.Configure(Datadog.Trace.Configuration.TracerSettings)">
            <summary>
            Replaces the global Tracer settings used by all <see cref="T:Datadog.Trace.Tracer"/> instances,
            including automatic instrumentation
            </summary>
            <param name="settings"> A <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> instance with the desired settings,
            or null to use the default configuration sources. This is used to configure global settings</param>
        </member>
        <member name="M:Datadog.Trace.Tracer.UnsafeSetTracerInstance(Datadog.Trace.Tracer)">
            <summary>
            Sets the global tracer instance without any validation.
            Intended use is for unit testing
            </summary>
            <param name="instance">Tracer instance</param>
        </member>
        <member name="M:Datadog.Trace.Tracer.Datadog#Trace#ITracer#StartActive(System.String)">
            <inheritdoc cref="T:Datadog.Trace.ITracer" />
        </member>
        <member name="M:Datadog.Trace.Tracer.Datadog#Trace#ITracer#StartActive(System.String,Datadog.Trace.SpanCreationSettings)">
            <inheritdoc cref="T:Datadog.Trace.ITracer" />
        </member>
        <member name="M:Datadog.Trace.Tracer.StartActive(System.String)">
            <summary>
            This creates a new span with the given parameters and makes it active.
            </summary>
            <param name="operationName">The span's operation name</param>
            <returns>A scope wrapping the newly created span</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.StartActive(System.String,Datadog.Trace.SpanCreationSettings)">
            <summary>
            This creates a new span with the given parameters and makes it active.
            </summary>
            <param name="operationName">The span's operation name</param>
            <param name="settings">Settings for the new <see cref="T:Datadog.Trace.IScope"/></param>
            <returns>A scope wrapping the newly created span</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.Datadog#Trace#IDatadogOpenTracingTracer#StartSpan(System.String,Datadog.Trace.ISpanContext,System.String,System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.ISpan"/> with the specified parameters.
            </summary>
            <param name="operationName">The span's operation name</param>
            <param name="parent">The span's parent</param>
            <param name="serviceName">The span's service name</param>
            <param name="startTime">An explicit start time for that span</param>
            <param name="ignoreActiveScope">If set the span will not be a child of the currently active span</param>
            <returns>The newly created span</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.ForceFlushAsync">
            <summary>
            Forces the tracer to immediately flush pending traces and send them to the agent.
            To be called when the appdomain or the process is about to be killed in a non-graceful way.
            </summary>
            <returns>Task used to track the async flush operation</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#Write(System.ArraySegment{Datadog.Trace.Span})">
            <summary>
            Writes the specified <see cref="T:Datadog.Trace.Span"/> collection to the agent writer.
            </summary>
            <param name="trace">The <see cref="T:Datadog.Trace.Span"/> collection to write.</param>
        </member>
        <member name="M:Datadog.Trace.Tracer.ActivateSpan(Datadog.Trace.Span,System.Boolean)">
            <summary>
            Make a span the active span and return its new scope.
            </summary>
            <param name="span">The span to activate.</param>
            <param name="finishOnClose">Determines whether closing the returned scope will also finish the span.</param>
            <returns>A Scope object wrapping this span.</returns>
        </member>
        <member name="F:Datadog.Trace.TracerConstants.MaxTraceId">
            <summary>
            2^63-1
            </summary>
        </member>
        <member name="T:Datadog.Trace.TracerManager">
            <summary>
            This class is responsible for managing the singleton objects associated with a Tracer.
            In normal usage, the <see cref="P:Datadog.Trace.TracerManager.Instance"/> should be the only "live" instance. For testing
            purposes, we still need to create instances and keep them separate.
            </summary>
        </member>
        <member name="P:Datadog.Trace.TracerManager.Instance">
            <summary>
            Gets the global <see cref="T:Datadog.Trace.TracerManager"/> instance used by all <see cref="T:Datadog.Trace.Tracer"/> instances
            </summary>
        </member>
        <member name="P:Datadog.Trace.TracerManager.DefaultServiceName">
            <summary>
            Gets the default service name for traces where a service name is not specified.
            </summary>
        </member>
        <member name="P:Datadog.Trace.TracerManager.Settings">
            <summary>
            Gets this tracer's settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.TracerManager.ScopeManager">
            <summary>
            Gets the tracer's scope manager, which determines which span is currently active, if any.
            </summary>
        </member>
        <member name="P:Datadog.Trace.TracerManager.Sampler">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Sampling.ISampler"/> instance used by this <see cref="T:Datadog.Trace.IDatadogTracer"/> instance.
            </summary>
        </member>
        <member name="M:Datadog.Trace.TracerManager.ReplaceGlobalManager(Datadog.Trace.Configuration.ImmutableTracerSettings,Datadog.Trace.TracerManagerFactory)">
            <summary>
            Replaces the global <see cref="T:Datadog.Trace.TracerManager"/> settings. This affects all <see cref="T:Datadog.Trace.Tracer"/> instances
            which use the global <see cref="T:Datadog.Trace.TracerManager"/>
            </summary>
            <param name="settings">The settings to use </param>
            <param name="factory">The factory to use to create the <see cref="T:Datadog.Trace.TracerManager"/></param>
        </member>
        <member name="M:Datadog.Trace.TracerManager.UnsafeReplaceGlobalManager(Datadog.Trace.TracerManager)">
            <summary>
            Sets the global tracer instance without any validation or cleanup.
            Intended use is for unit testing only
            </summary>
        </member>
        <member name="M:Datadog.Trace.TracerManager.Start">
            <summary>
            Start internal processes that require Tracer.Instance is already set
            </summary>
        </member>
        <member name="M:Datadog.Trace.TracerManagerFactory.CreateTracerManager(Datadog.Trace.Configuration.ImmutableTracerSettings,Datadog.Trace.TracerManager)">
            <summary>
            The primary factory method, called by <see cref="T:Datadog.Trace.TracerManager"/>,
            providing the previous global <see cref="T:Datadog.Trace.TracerManager"/> instance (may be null)
            </summary>
        </member>
        <member name="M:Datadog.Trace.TracerManagerFactory.CreateTracerManager(Datadog.Trace.Configuration.ImmutableTracerSettings,Datadog.Trace.Agent.IAgentWriter,Datadog.Trace.Sampling.ISampler,Datadog.Trace.IScopeManager,Datadog.Trace.Vendors.StatsdClient.IDogStatsd,Datadog.Trace.RuntimeMetrics.RuntimeMetricsWriter,Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionManager,Datadog.Trace.Telemetry.ITelemetryController)">
            <summary>
            Internal for use in tests that create "standalone" <see cref="T:Datadog.Trace.TracerManager"/> by
            <see cref="M:Datadog.Trace.Tracer.#ctor(Datadog.Trace.Configuration.TracerSettings,Datadog.Trace.Agent.IAgentWriter,Datadog.Trace.Sampling.ISampler,Datadog.Trace.IScopeManager,Datadog.Trace.Vendors.StatsdClient.IDogStatsd,Datadog.Trace.Telemetry.ITelemetryController)"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.TracerManagerFactory.CreateTracerManagerFrom(Datadog.Trace.Configuration.ImmutableTracerSettings,Datadog.Trace.Agent.IAgentWriter,Datadog.Trace.Sampling.ISampler,Datadog.Trace.IScopeManager,Datadog.Trace.Vendors.StatsdClient.IDogStatsd,Datadog.Trace.RuntimeMetrics.RuntimeMetricsWriter,Datadog.Trace.Logging.DirectSubmission.DirectLogSubmissionManager,Datadog.Trace.Telemetry.ITelemetryController,System.String)">
            <summary>
             Can be overriden to create a different <see cref="T:Datadog.Trace.TracerManager"/>, e.g. <see cref="T:Datadog.Trace.Ci.CITracerManager"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.TracerManagerFactory.GetApplicationName">
            <summary>
            Gets an "application name" for the executing application by looking at
            the hosted app name (.NET Framework on IIS only), assembly name, and process name.
            </summary>
            <returns>The default service name.</returns>
        </member>
        <member name="T:Datadog.Trace.TraceTagNames">
            <summary>
            Names used for trace-level tags.
            </summary>
        </member>
        <member name="T:Datadog.Trace.UserDetails">
            <summary>
            A data container class for the users details
            </summary>
        </member>
        <member name="M:Datadog.Trace.UserDetails.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.UserDetails"/> struct.
            </summary>
            <param name="id">The unique identifier assoicated with the users</param>
        </member>
        <member name="P:Datadog.Trace.UserDetails.Email">
            <summary>
            Gets or sets the user's email address
            </summary>
        </member>
        <member name="P:Datadog.Trace.UserDetails.Name">
            <summary>
            Gets or sets the user's name as displayed in the UI
            </summary>
        </member>
        <member name="P:Datadog.Trace.UserDetails.Id">
            <summary>
            Gets or sets the unique identifier assoicated with the users
            </summary>
        </member>
        <member name="P:Datadog.Trace.UserDetails.SessionId">
            <summary>
            Gets or sets the user's session unique identifier
            </summary>
        </member>
        <member name="P:Datadog.Trace.UserDetails.Role">
            <summary>
            Gets or sets the role associated with the user
            </summary>
        </member>
        <member name="P:Datadog.Trace.UserDetails.Scope">
            <summary>
            Gets or sets the scopes or granted authorities the client currently possesses extracted from token or application security context
            </summary>
        </member>
        <member name="T:Datadog.Trace.Util.ArraySlice`1">
            <summary>
            Array slice.
            Similar to ArraySegment but with write support over the index.
            Also as Span`1 it's a readonly ref struct.
            </summary>
            <typeparam name="T">Type of the array</typeparam>
        </member>
        <member name="F:Datadog.Trace.Util.Clock._overrideClock">
            <summary>
            Flag used to avoid checking the threadstatic field when running outside of tests
            </summary>
        </member>
        <member name="M:Datadog.Trace.Util.Clock.SetForCurrentThread(Datadog.Trace.Util.IClock)">
            <summary>
            Overrides the clock used by the current thread.
            This method should be called only from unit tests.
            </summary>
            <param name="customClock">Fake clock</param>
            <returns>Lease to dispose to restore the original state</returns>
        </member>
        <member name="P:Datadog.Trace.Util.DbCommandCache.Cache">
            <summary>
            Gets or sets the underlying cache, to be used for unit tests
            </summary>
        </member>
        <member name="T:Datadog.Trace.Util.DomainMetadata">
            <summary>
            Dedicated helper class for consistently referencing Process and AppDomain information.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Util.EnvironmentHelpers">
            <summary>
            Helpers to access environment variables
            </summary>
        </member>
        <member name="M:Datadog.Trace.Util.EnvironmentHelpers.SetEnvironmentVariable(System.String,System.String)">
            <summary>
            Safe wrapper around Environment.SetEnvironmentVariable
            </summary>
            <param name="key">Name of the environment variable to set</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Datadog.Trace.Util.EnvironmentHelpers.GetMachineName">
            <summary>
            Safe wrapper around Environment.MachineName
            </summary>
            <returns>The value of <see cref="P:System.Environment.MachineName"/>, or null if an error occured</returns>
        </member>
        <member name="M:Datadog.Trace.Util.EnvironmentHelpers.GetEnvironmentVariable(System.String,System.String)">
            <summary>
            Safe wrapper around Environment.GetEnvironmentVariable
            </summary>
            <param name="key">Name of the environment variable to fetch</param>
            <param name="defaultValue">Value to return in case of error</param>
            <returns>The value of the environment variable, or the default value if an error occured</returns>
        </member>
        <member name="M:Datadog.Trace.Util.EnvironmentHelpers.GetEnvironmentVariables">
            <summary>
            Safe wrapper around Environment.GetEnvironmentVariables
            </summary>
            <returns>A dictionary that contains all environment variables, or en empty dictionary if an error occured</returns>
        </member>
        <member name="M:Datadog.Trace.Util.ProcessHelpers.GetCurrentProcessName">
             <summary>
             Wrapper around <see cref="M:System.Diagnostics.Process.GetCurrentProcess"/> and <see cref="P:System.Diagnostics.Process.ProcessName"/>
            
             On .NET Framework the <see cref="T:System.Diagnostics.Process"/> class is guarded by a
             LinkDemand for FullTrust, so partial trust callers will throw an exception.
             This exception is thrown when the caller method is being JIT compiled, NOT
             when Process.GetCurrentProcess is called, so this wrapper method allows
             us to catch the exception.
             </summary>
             <returns>Returns the name of the current process</returns>
        </member>
        <member name="M:Datadog.Trace.Util.ProcessHelpers.GetCurrentProcessInformation(System.String@,System.String@,System.Int32@)">
             <summary>
             Wrapper around <see cref="M:System.Diagnostics.Process.GetCurrentProcess"/> and its property accesses
            
             On .NET Framework the <see cref="T:System.Diagnostics.Process"/> class is guarded by a
             LinkDemand for FullTrust, so partial trust callers will throw an exception.
             This exception is thrown when the caller method is being JIT compiled, NOT
             when Process.GetCurrentProcess is called, so this wrapper method allows
             us to catch the exception.
             </summary>
             <param name="processName">The name of the current process</param>
             <param name="machineName">The machine name of the current process</param>
             <param name="processId">The ID of the current process</param>
        </member>
        <member name="M:Datadog.Trace.Util.ProcessHelpers.GetCurrentProcessRuntimeMetrics(System.TimeSpan@,System.TimeSpan@,System.Int32@,System.Int64@)">
             <summary>
             Wrapper around <see cref="M:System.Diagnostics.Process.GetCurrentProcess"/> and its property accesses
            
             On .NET Framework the <see cref="T:System.Diagnostics.Process"/> class is guarded by a
             LinkDemand for FullTrust, so partial trust callers will throw an exception.
             This exception is thrown when the caller method is being JIT compiled, NOT
             when Process.GetCurrentProcess is called, so this wrapper method allows
             us to catch the exception.
             </summary>
             <param name="userProcessorTime">CPU time in user mode</param>
             <param name="systemCpuTime">CPU time in kernel mode</param>
             <param name="threadCount">Number of threads</param>
             <param name="privateMemorySize">Committed memory size</param>
        </member>
        <member name="T:Datadog.Trace.Util.StringBuilderCache">
            <summary>
            Provide a cached reusable instance of StringBuilder per thread.
            </summary>
            <remarks>
            Based on https://source.dot.net/#System.Private.CoreLib/StringBuilderCache.cs,a6dbe82674916ac0
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Util.UriHelpers.CleanUri(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Remove the querystring, user information, and fragment from a URL.
            Optionally reduce cardinality by replacing segments that look like IDs with <c>?</c>.
            </summary>
            <param name="uri">The URI to clean</param>
            <param name="removeScheme">Should the scheme be removed?</param>
            <param name="tryRemoveIds">Should IDs be replaced with <c>?</c></param>
        </member>
        <member name="M:Datadog.Trace.Util.UriHelpers.Combine(System.Uri,System.String)">
            <summary>
            Combines an absolute base <see cref="T:System.Uri"/> <paramref name="baseUri"/> with a path <paramref name="relativePath"/>.
            If <paramref name="baseUri"/> includes a path component, this will be included in the final <see cref="T:System.Uri"/>.
            The final <see cref="T:System.Uri"/> will always contain all path segments from both parameters.
            </summary>
            <example>The following calls all return the <see cref="T:System.Uri"/> <c>http://host/a/b/c</c>.
            <code>Combine(new Uri("http://host/a/b"), "c");
            Combine(new Uri("http://host/a/b"), "/c");
            Combine(new Uri("http://host/a/b/"), "c");
            Combine(new Uri("http://host/a/b/"), "/c");</code></example>
            <param name="baseUri">The base <see cref="T:System.Uri"/>, which may or may not end with a <c>/</c>. </param>
            <param name="relativePath">The relative path, which may or may not start with a <c>/</c>.</param>
            <returns>The combined <see cref="T:System.Uri"/></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AllTypesHelper">
            <summary>
            Returns types without getting stuck in an infinite loop
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AllTypesHelper.Types(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.TypeDef})">
            <summary>
            Gets a list of all types and nested types
            </summary>
            <param name="types">A list of types</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes">
            <summary>
            Assembly flags from Assembly.Flags column.
            </summary>
            <remarks>See CorHdr.h/CorAssemblyFlags</remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PublicKey">
            <summary>The assembly ref holds the full (unhashed) public key.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_None">
            <summary>Processor Architecture unspecified</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_MSIL">
            <summary>Processor Architecture: neutral (PE32)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_x86">
            <summary>Processor Architecture: x86 (PE32)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_IA64">
            <summary>Processor Architecture: Itanium (PE32+)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_AMD64">
            <summary>Processor Architecture: AMD X64 (PE32+)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_ARM">
            <summary>Processor Architecture: ARM (PE32)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_ARM64">
            <summary>Processor Architecture: ARM64 (PE32+)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_NoPlatform">
            <summary>applies to any platform but cannot run on any (e.g. reference assembly), should not have "specified" set</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_Specified">
            <summary>Propagate PA flags to AssemblyRef record</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_Mask">
            <summary>Bits describing the processor architecture</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_FullMask">
            <summary>Bits describing the PA incl. Specified</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_Shift">
            <summary>NOT A FLAG, shift count in PA flags &lt;--&gt; index conversion</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.EnableJITcompileTracking">
            <summary>From "DebuggableAttribute".</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.DisableJITcompileOptimizer">
            <summary>From "DebuggableAttribute".</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.Retargetable">
            <summary>The assembly can be retargeted (at runtime) to an assembly from a different publisher.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.ContentType_Default">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.ContentType_WindowsRuntime">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.ContentType_Mask">
            <summary>Bits describing ContentType</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef">
            <summary>
            A high-level representation of a row in the Assembly table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HasDeclSecurityTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HashAlgorithm">
            <summary>
            From column Assembly.HashAlgId
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.hashAlgorithm">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Version">
            <summary>
            From columns Assembly.MajorVersion, Assembly.MinorVersion, Assembly.BuildNumber,
            Assembly.RevisionNumber.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.version">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Attributes">
            <summary>
            From column Assembly.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.PublicKey">
            <summary>
            From column Assembly.PublicKey
            </summary>
            <remarks>An empty <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.PublicKey"/> is created if the caller writes <c>null</c></remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.publicKey">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.PublicKeyToken">
            <summary>
            Gets the public key token which is calculated from <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.PublicKey"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Name">
            <summary>
            From column Assembly.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Culture">
            <summary>
            From column Assembly.Locale
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.culture">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.DeclSecurities">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.declSecurities">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.InitializeDeclSecurities">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.declSecurities"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.PublicKeyOrToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.FullNameToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Modules">
            <summary>
            Gets all modules. The first module is always the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.ManifestModule"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.modules">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.InitializeModules">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.modules"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HasDeclSecurities">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HasModules">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Modules"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.ManifestModule">
            <summary>
            Gets the manifest (main) module. This is always the first module in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Modules"/>.
            <c>null</c> is returned if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Modules"/> is empty.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.attributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.HasPublicKey">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PublicKey"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.ProcessorArchitecture">
            <summary>
            Gets/sets the processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.ProcessorArchitectureFull">
            <summary>
            Gets/sets the processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsProcessorArchitectureNone">
            <summary>
            <c>true</c> if unspecified processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsProcessorArchitectureMSIL">
            <summary>
            <c>true</c> if neutral (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsProcessorArchitectureX86">
            <summary>
            <c>true</c> if x86 (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsProcessorArchitectureIA64">
            <summary>
            <c>true</c> if IA-64 (PE32+) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsProcessorArchitectureX64">
            <summary>
            <c>true</c> if x64 (PE32+) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsProcessorArchitectureARM">
            <summary>
            <c>true</c> if ARM (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsProcessorArchitectureNoPlatform">
            <summary>
            <c>true</c> if eg. reference assembly (not runnable)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsProcessorArchitectureSpecified">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_Specified"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.EnableJITcompileTracking">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.EnableJITcompileTracking"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.DisableJITcompileOptimizer">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.DisableJITcompileOptimizer"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsRetargetable">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.Retargetable"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.ContentType">
            <summary>
            Gets/sets the content type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsContentTypeDefault">
            <summary>
            <c>true</c> if content type is <c>Default</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsContentTypeWindowsRuntime">
            <summary>
            <c>true</c> if content type is <c>WindowsRuntime</c>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.FindModule(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a module in this assembly
            </summary>
            <param name="name">Name of module</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> instance or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.String,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance from a file
            </summary>
            <param name="fileName">File name of an existing .NET assembly</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fileName"/> is <c>null</c></exception>
            <exception cref="T:System.BadImageFormatException">If it's not a .NET assembly (eg. not a .NET file or only a .NET module)</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.String,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance from a file
            </summary>
            <param name="fileName">File name of an existing .NET assembly</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fileName"/> is <c>null</c></exception>
            <exception cref="T:System.BadImageFormatException">If it's not a .NET assembly (eg. not a .NET file or only a .NET module)</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance from a byte[]
            </summary>
            <param name="data">Contents of a .NET assembly</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="data"/> is <c>null</c></exception>
            <exception cref="T:System.BadImageFormatException">If it's not a .NET assembly (eg. not a .NET file or only a .NET module)</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance from a byte[]
            </summary>
            <param name="data">Contents of a .NET assembly</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="data"/> is <c>null</c></exception>
            <exception cref="T:System.BadImageFormatException">If it's not a .NET assembly (eg. not a .NET file or only a .NET module)</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.IntPtr,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance from a memory location
            </summary>
            <param name="addr">Address of a .NET assembly</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="addr"/> is <c>null</c></exception>
            <exception cref="T:System.BadImageFormatException">If it's not a .NET assembly (eg. not a .NET file or only a .NET module)</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.IntPtr,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance from a memory location
            </summary>
            <param name="addr">Address of a .NET assembly</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="addr"/> is <c>null</c></exception>
            <exception cref="T:System.BadImageFormatException">If it's not a .NET assembly (eg. not a .NET file or only a .NET module)</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.IO.Stream,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance from a stream
            </summary>
            <remarks>This will read all bytes from the stream and call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)"/>.
            It's better to use one of the other Load() methods.</remarks>
            <param name="stream">The stream</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <c>null</c></exception>
            <exception cref="T:System.BadImageFormatException">If it's not a .NET assembly (eg. not a .NET file or only a .NET module)</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.IO.Stream,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance from a stream
            </summary>
            <remarks>This will read all bytes from the stream and call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)"/>.
            It's better to use one of the other Load() methods.</remarks>
            <param name="stream">The stream</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <c>null</c></exception>
            <exception cref="T:System.BadImageFormatException">If it's not a .NET assembly (eg. not a .NET file or only a .NET module)</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.GetFullNameWithPublicKey">
            <summary>
            Gets the assembly name with the public key
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.GetFullNameWithPublicKeyToken">
            <summary>
            Gets the assembly name with the public key token
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Find(System.String,System.Boolean)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>. For speed, enable <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EnableTypeDefFindCache"/>
            if possible (read the documentation first).
            </summary>
            <param name="fullName">Full name of the type (no assembly information)</param>
            <param name="isReflectionName"><c>true</c> if it's a reflection name, and nested
            type names are separated by a <c>+</c> character. If <c>false</c>, nested type names
            are separated by a <c>/</c> character.</param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Find(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>. Its scope (i.e., module or assembly) is ignored when
            looking up the type. For speed, enable <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EnableTypeDefFindCache"/>
            if possible (read the documentation first).
            </summary>
            <param name="typeRef">The type ref</param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Write(System.String,Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptions)">
            <summary>
            Writes the assembly to a file on disk. If the file exists, it will be truncated.
            </summary>
            <param name="filename">Filename</param>
            <param name="options">Writer options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Write(System.IO.Stream,Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptions)">
            <summary>
            Writes the assembly to a stream.
            </summary>
            <param name="dest">Destination stream</param>
            <param name="options">Writer options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.IsFriendAssemblyOf(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)">
            <summary>
            Checks whether this assembly is a friend assembly of <paramref name="targetAsm"/>
            </summary>
            <param name="targetAsm">Target assembly</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.UpdateOrCreateAssemblySignatureKeyAttribute(Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)">
            <summary>
            Adds or updates an existing <c>System.Reflection.AssemblySignatureKeyAttribute</c>
            attribute. This attribute is used in enhanced strong naming with key migration.
            See http://msdn.microsoft.com/en-us/library/hh415055.aspx
            </summary>
            <param name="identityPubKey">Identity public key</param>
            <param name="identityKey">Identity strong name key pair</param>
            <param name="signaturePubKey">Signature public key</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.TryGetOriginalTargetFrameworkAttribute(System.String@,System.Version@,System.String@)">
            <summary>
            Gets the original <c>System.Runtime.Versioning.TargetFrameworkAttribute</c> custom attribute information if possible.
            It reads this from the original metadata and doesn't use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.CustomAttributes"/>.
            Returns false if the custom attribute isn't present or if it is invalid.
            </summary>
            <param name="framework">Framework name</param>
            <param name="version">Version</param>
            <param name="profile">Profile</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ModuleDef}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ModuleDef}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ModuleDef}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ModuleDef}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ModuleDef}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefUser">
            <summary>
            An Assembly row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Simple name</param>
            <exception cref="T:System.ArgumentNullException">If any of the args is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Version)">
            <summary>
            Constructor
            </summary>
            <param name="name">Simple name</param>
            <param name="version">Version</param>
            <exception cref="T:System.ArgumentNullException">If any of the args is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Version,Datadog.Trace.Vendors.dnlib.DotNet.PublicKey)">
            <summary>
            Constructor
            </summary>
            <param name="name">Simple name</param>
            <param name="version">Version</param>
            <param name="publicKey">Public key</param>
            <exception cref="T:System.ArgumentNullException">If any of the args is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Version,Datadog.Trace.Vendors.dnlib.DotNet.PublicKey,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Simple name</param>
            <param name="version">Version</param>
            <param name="publicKey">Public key</param>
            <param name="locale">Locale</param>
            <exception cref="T:System.ArgumentNullException">If any of the args is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefUser.#ctor(System.Reflection.AssemblyName)">
            <summary>
            Constructor
            </summary>
            <param name="asmName">Assembly name info</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="asmName"/> is <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Constructor
            </summary>
            <param name="asmName">Assembly name info</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="asmName"/> is <c>null</c></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD">
            <summary>
            Created from a row in the Assembly table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD.InitializeDeclSecurities">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD.InitializeModules">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD.TryGetOriginalTargetFrameworkAttribute(System.String@,System.Version@,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>Assembly</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash">
            <summary>
            Hashes some data according to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm)">
            <summary>
            Constructor
            </summary>
            <remarks>If <paramref name="hashAlgo"/> is an unsupported hash algorithm, then
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.SHA1"/> will be used as the hash algorithm.</remarks>
            <param name="hashAlgo">The algorithm to use</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash.Hash(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm)">
            <summary>
            Hash data
            </summary>
            <remarks>If <paramref name="hashAlgo"/> is an unsupported hash algorithm, then
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.SHA1"/> will be used as the hash algorithm.</remarks>
            <param name="data">The data</param>
            <param name="hashAlgo">The algorithm to use</param>
            <returns>Hashed data or null if <paramref name="data"/> was <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash.Hash(System.Byte[])">
            <summary>
            Hash data
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash.Hash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Hash data
            </summary>
            <param name="data">Data</param>
            <param name="offset">Offset</param>
            <param name="length">Length</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash.Hash(System.IO.Stream,System.UInt32,System.Byte[])">
            <summary>
            Hash stream data
            </summary>
            <param name="stream">Stream</param>
            <param name="length">Number of bytes to hash</param>
            <param name="buffer">Temp buffer</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash.ComputeHash">
            <summary>
            Computes the hash
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHash.CreatePublicKeyToken(System.Byte[])">
            <summary>
            Creates a public key token from the hash of some <paramref name="publicKeyData"/>
            </summary>
            <remarks>A public key is hashed, and the last 8 bytes of the hash, in reverse
            order, is used as the public key token</remarks>
            <param name="publicKeyData">The data</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/> instance</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm">
            <summary>
            Any ALG_CLASS_HASH type in WinCrypt.h can be used by Microsoft's CLI implementation
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.None">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.MD2">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.MD4">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.MD5">
            <summary>This is a reserved value in the CLI</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.SHA1">
            <summary>The only algorithm supported by the CLI</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.MAC">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.SSL3_SHAMD5">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.HMAC">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.TLS1PRF">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.HASH_REPLACE_OWF">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.SHA_256">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.SHA_384">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.SHA_512">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetFieldType(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Gets the field type
            </summary>
            <param name="sig">this</param>
            <returns>Field type or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetRetType(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <summary>
            Gets the return type
            </summary>
            <param name="sig">this</param>
            <returns>Return type or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetParams(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <summary>
            Gets the parameters
            </summary>
            <param name="sig">this</param>
            <returns>The parameters</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetParamCount(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <summary>
            Gets the parameter count
            </summary>
            <param name="sig">this</param>
            <returns>Parameter count</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetGenParamCount(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <summary>
            Gets the generic parameter count
            </summary>
            <param name="sig">this</param>
            <returns>Generic parameter count</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetParamsAfterSentinel(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <summary>
            Gets the parameters after the sentinel
            </summary>
            <param name="sig">this</param>
            <returns>Parameters after sentinel or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetLocals(Datadog.Trace.Vendors.dnlib.DotNet.LocalSig)">
            <summary>
            Gets the locals
            </summary>
            <param name="sig">this</param>
            <returns>All locals</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetGenericArguments(Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig)">
            <summary>
            Gets the generic arguments
            </summary>
            <param name="sig">this</param>
            <returns>All generic arguments</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetIsDefault(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Gets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsDefault"/> property
            </summary>
            <param name="sig">this</param>
            <returns>The type's <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsDefault"/> property or
            <c>false</c> if input is<c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.IsPrimitive(Datadog.Trace.Vendors.dnlib.DotNet.ElementType)">
            <summary>
            Returns <c>true</c> if it's an integer or a floating point type
            </summary>
            <param name="etype">Element type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetPrimitiveSize(Datadog.Trace.Vendors.dnlib.DotNet.ElementType,System.Int32)">
            <summary>
            Returns the size of the element type in bytes or <c>-1</c> if it's unknown
            </summary>
            <param name="etype">Element type</param>
            <param name="ptrSize">Size of a pointer</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.IsValueType(Datadog.Trace.Vendors.dnlib.DotNet.ElementType)">
            <summary>
            Checks whether it's a value type
            </summary>
            <param name="etype">this</param>
            <returns><c>true</c> if it's a value type, <c>false</c> if it's not a value type or
            if we couldn't determine whether it's a value type. Eg., it could be a generic
            instance type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver,System.Reflection.AssemblyName,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds and returns an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>
            </summary>
            <param name="self">this</param>
            <param name="assembly">The assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <returns>An <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance owned by the assembly resolver or
            <c>null</c> if the assembly couldn't be found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver,System.String,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds and returns an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>
            </summary>
            <param name="self">this</param>
            <param name="asmFullName">The assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <returns>An <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance owned by the assembly resolver or
            <c>null</c> if the assembly couldn't be found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveThrow(Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds and returns an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>
            </summary>
            <param name="self">this</param>
            <param name="assembly">The assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <returns>An <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance owned by the assembly resolver</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolveException">If the assembly couldn't be found.</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveThrow(Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver,System.Reflection.AssemblyName,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds and returns an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>
            </summary>
            <param name="self">this</param>
            <param name="assembly">The assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <returns>An <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance owned by the assembly resolver</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolveException">If the assembly couldn't be found.</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveThrow(Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver,System.String,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds and returns an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>
            </summary>
            <param name="self">this</param>
            <param name="asmFullName">The assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <returns>An <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance owned by the assembly resolver</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolveException">If the assembly couldn't be found.</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.IsCorLib(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Checks whether <paramref name="asm"/> appears to be the core library (eg.
            mscorlib, System.Runtime or corefx).
            
            If <paramref name="asm"/> is a reference to a private corlib (eg. System.Private.CoreLib),
            this method returns false unless <paramref name="asm"/> is an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>
            whose manifest (first) module defines <c>System.Object</c>. This check is performed in
            the constructor and the result can be found in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsCoreLibraryModule"/>.
            
            Note that this method also returns true if it appears to be a 'public' corlib,
            eg. mscorlib, etc, even if it internally possibly references a private corlib.
            </summary>
            <param name="asm">The assembly</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToAssemblyRef(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Converts <paramref name="asm"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> instance
            </summary>
            <param name="asm">The assembly</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,System.Boolean)">
            <summary>
            Converts <paramref name="type"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="type">The type</param>
            <param name="checkValueType"><c>true</c> if we should try to figure out whether
            <paramref name="type"/> is a <see cref="T:System.ValueType"/></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if <paramref name="type"/>
            is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetTypeDefOrRefSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetClassOrValueTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetValueTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetClassSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetGenericSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetGenericVar(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetGenericMVar(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetGenericInstSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetPtrSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetByRefSig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetArraySig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetSZArraySig(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetBaseTypeThrow(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns the base type of <paramref name="tdr"/>. Throws if we can't resolve
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>.
            </summary>
            <param name="tdr">The type</param>
            <returns>The base type or <c>null</c> if there's no base type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetBaseType(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,System.Boolean)">
            <summary>
            Returns the base type of <paramref name="tdr"/>
            </summary>
            <param name="tdr">The type</param>
            <param name="throwOnResolveFailure"><c>true</c> if we should throw if we can't
            resolve a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>. <c>false</c> if we should ignore the error and
            just return <c>null</c>.</param>
            <returns>The base type or <c>null</c> if there's no base type, or if
            <paramref name="throwOnResolveFailure"/> is <c>true</c> and we couldn't resolve
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveTypeDef(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Gets the scope type, resolves it, and returns the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="tdr">Type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if input was <c>null</c> or if we
            couldn't resolve the reference.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveTypeDefThrow(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Gets the scope type, resolves it, and returns the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="tdr">Type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance.</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If the type couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveFieldDef(Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IField"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>. Returns <c>null</c> if it
            was not possible to resolve it. See also <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveFieldDefThrow(Datadog.Trace.Vendors.dnlib.DotNet.IField)"/>
            </summary>
            <param name="field">Field to resolve</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> or <c>null</c> if <paramref name="field"/> is
            <c>null</c> or if it wasn't possible to resolve it (the field doesn't exist or its
            assembly couldn't be loaded)</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveFieldDefThrow(Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IField"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> and throws an exception if
            it was not possible to resolve it. See also <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveFieldDef(Datadog.Trace.Vendors.dnlib.DotNet.IField)"/>
            </summary>
            <param name="field">Field to resolve</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveMethodDef(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>. Returns <c>null</c> if it
            was not possible to resolve it. See also <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveMethodDefThrow(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)"/>. If
            <paramref name="method"/> is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>, then the
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Method"/> property is resolved and returned.
            </summary>
            <param name="method">Method to resolve</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or <c>null</c> if <paramref name="method"/> is
            <c>null</c> or if it wasn't possible to resolve it (the method doesn't exist or its
            assembly couldn't be loaded)</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveMethodDefThrow(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> and throws an exception
            if it was not possible to resolve it. See also <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveMethodDef(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)"/>. If
            <paramref name="method"/> is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>, then the
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Method"/> property is resolved and returned.
            </summary>
            <param name="method">Method to resolve</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetDefinitionAssembly(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Returns the definition assembly of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="mr">Member reference</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetParams(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Gets the normal visible parameters, doesn't include the hidden 'this' parameter
            </summary>
            <param name="method">this</param>
            <returns>The normal visible parameters</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetParamCount(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Gets the normal visible parameter count, doesn't include the hidden 'this' parameter
            </summary>
            <param name="method">this</param>
            <returns>Normal visible parameter count</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.HasParams(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Checks whether any normal visible parameter exists, doesn't include the hidden 'this' parameter
            </summary>
            <param name="method">this</param>
            <returns><c>true</c> if there's at least one normal visible parameter</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetParam(Datadog.Trace.Vendors.dnlib.DotNet.IMethod,System.Int32)">
            <summary>
            Gets a normal visible parameter, doesn't include the hidden 'this' parameter
            </summary>
            <param name="method">this</param>
            <param name="index">Normal visible parameter index</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToTypeDefOrRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="sig">The sig</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.IsPrimitive(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Returns <c>true</c> if it's an integer or a floating point type
            </summary>
            <param name="tdr">Type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetCorLibTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig"/> if <paramref name="type"/> matches a primitive type.
            </summary>
            <param name="self">this</param>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig"/> or <c>null</c> if it didn't match any primitive type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetCorLibTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig"/> if <paramref name="namespace"/> and
            <paramref name="name"/> matches a primitive type.
            </summary>
            <param name="self">this</param>
            <param name="namespace">Namespace</param>
            <param name="name">Name</param>
            <param name="defAsm">Definition assembly</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig"/> or <c>null</c> if it didn't match any primitive type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetCorLibTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,System.String,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig"/> if <paramref name="namespace"/> and
            <paramref name="name"/> matches a primitive type.
            </summary>
            <param name="self">this</param>
            <param name="namespace">Namespace</param>
            <param name="name">Name</param>
            <param name="defAsm">Definition assembly</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig"/> or <c>null</c> if it didn't match any primitive type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Error(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Error(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object)">
            <summary>
            Log an error message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Error(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object)">
            <summary>
            Log an error message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Error(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Log an error message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Error(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Log an error message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
            <param name="arg4">Message arg #4</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Error(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object[])">
            <summary>
            Log an error message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Warning(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String)">
            <summary>
            Log a warning message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Warning(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object)">
            <summary>
            Log a warning message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Warning(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object)">
            <summary>
            Log a warning message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Warning(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Log a warning message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Warning(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Log a warning message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
            <param name="arg4">Message arg #4</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Warning(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object[])">
            <summary>
            Log a warning message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Info(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Info(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object)">
            <summary>
            Log an info message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Info(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object)">
            <summary>
            Log an info message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Info(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Log an info message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Info(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Log an info message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
            <param name="arg4">Message arg #4</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Info(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object[])">
            <summary>
            Log an info message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Verbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Verbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object)">
            <summary>
            Log a verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Verbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object)">
            <summary>
            Log a verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Verbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Log a verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Verbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Log a verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
            <param name="arg4">Message arg #4</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Verbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object[])">
            <summary>
            Log a verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.VeryVerbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String)">
            <summary>
            Log a very verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.VeryVerbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object)">
            <summary>
            Log a very verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.VeryVerbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object)">
            <summary>
            Log a very verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.VeryVerbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Log a very verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.VeryVerbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Log a very verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="arg1">Message arg #1</param>
            <param name="arg2">Message arg #2</param>
            <param name="arg3">Message arg #3</param>
            <param name="arg4">Message arg #4</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.VeryVerbose(Datadog.Trace.Vendors.dnlib.DotNet.ILogger,System.Object,System.String,System.Object[])">
            <summary>
            Log a very verbose message
            </summary>
            <param name="logger">this</param>
            <param name="sender">Sender or <c>null</c></param>
            <param name="message">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.ITypeResolver,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Resolves a type
            </summary>
            <param name="self">this</param>
            <param name="typeRef">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance or <c>null</c> if it couldn't be resolved</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveThrow(Datadog.Trace.Vendors.dnlib.DotNet.ITypeResolver,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Resolves a type
            </summary>
            <param name="self">this</param>
            <param name="typeRef">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If the type couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveThrow(Datadog.Trace.Vendors.dnlib.DotNet.ITypeResolver,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Resolves a type
            </summary>
            <param name="self">this</param>
            <param name="typeRef">The type</param>
            <param name="sourceModule">The module that needs to resolve the type or <c>null</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If the type couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveThrow(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefResolver,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Resolves a method or a field
            </summary>
            <param name="self">this</param>
            <param name="memberRef">A method/field reference</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException">If the method/field couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveField(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefResolver,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Resolves a field
            </summary>
            <param name="self">this</param>
            <param name="memberRef">A field reference</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance or <c>null</c> if it couldn't be resolved.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveFieldThrow(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefResolver,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Resolves a field
            </summary>
            <param name="self">this</param>
            <param name="memberRef">A field reference</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance or <c>null</c> if it couldn't be resolved.</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException">If the field couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveMethod(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefResolver,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Resolves a method
            </summary>
            <param name="self">this</param>
            <param name="memberRef">A method reference</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> instance or <c>null</c> if it couldn't be resolved.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveMethodThrow(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefResolver,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Resolves a method
            </summary>
            <param name="self">this</param>
            <param name="memberRef">A method reference</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> instance or <c>null</c> if it couldn't be resolved.</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException">If the method couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ResolveToken(Datadog.Trace.Vendors.dnlib.DotNet.ITokenResolver,System.UInt32)">
            <summary>
            Resolves a token
            </summary>
            <param name="self">This</param>
            <param name="token">The metadata token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetNonNestedTypeRefScope(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Returns <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.ScopeType"/>, but if it's a nested <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>,
            return the non-nested <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="type">this</param>
            <returns>The scope type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.FindThrow(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>. Its scope (i.e., module or assembly) is ignored when
            looking up the type.
            </summary>
            <param name="self">this</param>
            <param name="typeRef">The type ref</param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If type couldn't be found</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.FindThrow(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,System.String,System.Boolean)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="self">this</param>
            <param name="fullName">Full name of the type (no assembly information)</param>
            <param name="isReflectionName"><c>true</c> if it's a reflection name, and nested
            type names are separated by a <c>+</c> character. If <c>false</c>, nested type names
            are separated by a <c>/</c> character.</param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/></returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If type couldn't be found</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.FindNormal(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,System.String)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="self">this</param>
            <param name="fullName">Full name of the type (no assembly information). Nested types are separated by <c>/</c></param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.FindNormalThrow(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,System.String)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="self">this</param>
            <param name="fullName">Full name of the type (no assembly information). Nested types are separated by <c>/</c></param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/></returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If type couldn't be found</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.FindReflection(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,System.String)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="self">this</param>
            <param name="fullName">Full name of the type (no assembly information). Nested types are separated by <c>+</c></param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.FindReflectionThrow(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,System.String)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="self">this</param>
            <param name="fullName">Full name of the type (no assembly information). Nested types are separated by <c>+</c></param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/></returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If type couldn't be found</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TypeExists(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Checks whether a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> exists. <paramref name="typeRef"/>'s scope (i.e.,
            module or assembly) is ignored when looking up the type.
            </summary>
            <param name="self">this</param>
            <param name="typeRef">The type ref</param>
            <returns><c>true</c> if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TypeExists(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,System.String,System.Boolean)">
            <summary>
            Checks whether a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> exists
            </summary>
            <param name="self">this</param>
            <param name="fullName">Full name of the type (no assembly information)</param>
            <param name="isReflectionName"><c>true</c> if it's a reflection name, and nested
            type names are separated by a <c>+</c> character. If <c>false</c>, nested type names
            are separated by a <c>/</c> character.</param>
            <returns><c>true</c> if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TypeExistsNormal(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,System.String)">
            <summary>
            Checks whether a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> exists
            </summary>
            <param name="self">this</param>
            <param name="fullName">Full name of the type (no assembly information). Nested types are separated by <c>/</c></param>
            <returns><c>true</c> if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TypeExistsReflection(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder,System.String)">
            <summary>
            Checks whether a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> exists
            </summary>
            <param name="self">this</param>
            <param name="fullName">Full name of the type (no assembly information). Nested types are separated by <c>+</c></param>
            <returns><c>true</c> if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.RemoveModifiers(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Removes all C optional/required modifiers
            </summary>
            <param name="a">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance</param>
            <returns>Input after all modifiers</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.RemovePinned(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Removes pinned signature
            </summary>
            <param name="a">The type</param>
            <returns>Input after pinned signature</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.RemovePinnedAndModifiers(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Removes all modifiers and pinned sig
            </summary>
            <param name="a">The type</param>
            <returns>Inputer after modifiers and pinned signature</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToTypeDefOrRefSig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToClassOrValueTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToValueTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToClassSig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToGenericSig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToGenericVar(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToGenericMVar(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToGenericInstSig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToPtrSig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToByRefSig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToArraySig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.ToSZArraySig(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/> or <c>null</c> if it's not a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetNext(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the next field or <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetIsValueType(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsValueType"/> value or <c>false</c> if
            <paramref name="self"/> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetIsPrimitive(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsPrimitive"/> value or <c>false</c> if
            <paramref name="self"/> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetElementType(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the element type
            </summary>
            <param name="a">this</param>
            <returns>The element type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetFullName(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the full name of the type
            </summary>
            <param name="a">this</param>
            <returns>Full name of the type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetName(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the name of the type
            </summary>
            <param name="a">this</param>
            <returns>Name of the type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.GetNamespace(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the namespace of the type
            </summary>
            <param name="a">this</param>
            <returns>Namespace of the type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetTypeDefOrRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> if it is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/>.
            </summary>
            <param name="a">this</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetTypeRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> if it is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/>.
            </summary>
            <param name="a">this</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetTypeDef(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> if it is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/>.
            Nothing is resolved.
            </summary>
            <param name="a">this</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Extensions.TryGetTypeSpec(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/> if it is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/>.
            </summary>
            <param name="a">this</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/> or <c>null</c> if none found</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags">
            <summary>
            Flags used by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.Name">
            <summary>
            Compare assembly simple name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.Version">
            <summary>
            Compare assembly version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.PublicKeyToken">
            <summary>
            Compare assembly public key token
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.Culture">
            <summary>
            Compare assembly culture
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.ContentType">
            <summary>
            Compare content type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.All">
            <summary>
            Compare assembly simple name, version, public key token, locale and content type
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer">
            <summary>
            Compares two assembly names
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.CompareAll">
            <summary>
            Compares the name, version, public key token, culture and content type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.NameAndPublicKeyTokenOnly">
            <summary>
            Compares only the name and the public key token
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.NameOnly">
            <summary>
            Compares only the name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.CompareName">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.Name"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.CompareVersion">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.Version"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.ComparePublicKeyToken">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.PublicKeyToken"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.CompareCulture">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.Culture"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.CompareContentType">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags.ContentType"/> bit
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparerFlags)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Comparison flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.CompareTo(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Compares two assembly names
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Compares two assembly names
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns><c>true</c> if equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.CompareClosest(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Figures out which of two assembly names is closer to another assembly name
            </summary>
            <param name="requested">Requested assembly name</param>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns>-1 if both are equally close, 0 if <paramref name="a"/> is closest, 1 if
            <paramref name="b"/> is closest</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Gets the hash code of an assembly name
            </summary>
            <param name="a">Assembly name</param>
            <returns>The hash code</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo">
            <summary>
            Stores assembly name information
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.HashAlgId">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Version">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Version"/> or <c>null</c> if none specified
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Attributes">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.PublicKeyOrToken">
            <summary>
            Gets/sets the public key or token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Name">
            <summary>
            Gets/sets the name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Culture">
            <summary>
            Gets/sets the culture or <c>null</c> if none specified
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.FullName">
            <summary>
            Gets the full name of the assembly
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.FullNameToken">
            <summary>
            Gets the full name of the assembly but use a public key token
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes)">
            <summary>
            Modify <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Attributes"/> property: <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Attributes"/> =
            (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes)">
            <summary>
            Set or clear flags in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.Attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.HasPublicKey">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PublicKey"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.ProcessorArchitecture">
            <summary>
            Gets/sets the processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.ProcessorArchitectureFull">
            <summary>
            Gets/sets the processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsProcessorArchitectureNone">
            <summary>
            <c>true</c> if unspecified processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsProcessorArchitectureMSIL">
            <summary>
            <c>true</c> if neutral (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsProcessorArchitectureX86">
            <summary>
            <c>true</c> if x86 (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsProcessorArchitectureIA64">
            <summary>
            <c>true</c> if IA-64 (PE32+) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsProcessorArchitectureX64">
            <summary>
            <c>true</c> if x64 (PE32+) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsProcessorArchitectureARM">
            <summary>
            <c>true</c> if ARM (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsProcessorArchitectureNoPlatform">
            <summary>
            <c>true</c> if eg. reference assembly (not runnable)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsProcessorArchitectureSpecified">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_Specified"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.EnableJITcompileTracking">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.EnableJITcompileTracking"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.DisableJITcompileOptimizer">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.DisableJITcompileOptimizer"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsRetargetable">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.Retargetable"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.ContentType">
            <summary>
            Gets/sets the content type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsContentTypeDefault">
            <summary>
            <c>true</c> if content type is <c>Default</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.IsContentTypeWindowsRuntime">
            <summary>
            <c>true</c> if content type is <c>WindowsRuntime</c>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="asmFullName">An assembly name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Constructor
            </summary>
            <param name="asm">The assembly</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.#ctor(System.Reflection.AssemblyName)">
            <summary>
            Constructor
            </summary>
            <param name="asmName">Assembly name info</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo.ToString">
            <inhertidoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef">
            <summary>
            A high-level representation of a row in the AssemblyRef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.CurrentAssembly">
            <summary>
            An assembly ref that can be used to indicate that it references the current assembly
            when the current assembly is not known (eg. a type string without any assembly info
            when it references a type in the current assembly).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ImplementationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ResolutionScopeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ScopeType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ScopeName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.Version">
            <summary>
            From columns AssemblyRef.MajorVersion, AssemblyRef.MinorVersion,
            AssemblyRef.BuildNumber, AssemblyRef.RevisionNumber
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.version">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.Attributes">
            <summary>
            From column AssemblyRef.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.PublicKeyOrToken">
            <summary>
            From column AssemblyRef.PublicKeyOrToken
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.publicKeyOrToken">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.Name">
            <summary>
            From column AssemblyRef.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.Culture">
            <summary>
            From column AssemblyRef.Locale
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.culture">
            <summary>Culture</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.Hash">
            <summary>
            From column AssemblyRef.HashValue
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.hashValue">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.RealFullName">
            <summary>
            Same as <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.FullName"/>, except that it uses the <c>PublicKey</c> if available.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.FullNameToken">
            <summary>
            Gets the full name of the assembly but use a public key token
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.attributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.HasPublicKey">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PublicKey"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ProcessorArchitecture">
            <summary>
            Gets/sets the processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ProcessorArchitectureFull">
            <summary>
            Gets/sets the processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsProcessorArchitectureNone">
            <summary>
            <c>true</c> if unspecified processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsProcessorArchitectureMSIL">
            <summary>
            <c>true</c> if neutral (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsProcessorArchitectureX86">
            <summary>
            <c>true</c> if x86 (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsProcessorArchitectureIA64">
            <summary>
            <c>true</c> if IA-64 (PE32+) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsProcessorArchitectureX64">
            <summary>
            <c>true</c> if x64 (PE32+) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsProcessorArchitectureARM">
            <summary>
            <c>true</c> if ARM (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsProcessorArchitectureNoPlatform">
            <summary>
            <c>true</c> if eg. reference assembly (not runnable)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsProcessorArchitectureSpecified">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_Specified"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.EnableJITcompileTracking">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.EnableJITcompileTracking"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.DisableJITcompileOptimizer">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.DisableJITcompileOptimizer"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsRetargetable">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.Retargetable"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ContentType">
            <summary>
            Gets/sets the content type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsContentTypeDefault">
            <summary>
            <c>true</c> if content type is <c>Default</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.IsContentTypeWindowsRuntime">
            <summary>
            <c>true</c> if content type is <c>WindowsRuntime</c>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser">
            <summary>
            An AssemblyRef row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.CreateMscorlibReferenceCLR10">
            <summary>
            Creates a reference to CLR 1.0's mscorlib
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.CreateMscorlibReferenceCLR11">
            <summary>
            Creates a reference to CLR 1.1's mscorlib
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.CreateMscorlibReferenceCLR20">
            <summary>
            Creates a reference to CLR 2.0's mscorlib
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.CreateMscorlibReferenceCLR40">
            <summary>
            Creates a reference to CLR 4.0's mscorlib
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Simple name</param>
            <exception cref="T:System.ArgumentNullException">If any of the args is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Version)">
            <summary>
            Constructor
            </summary>
            <param name="name">Simple name</param>
            <param name="version">Version</param>
            <exception cref="T:System.ArgumentNullException">If any of the args is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Version,Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase)">
            <summary>
            Constructor
            </summary>
            <param name="name">Simple name</param>
            <param name="version">Version</param>
            <param name="publicKey">Public key or public key token</param>
            <exception cref="T:System.ArgumentNullException">If any of the args is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Version,Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Simple name</param>
            <param name="version">Version</param>
            <param name="publicKey">Public key or public key token</param>
            <param name="locale">Locale</param>
            <exception cref="T:System.ArgumentNullException">If any of the args is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.#ctor(System.Reflection.AssemblyName)">
            <summary>
            Constructor
            </summary>
            <param name="asmName">Assembly name info</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="asmName"/> is <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Constructor
            </summary>
            <param name="assembly">Assembly</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefMD">
            <summary>
            Created from a row in the AssemblyRef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>AssemblyRef</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver">
            <summary>
            Resolves assemblies
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.DefaultModuleContext">
            <summary>
            Gets/sets the default <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.FindExactMatch">
            <summary>
            <c>true</c> if <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)"/> should find an assembly that matches exactly.
            <c>false</c> if it first tries to match exactly, and if that fails, it picks an
            assembly that is closest to the requested assembly.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.EnableFrameworkRedirect">
            <summary>
            <c>true</c> if resolved .NET framework assemblies can be redirected to the source
            module's framework assembly version. Eg. if a resolved .NET Framework 3.5 assembly can be
            redirected to a .NET Framework 4.0 assembly if the source module is a .NET Framework 4.0 assembly. This is
            ignored if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.FindExactMatch"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.EnableTypeDefCache">
            <summary>
            If <c>true</c>, all modules in newly resolved assemblies will have their
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EnableTypeDefFindCache"/> property set to <c>true</c>. This is
            enabled by default since these modules shouldn't be modified by the user.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.UseGAC">
            <summary>
            true to search the Global Assembly Cache. Default value is true.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.PreSearchPaths">
            <summary>
            Gets paths searched before trying the standard locations
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.PostSearchPaths">
            <summary>
            Gets paths searched after trying the standard locations
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Constructor
            </summary>
            <param name="defaultModuleContext">Module context for all resolved assemblies</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.AddToCache(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Add a module's assembly to the assembly cache
            </summary>
            <param name="module">The module whose assembly should be cached</param>
            <returns><c>true</c> if <paramref name="module"/>'s assembly is cached, <c>false</c>
            if it's not cached because some other assembly with the exact same full name has
            already been cached or if <paramref name="module"/> or its assembly is <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.AddToCache(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)">
            <summary>
            Add an assembly to the assembly cache
            </summary>
            <param name="asm">The assembly</param>
            <returns><c>true</c> if <paramref name="asm"/> is cached, <c>false</c> if it's not
            cached because some other assembly with the exact same full name has already been
            cached or if <paramref name="asm"/> is <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.Remove(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Removes a module's assembly from the cache
            </summary>
            <param name="module">The module</param>
            <returns><c>true</c> if its assembly was removed, <c>false</c> if it wasn't removed
            since it wasn't in the cache, it has no assembly, or <paramref name="module"/> was
            <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.Remove(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)">
            <summary>
            Removes the assembly from the cache
            </summary>
            <param name="asm">The assembly</param>
            <returns><c>true</c> if it was removed, <c>false</c> if it wasn't removed since it
            wasn't in the cache or if <paramref name="asm"/> was <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.Clear">
            <summary>
            Clears the cache and calls <see cref="M:System.IDisposable.Dispose"/> on each cached module.
            Use <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.Remove(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)"/> to remove any assemblies you added yourself
            using <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.AddToCache(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)"/> before calling this method if you don't want
            them disposed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.GetCachedAssemblies">
            <summary>
            Gets the cached assemblies in this resolver.
            </summary>
            <returns>The cached assemblies.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.FindExactAssembly(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,System.Collections.Generic.IEnumerable{System.String},Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Finds an assembly that exactly matches the requested assembly
            </summary>
            <param name="assembly">Assembly to find</param>
            <param name="paths">Search paths or <c>null</c> if none</param>
            <param name="moduleContext">Module context</param>
            <returns>An <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance or <c>null</c> if an exact match
            couldn't be found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.FindClosestAssembly(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Finds the closest assembly from the already cached assemblies
            </summary>
            <param name="assembly">Assembly to find</param>
            <returns>The closest <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.IsCached(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)">
            <summary>
            Returns <c>true</c> if <paramref name="asm"/> is inserted in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.cachedAssemblies"/>
            </summary>
            <param name="asm">Assembly to check</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.PreFindAssemblies(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Boolean)">
            <summary>
            Called before <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.FindAssemblies(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Boolean)"/>
            </summary>
            <param name="assembly">Assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <param name="matchExactly">We're trying to find an exact match</param>
            <returns><c>null</c> or an enumerable of full paths to try</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.PostFindAssemblies(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Boolean)">
            <summary>
            Called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.FindAssemblies(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Boolean)"/> (if it fails)
            </summary>
            <param name="assembly">Assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <param name="matchExactly">We're trying to find an exact match</param>
            <returns><c>null</c> or an enumerable of full paths to try</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.FindAssemblies(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Boolean)">
            <summary>
            Called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.PreFindAssemblies(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Boolean)"/> (if it fails)
            </summary>
            <param name="assembly">Assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <param name="matchExactly">We're trying to find an exact match</param>
            <returns><c>null</c> or an enumerable of full paths to try</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.GetSearchPaths(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Gets all search paths to use for this module
            </summary>
            <param name="module">The module or <c>null</c> if unknown</param>
            <returns>A list of all search paths to use for this module</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.GetModuleSearchPaths(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Gets all module search paths. This is usually empty unless its assembly has
            a <c>.config</c> file specifying any additional private search paths in a
            &lt;probing/&gt; element.
            </summary>
            <param name="module">The module or <c>null</c> if unknown</param>
            <returns>A list of search paths</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolver.GetModulePrivateSearchPaths(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Gets all private assembly search paths as found in the module's <c>.config</c> file.
            </summary>
            <param name="module">The module or <c>null</c> if unknown</param>
            <returns>A list of search paths</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention">
            <summary>
            See CorHdr.h/CorCallingConvention
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Default">
            <summary>The managed calling convention</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.C">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.StdCall">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.ThisCall">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.FastCall">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.VarArg">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Field">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.LocalSig">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Property">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Unmanaged">
            <summary>Unmanaged calling convention encoded as modopts</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.GenericInst">
            <summary>generic method instantiation</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.NativeVarArg">
            <summary>used ONLY for 64bit vararg PInvoke calls</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Mask">
            <summary>Calling convention is bottom 4 bits</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Generic">
            <summary>Generic method</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.HasThis">
            <summary>Method needs a 'this' parameter</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.ExplicitThis">
            <summary>'this' parameter is the first arg if set (else it's hidden)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.ReservedByCLR">
            <summary>Used internally by the CLR</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig">
            <summary>
            Base class for sigs with a calling convention
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.callingConvention">
            <summary>
            The calling convention
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.ExtraData">
            <summary>
            Gets/sets the extra data found after the signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsDefault">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Default"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsC">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.C"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsStdCall">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.StdCall"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsThisCall">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.ThisCall"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsFastCall">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.FastCall"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsVarArg">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.VarArg"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsField">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Field"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsLocalSig">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.LocalSig"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsProperty">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Property"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsUnmanaged">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Unmanaged"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsGenericInst">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.GenericInst"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.IsNativeVarArg">
            <summary>
            Returns <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.NativeVarArg"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.Generic">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.Generic"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.HasThis">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.HasThis"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.ExplicitThis">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.ExplicitThis"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.ReservedByCLR">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention.ReservedByCLR"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.ImplicitThis">
            <summary>
            <c>true</c> if there's an implicit <c>this</c> parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.ContainsGenericParameter">
            <summary>
            <c>true</c> if this <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> contains a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">The calling convention</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig.GetCallingConvention">
            <summary>
            Gets the calling convention
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig">
            <summary>
            A field signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig.Type">
            <summary>
            Gets/sets the field type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="type">Field type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="type">Field type</param>
            <param name="callingConvention">The calling convention (must have Field set)</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig.Clone">
            <summary>
            Clone this
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig">
            <summary>
            Method sig base class
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.retType">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.parameters">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.genParamCount">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.paramsAfterSentinel">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.CallingConvention">
            <summary>
            Gets/sets the calling convention
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.RetType">
            <summary>
            Gets/sets the return type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.Params">
            <summary>
            Gets the parameters. This is never <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.GenParamCount">
            <summary>
            Gets/sets the generic param count
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig.ParamsAfterSentinel">
            <summary>
            Gets the parameters that are present after the sentinel. Note that this is <c>null</c>
            if there's no sentinel. It can still be empty even if it's not <c>null</c>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig">
            <summary>
            A method signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.OriginalToken">
            <summary>
            Gets/sets the original token. It's set when reading calli instruction operands
            and it's a hint to the module writer if it tries to re-use the same token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static MethodSig
            </summary>
            <param name="retType">Return type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static MethodSig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static MethodSig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static MethodSig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
            <param name="argType3">Arg type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Creates a static MethodSig
            </summary>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance MethodSig
            </summary>
            <param name="retType">Return type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance MethodSig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance MethodSig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance MethodSig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
            <param name="argType3">Arg type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Creates an instance MethodSig
            </summary>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStaticGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStaticGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStaticGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStaticGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
            <param name="argType3">Arg type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateStaticGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Creates a static generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstanceGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstanceGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstanceGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstanceGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
            <param name="argType3">Arg type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.CreateInstanceGeneric(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Creates an instance generic MethodSig
            </summary>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
            <param name="argType3">Arg type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
            <param name="paramsAfterSentinel">Parameters after sentinel</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.Clone">
            <summary>
            Clone this
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig">
            <summary>
            A property signature
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static PropertySig
            </summary>
            <param name="retType">Return type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static PropertySig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static PropertySig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates a static PropertySig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
            <param name="argType3">Arg type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateStatic(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Creates a static PropertySig
            </summary>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance PropertySig
            </summary>
            <param name="retType">Return type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance PropertySig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance PropertySig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Creates an instance PropertySig
            </summary>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
            <param name="argType3">Arg type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.CreateInstance(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Creates an instance PropertySig
            </summary>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention (must have Property set)</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="hasThis"><c>true</c> if instance, <c>false</c> if static</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="hasThis"><c>true</c> if instance, <c>false</c> if static</param>
            <param name="retType">Return type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="hasThis"><c>true</c> if instance, <c>false</c> if static</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="hasThis"><c>true</c> if instance, <c>false</c> if static</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="hasThis"><c>true</c> if instance, <c>false</c> if static</param>
            <param name="retType">Return type</param>
            <param name="argType1">Arg type #1</param>
            <param name="argType2">Arg type #2</param>
            <param name="argType3">Arg type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Constructor
            </summary>
            <param name="hasThis"><c>true</c> if instance, <c>false</c> if static</param>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention</param>
            <param name="genParamCount">Number of generic parameters</param>
            <param name="retType">Return type</param>
            <param name="argTypes">Argument types</param>
            <param name="paramsAfterSentinel">Parameters after sentinel</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.Clone">
            <summary>
            Clone this
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig">
            <summary>
            A local variables signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.Locals">
            <summary>
            All local types. This is never <c>null</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention (must have LocalSig set)</param>
            <param name="count">Number of locals</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="local1">Local type #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="local1">Local type #1</param>
            <param name="local2">Local type #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="local1">Local type #1</param>
            <param name="local2">Local type #2</param>
            <param name="local3">Local type #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Constructor
            </summary>
            <param name="locals">All locals</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.#ctor(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Constructor
            </summary>
            <param name="locals">All locals</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.#ctor(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="locals">All locals (this instance now owns it)</param>
            <param name="dummy">Dummy</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig.Clone">
            <summary>
            Clone this
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig">
            <summary>
            An instantiated generic method signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.GenericArguments">
            <summary>
            Gets the generic arguments (must be instantiated types, i.e., closed types)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="callingConvention">Calling convention (must have GenericInst set)</param>
            <param name="size">Number of generic args</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="arg1">Generic arg #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="arg1">Generic arg #1</param>
            <param name="arg2">Generic arg #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="arg1">Generic arg #1</param>
            <param name="arg2">Generic arg #2</param>
            <param name="arg3">Generic arg #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Constructor
            </summary>
            <param name="args">Generic args</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.#ctor(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Constructor
            </summary>
            <param name="args">Generic args</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig.Clone">
            <summary>
            Clone this
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout">
            <summary>
            A high-level representation of a row in the ClassLayout table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout.PackingSize">
            <summary>
            From column ClassLayout.PackingSize
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout.packingSize">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout.ClassSize">
            <summary>
            From column ClassLayout.ClassSize
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout.classSize">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayoutUser">
            <summary>
            A ClassLayout row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayoutUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayoutUser.#ctor(System.UInt16,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="packingSize">PackingSize</param>
            <param name="classSize">ClassSize</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayoutMD">
            <summary>
            Created from a row in the ClassLayout table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayoutMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayoutMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>ClassLayout</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Constant">
            <summary>
            A high-level representation of a row in the Constant table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Constant.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Constant.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Constant.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Constant.Type">
            <summary>
            From column Constant.Type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Constant.type">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Constant.Value">
            <summary>
            From column Constant.Value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Constant.value">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ConstantUser">
            <summary>
            A Constant row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ConstantUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ConstantUser.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ConstantUser.#ctor(System.Object,Datadog.Trace.Vendors.dnlib.DotNet.ElementType)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
            <param name="type">Type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ConstantMD">
            <summary>
            Created from a row in the Constant table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ConstantMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ConstantMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>Constant</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes">
            <summary>
            Default implementation of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Void">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Boolean">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Char">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.SByte">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Byte">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Int16">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.UInt16">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Int32">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.UInt32">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Int64">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.UInt64">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Single">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Double">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.String">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.TypedReference">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.IntPtr">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.UIntPtr">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.Object">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.AssemblyRef">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">The owner module</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef)">
            <summary>
            Constructor
            </summary>
            <param name="module">The owner module</param>
            <param name="corLibAssemblyRef">Corlib assembly reference or <c>null</c> if a default
            assembly reference should be created</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypes.GetTypeRef(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CpuArch.GetStubAlignment(Datadog.Trace.Vendors.dnlib.DotNet.StubType)">
            <summary>
            Gets the required alignment for the stubs, must be a power of 2
            </summary>
            <param name="stubType">Stub type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CpuArch.GetStubSize(Datadog.Trace.Vendors.dnlib.DotNet.StubType)">
            <summary>
            Gets the size of a stub, it doesn't have to be a multiple of <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.CpuArch.GetStubAlignment(Datadog.Trace.Vendors.dnlib.DotNet.StubType)"/>
            </summary>
            <param name="stubType">Stub type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CpuArch.GetStubCodeOffset(Datadog.Trace.Vendors.dnlib.DotNet.StubType)">
            <summary>
            Gets the offset of the code (entry point) relative to the start of the stub
            </summary>
            <param name="stubType">Stub type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CpuArch.TryGetExportedRvaFromStub(Datadog.Trace.Vendors.dnlib.IO.DataReader@,Datadog.Trace.Vendors.dnlib.PE.IPEImage,System.UInt32@)">
            <summary>
            Gets the RVA of the func field that the stub jumps to
            </summary>
            <param name="reader">Reader, positioned at the stub func</param>
            <param name="peImage">PE image</param>
            <param name="funcRva">Updated with RVA of func field</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CpuArch.WriteStubRelocs(Datadog.Trace.Vendors.dnlib.DotNet.StubType,Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory,Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk,System.UInt32)">
            <summary>
            Writes stub relocs, if needed
            </summary>
            <param name="stubType">Stub type</param>
            <param name="relocDirectory">Reloc directory</param>
            <param name="chunk">The chunk where this stub will be written to</param>
            <param name="stubOffset">Offset of this stub in <paramref name="chunk"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CpuArch.WriteStub(Datadog.Trace.Vendors.dnlib.DotNet.StubType,Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Writes the stub that jumps to the managed function
            </summary>
            <param name="stubType">Stub type</param>
            <param name="writer">Writer</param>
            <param name="imageBase">Image base</param>
            <param name="stubRva">RVA of this stub</param>
            <param name="managedFuncRva">RVA of a pointer-sized field that contains the absolute address of the managed function</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute">
            <summary>
            A custom attribute
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.Constructor">
            <summary>
            Gets/sets the custom attribute constructor
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.AttributeType">
            <summary>
            Gets the attribute type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.TypeFullName">
            <summary>
            Gets the full name of the attribute type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.IsRawBlob">
            <summary>
            <c>true</c> if the raw custom attribute blob hasn't been parsed
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.RawData">
            <summary>
            Gets the raw custom attribute blob or <c>null</c> if the CA was successfully parsed.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.ConstructorArguments">
            <summary>
            Gets all constructor arguments
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.HasConstructorArguments">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.ConstructorArguments"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.NamedArguments">
            <summary>
            Gets all named arguments (field and property values)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.HasNamedArguments">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.NamedArguments"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.Fields">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/>s that are field arguments
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.Properties">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/>s that are property arguments
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.BlobOffset">
            <summary>
            Gets the #Blob offset or 0 if unknown
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="ctor">Custom attribute constructor</param>
            <param name="rawData">Raw custom attribute blob</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType)">
            <summary>
            Constructor
            </summary>
            <param name="ctor">Custom attribute constructor</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.CAArgument})">
            <summary>
            Constructor
            </summary>
            <param name="ctor">Custom attribute constructor</param>
            <param name="arguments">Constructor arguments or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument})">
            <summary>
            Constructor
            </summary>
            <param name="ctor">Custom attribute constructor</param>
            <param name="namedArguments">Named arguments or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.CAArgument},System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument})">
            <summary>
            Constructor
            </summary>
            <param name="ctor">Custom attribute constructor</param>
            <param name="arguments">Constructor arguments or <c>null</c> if none</param>
            <param name="namedArguments">Named arguments or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.CAArgument},System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument},System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="ctor">Custom attribute constructor</param>
            <param name="arguments">Constructor arguments or <c>null</c> if none</param>
            <param name="namedArguments">Named arguments or <c>null</c> if none</param>
            <param name="caBlobOffset">Original custom attribute #Blob offset or 0</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,System.Collections.Generic.List{Datadog.Trace.Vendors.dnlib.DotNet.CAArgument},System.Collections.Generic.List{Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument},System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="ctor">Custom attribute constructor</param>
            <param name="arguments">Constructor arguments. The list is now owned by this instance.</param>
            <param name="namedArguments">Named arguments. The list is now owned by this instance.</param>
            <param name="caBlobOffset">Original custom attribute #Blob offset or 0</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.GetField(System.String)">
            <summary>
            Gets the field named <paramref name="name"/>
            </summary>
            <param name="name">Name of field</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/> instance or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.GetField(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Gets the field named <paramref name="name"/>
            </summary>
            <param name="name">Name of field</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/> instance or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.GetProperty(System.String)">
            <summary>
            Gets the property named <paramref name="name"/>
            </summary>
            <param name="name">Name of property</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/> instance or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.GetProperty(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Gets the property named <paramref name="name"/>
            </summary>
            <param name="name">Name of property</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/> instance or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.GetNamedArgument(System.String,System.Boolean)">
            <summary>
            Gets the property/field named <paramref name="name"/>
            </summary>
            <param name="name">Name of property/field</param>
            <param name="isField"><c>true</c> if it's a field, <c>false</c> if it's a property</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/> instance or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.GetNamedArgument(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Boolean)">
            <summary>
            Gets the property/field named <paramref name="name"/>
            </summary>
            <param name="name">Name of property/field</param>
            <param name="isField"><c>true</c> if it's a field, <c>false</c> if it's a property</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/> instance or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument">
            <summary>
            A custom attribute constructor argument
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument.Type">
            <summary>
            Gets/sets the argument type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument.Value">
            <summary>
            Gets/sets the argument value
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="type">Argument type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="type">Argument type</param>
            <param name="value">Argument value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument.Clone">
            <summary>
            Clones this instance and any <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument"/>s and <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/>s
            referenced from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument">
            <summary>
            A custom attribute field/property argument
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.IsField">
            <summary>
            <c>true</c> if it's a field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.IsProperty">
            <summary>
            <c>true</c> if it's a property
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.Type">
            <summary>
            Gets/sets the field/property type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.Name">
            <summary>
            Gets/sets the property/field name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.Argument">
            <summary>
            Gets/sets the argument
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.ArgumentType">
            <summary>
            Gets/sets the argument type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.Value">
            <summary>
            Gets/sets the argument value
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="isField"><c>true</c> if field, <c>false</c> if property</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.#ctor(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="isField"><c>true</c> if field, <c>false</c> if property</param>
            <param name="type">Field/property type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.#ctor(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="isField"><c>true</c> if field, <c>false</c> if property</param>
            <param name="type">Field/property type</param>
            <param name="name">Name of field/property</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.#ctor(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.CAArgument)">
            <summary>
            Constructor
            </summary>
            <param name="isField"><c>true</c> if field, <c>false</c> if property</param>
            <param name="type">Field/property type</param>
            <param name="name">Name of field/property</param>
            <param name="argument">Field/property argument</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.Clone">
            <summary>
            Clones this instance and any <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CAArgument"/>s referenced from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection">
            <summary>
            Stores <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.#ctor(System.Int32,System.Object,System.Func{System.Object,System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute})">
            <summary>
            Constructor
            </summary>
            <param name="length">Initial length of the list</param>
            <param name="context">Context passed to <paramref name="readOriginalValue"/></param>
            <param name="readOriginalValue">Delegate instance that returns original values</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.IsDefined(System.String)">
            <summary>
            Checks whether a custom attribute is present
            </summary>
            <param name="fullName">Full name of custom attribute type</param>
            <returns><c>true</c> if the custom attribute type is present, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.RemoveAll(System.String)">
            <summary>
            Removes all custom attributes of a certain type
            </summary>
            <param name="fullName">Full name of custom attribute type that should be removed</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.Find(System.String)">
            <summary>
            Finds a custom attribute
            </summary>
            <param name="fullName">Full name of custom attribute type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.FindAll(System.String)">
            <summary>
            Finds all custom attributes of a certain type
            </summary>
            <param name="fullName">Full name of custom attribute type</param>
            <returns>All <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>s of the requested type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.Find(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Finds a custom attribute
            </summary>
            <param name="attrType">Custom attribute type</param>
            <returns>The first <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> found or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.Find(Datadog.Trace.Vendors.dnlib.DotNet.IType,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds a custom attribute
            </summary>
            <param name="attrType">Custom attribute type</param>
            <param name="options">Attribute type comparison flags</param>
            <returns>The first <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> found or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.FindAll(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Finds all custom attributes of a certain type
            </summary>
            <param name="attrType">Custom attribute type</param>
            <returns>All <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>s of the requested type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeCollection.FindAll(Datadog.Trace.Vendors.dnlib.DotNet.IType,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds all custom attributes of a certain type
            </summary>
            <param name="attrType">Custom attribute type</param>
            <param name="options">Attribute type comparison flags</param>
            <returns>All <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>s of the requested type</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CAAssemblyRefFinder">
            <summary>
            Searches for a type according to custom attribute search rules: first try the
            current assembly, and if that fails, try mscorlib
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CAAssemblyRefFinder.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module to search first</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CAAssemblyRefFinder.FindAssemblyRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CABlobParserException">
            <summary>
            Thrown by CustomAttributeReader when it fails to parse a custom attribute blob
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CABlobParserException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CABlobParserException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CABlobParserException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Other exception</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CABlobParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader">
            <summary>
            Reads custom attributes from the #Blob stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,System.UInt32)">
            <summary>
            Reads a custom attribute
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="ctor">Custom attribute constructor</param>
            <param name="offset">Offset of custom attribute in the #Blob stream</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a custom attribute
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="ctor">Custom attribute constructor</param>
            <param name="offset">Offset of custom attribute in the #Blob stream</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType)">
            <summary>
            Reads a custom attribute
            </summary>
            <param name="module">Owner module</param>
            <param name="caBlob">CA blob</param>
            <param name="ctor">Custom attribute constructor</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType)">
            <summary>
            Reads a custom attribute
            </summary>
            <param name="module">Owner module</param>
            <param name="reader">A reader positioned at the the first byte of the CA blob</param>
            <param name="ctor">Custom attribute constructor</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a custom attribute
            </summary>
            <param name="module">Owner module</param>
            <param name="caBlob">CA blob</param>
            <param name="ctor">Custom attribute constructor</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a custom attribute
            </summary>
            <param name="module">Owner module</param>
            <param name="reader">A stream positioned at the the first byte of the CA blob</param>
            <param name="ctor">Custom attribute constructor</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader@,Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a custom attribute
            </summary>
            <param name="module">Owner module</param>
            <param name="reader">A stream positioned at the the first byte of the CA blob</param>
            <param name="ctor">Custom attribute constructor</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.ReadNamedArguments(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads custom attribute named arguments
            </summary>
            <param name="module">Owner module</param>
            <param name="reader">A reader positioned at the the first byte of the CA blob</param>
            <param name="numNamedArgs">Number of named arguments to read from <paramref name="reader"/></param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A list of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/>s or <c>null</c> if some error
            occurred.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.GetEnumUnderlyingType(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the enum's underlying type
            </summary>
            <param name="type">An enum type</param>
            <returns>The underlying type or <c>null</c> if we couldn't resolve the type ref</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CABlobParserException">If <paramref name="type"/> is not an enum or <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttributeReader.GetTypeDef(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Converts <paramref name="type"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>, possibly resolving
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if we couldn't resolve the
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> or if <paramref name="type"/> is a type spec</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity">
            <summary>
            A high-level representation of a row in the DeclSecurity table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.Action">
            <summary>
            From column DeclSecurity.Action
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.action">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.SecurityAttributes">
            <summary>
            From column DeclSecurity.PermissionSet
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.securityAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.InitializeSecurityAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.securityAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.HasSecurityAttributes">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.SecurityAttributes"/> is not empty
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.GetBlob">
            <summary>
            Gets the blob data or <c>null</c> if there's none
            </summary>
            <returns>Blob data or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity.GetNet1xXmlString">
            <summary>
            Returns the .NET Framework 1.x XML string or null if it's not a .NET Framework 1.x format
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityUser">
            <summary>
            A DeclSecurity row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute})">
            <summary>
            Constructor
            </summary>
            <param name="action">The security action</param>
            <param name="securityAttrs">The security attributes (now owned by this)</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityUser.GetBlob">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityMD">
            <summary>
            Created from a row in the DeclSecurity table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityMD.InitializeSecurityAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>DeclSecurity</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityMD.GetBlob">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader">
            <summary>
            Reads <c>DeclSecurity</c> blobs
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Reads a <c>DeclSecurity</c> blob
            </summary>
            <param name="module">Module that will own the returned list</param>
            <param name="sig"><c>#Blob</c> offset of <c>DeclSecurity</c> signature</param>
            <returns>A list of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/>s</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <c>DeclSecurity</c> blob
            </summary>
            <param name="module">Module that will own the returned list</param>
            <param name="sig"><c>#Blob</c> offset of <c>DeclSecurity</c> signature</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A list of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/>s</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Byte[])">
            <summary>
            Reads a <c>DeclSecurity</c> blob
            </summary>
            <param name="module">Module that will own the returned list</param>
            <param name="blob"><c>DeclSecurity</c> blob</param>
            <returns>A list of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/>s</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <c>DeclSecurity</c> blob
            </summary>
            <param name="module">Module that will own the returned list</param>
            <param name="blob"><c>DeclSecurity</c> blob</param>
            <param name="gpContext">Generic parameter context</param>/// 
            <returns>A list of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/>s</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Reads a <c>DeclSecurity</c> blob
            </summary>
            <param name="module">Module that will own the returned list</param>
            <param name="signature"><c>DeclSecurity</c> stream that will be owned by us</param>
            <returns>A list of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/>s</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <c>DeclSecurity</c> blob
            </summary>
            <param name="module">Module that will own the returned list</param>
            <param name="signature"><c>DeclSecurity</c> stream that will be owned by us</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A list of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/>s</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader.ReadBinaryFormat">
            <summary>
            Reads the new (.NET Framework 2.0+) DeclSecurity blob format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurityReader.ReadXmlFormat">
            <summary>
            Reads the old (.NET Framework 1.x) DeclSecurity blob format
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ElementType">
            <summary>
            See CorHdr.h/CorElementType
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.End">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Void">
            <summary>System.Void</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Boolean">
            <summary>System.Boolean</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Char">
            <summary>System.Char</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.I1">
            <summary>System.SByte</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.U1">
            <summary>System.Byte</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.I2">
            <summary>System.Int16</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.U2">
            <summary>System.UInt16</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.I4">
            <summary>System.Int32</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.U4">
            <summary>System.UInt32</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.I8">
            <summary>System.Int64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.U8">
            <summary>System.UInt64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.R4">
            <summary>System.Single</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.R8">
            <summary>System.Double</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.String">
            <summary>System.String</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Ptr">
            <summary>Pointer type (*)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.ByRef">
            <summary>ByRef type (&amp;)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.ValueType">
            <summary>Value type</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Class">
            <summary>Reference type</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Var">
            <summary>Type generic parameter</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Array">
            <summary>Multidimensional array ([*], [,], [,,], ...)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.GenericInst">
            <summary>Generic instance type</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.TypedByRef">
            <summary>Typed byref</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.ValueArray">
            <summary>Value array (don't use)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.I">
            <summary>System.IntPtr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.U">
            <summary>System.UIntPtr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.R">
            <summary>native real (don't use)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.FnPtr">
            <summary>Function pointer</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Object">
            <summary>System.Object</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.SZArray">
            <summary>Single-dimension, zero lower bound array ([])</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.MVar">
            <summary>Method generic parameter</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.CModReqd">
            <summary>Required C modifier</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.CModOpt">
            <summary>Optional C modifier</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Internal">
            <summary>Used internally by the CLR (don't use)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Module">
            <summary>Module (don't use)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Sentinel">
            <summary>Sentinel (method sigs only)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Pinned">
            <summary>Pinned type (locals only)</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code">
            <summary>
            A CIL opcode. If the high byte is 0 or if it's <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code.UNKNOWN1"/>, it's a 1-byte opcode,
            else it's a two-byte opcode and the highest byte is the first byte of the opcode.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions.IsExperimental(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code)">
            <summary>
            Determines whether a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code"/> is experimental
            </summary>
            <param name="code">The code</param>
            <returns><c>true</c> if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code"/> is experimental; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions.ToOpCode(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code)">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code"/> to an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode"/>
            </summary>
            <param name="code">The code</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode"/> or <c>null</c> if it's invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions.ToOpCode(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code"/> to an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode"/>, using a module context to look
            up potential experimental opcodes
            </summary>
            <param name="code">The code</param>
            <param name="context">The module context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode"/> or <c>null</c> if it's invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions.GetOpCode(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Gets the opcode or <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodes.UNKNOWN1"/> if <paramref name="self"/> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions.GetOperand(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Gets the operand or <c>null</c> if <paramref name="self"/> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions.GetOffset(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Gets the offset or 0 if <paramref name="self"/> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions.GetSequencePoint(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Gets the sequence point or <c>null</c> if <paramref name="self"/> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Extensions.ResolveToken(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,System.UInt32)">
            <summary>
            Resolves a token
            </summary>
            <param name="self">An <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver"/> object</param>
            <param name="token">The metadata token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReaderOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader"/> options
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReaderOptions.None">
            <summary>
            No option is enabled
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReaderOptions.UnknownDeclaringType">
            <summary>
            Some fields/methods have an unknown declaring type and don't have a context with
            that information. If this is enabled, the reader will try to guess it but it doesn't
            always work. If you get an <see cref="T:System.ArgumentException"/>, try enabling this option.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader">
            <summary>
            Reads code from a DynamicMethod
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module that will own the method body</param>
            <param name="obj">This can be one of several supported types: the delegate instance
            created by DynamicMethod.CreateDelegate(), a DynamicMethod instance, a RTDynamicMethod
            instance or a DynamicResolver instance.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Object,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module that will own the method body</param>
            <param name="obj">This can be one of several supported types: the delegate instance
            created by DynamicMethod.CreateDelegate(), a DynamicMethod instance, a RTDynamicMethod
            instance or a DynamicResolver instance.</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Object,Datadog.Trace.Vendors.dnlib.DotNet.Importer)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module that will own the method body</param>
            <param name="obj">This can be one of several supported types: the delegate instance
            created by DynamicMethod.CreateDelegate(), a DynamicMethod instance, a RTDynamicMethod
            instance or a DynamicResolver instance.</param>
            <param name="importer">Importer</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Object,Datadog.Trace.Vendors.dnlib.DotNet.Importer,Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReaderOptions)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module that will own the method body</param>
            <param name="obj">This can be one of several supported types: the delegate instance
            created by DynamicMethod.CreateDelegate(), a DynamicMethod instance, a RTDynamicMethod
            instance or a DynamicResolver instance.</param>
            <param name="importer">Importer</param>
            <param name="options">Options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.Read">
            <summary>
            Reads the code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.GetMethod">
            <summary>
            Returns the created method. Must be called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.Read"/>.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.ReadInlineField(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.ReadInlineMethod(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.ReadInlineSig(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.ReadInlineString(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.ReadInlineTok(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.DynamicMethodBodyReader.ReadInlineType(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler">
            <summary>
            A CIL method exception handler
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.TryStart">
            <summary>
            First instruction of try block
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.TryEnd">
            <summary>
            One instruction past the end of try block or <c>null</c> if it ends at the end
            of the method.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.FilterStart">
            <summary>
            Start of filter handler or <c>null</c> if none. The end of filter handler is
            always <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.HandlerStart"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.HandlerStart">
            <summary>
            First instruction of try handler block
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.HandlerEnd">
            <summary>
            One instruction past the end of try handler block or <c>null</c> if it ends at the end
            of the method.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.CatchType">
            <summary>
            The catch type if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.IsCatch"/> is <see langword="true" />
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.HandlerType">
            <summary>
            Type of exception handler clause
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.IsCatch">
            <summary>
            Checks if it's a `catch` handler
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.IsFilter">
            <summary>
            Checks if it's a `filter` handler
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.IsFinally">
            <summary>
            Checks if it's a `finally` handler
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.IsFault">
            <summary>
            Checks if it's a `fault` handler
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandlerType)">
            <summary>
            Constructor
            </summary>
            <param name="handlerType">Exception clause type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandlerType">
            <summary>
            Type of exception handler. See CorHdr.h/CorExceptionFlag
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandlerType.Catch">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandlerType.Filter">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandlerType.Finally">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandlerType.Fault">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandlerType.Duplicated">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl">
            <summary>
            CIL opcode flow control
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Branch">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Break">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Call">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Cond_Branch">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Meta">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Next">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Phi">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Return">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl.Throw">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction">
            <summary>
            A CIL instruction (opcode + operand)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.OpCode">
            <summary>
            The opcode
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Operand">
            <summary>
            The opcode operand
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Offset">
            <summary>
            Offset of the instruction in the method body
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.SequencePoint">
            <summary>
            PDB sequence point or <c>null</c> if none
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode)">
            <summary>
            Constructor
            </summary>
            <param name="opCode">Opcode</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="opCode">Opcode</param>
            <param name="operand">The operand</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode)">
            <summary>
            Creates a new instruction with no operand
            </summary>
            <param name="opCode">The opcode</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.Byte)">
            <summary>
            Creates a new instruction with a <see cref="T:System.Byte"/> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.SByte)">
            <summary>
            Creates a new instruction with a <see cref="T:System.SByte"/> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.Int32)">
            <summary>
            Creates a new instruction with an <see cref="T:System.Int32"/> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.Int64)">
            <summary>
            Creates a new instruction with a <see cref="T:System.Int64"/> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.Single)">
            <summary>
            Creates a new instruction with a <see cref="T:System.Single"/> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.Double)">
            <summary>
            Creates a new instruction with a <see cref="T:System.Double"/> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.String)">
            <summary>
            Creates a new instruction with a string operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="s">The string</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Creates a new instruction with an instruction target operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="target">Target instruction</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction})">
            <summary>
            Creates a new instruction with an instruction target list operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="targets">The targets</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Creates a new instruction with a type operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="type">The type</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig)">
            <summary>
            Creates a new instruction with a type operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="type">The type</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Creates a new instruction with a method/field operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="mr">The method/field</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Creates a new instruction with a field operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="field">The field</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Creates a new instruction with a method operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="method">The method</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.ITokenOperand)">
            <summary>
            Creates a new instruction with a token operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="token">The token</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Creates a new instruction with a method signature operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="methodSig">The method signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.Parameter)">
            <summary>
            Creates a new instruction with a method parameter operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="parameter">The method parameter</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Create(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <summary>
            Creates a new instruction with a method local operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="local">The method local</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.CreateLdcI4(System.Int32)">
            <summary>
            Creates a <c>ldci4</c> instruction
            </summary>
            <param name="value">Operand value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.GetSize">
            <summary>
            Gets the size in bytes of the instruction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.UpdateStack(System.Int32@)">
            <summary>
            Updates <paramref name="stack"/> with the new stack size
            </summary>
            <param name="stack">Current stack size</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.UpdateStack(System.Int32@,System.Boolean)">
            <summary>
            Updates <paramref name="stack"/> with the new stack size
            </summary>
            <param name="stack">Current stack size</param>
            <param name="methodHasReturnValue"><c>true</c> if the method has a return value,
            <c>false</c> otherwise</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.CalculateStackUsage(System.Int32@,System.Int32@)">
            <summary>
            Calculates stack usage
            </summary>
            <param name="pushes">Updated with number of stack pushes</param>
            <param name="pops">Updated with number of stack pops or <c>-1</c> if the stack should
            be cleared.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.CalculateStackUsage(System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Calculates stack usage
            </summary>
            <param name="methodHasReturnValue"><c>true</c> if method has a return value</param>
            <param name="pushes">Updated with number of stack pushes</param>
            <param name="pops">Updated with number of stack pops or <c>-1</c> if the stack should
            be cleared.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsLeave">
            <summary>
            Checks whether it's one of the <c>leave</c> instructions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsBr">
            <summary>
            Checks whether it's one of the <c>br</c> instructions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsBrfalse">
            <summary>
            Checks whether it's one of the <c>brfalse</c> instructions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsBrtrue">
            <summary>
            Checks whether it's one of the <c>brtrue</c> instructions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsConditionalBranch">
            <summary>
            Checks whether it's one of the conditional branch instructions (bcc, brtrue, brfalse)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsLdcI4">
            <summary>
            Checks whether this is one of the <c>ldc.i4</c> instructions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.GetLdcI4Value">
            <summary>
            Returns a <c>ldc.i4</c> instruction's operand
            </summary>
            <returns>The integer value</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.OpCode"/> isn't one of the
            <c>ldc.i4</c> opcodes</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsLdarg">
            <summary>
            Checks whether it's one of the <c>ldarg</c> instructions, but does <c>not</c> check
            whether it's one of the <c>ldarga</c> instructions.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsLdloc">
            <summary>
            Checks whether it's one of the <c>ldloc</c> instructions, but does <c>not</c> check
            whether it's one of the <c>ldloca</c> instructions.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsStarg">
            <summary>
            Checks whether it's one of the <c>starg</c> instructions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.IsStloc">
            <summary>
            Checks whether it's one of the <c>stloc</c> instructions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.GetLocal(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local})">
            <summary>
            Returns the local if it's a <c>ldloc</c>, <c>stloc</c> or <c>ldloca</c> instruction
            </summary>
            <param name="locals">The locals</param>
            <returns>The local or <c>null</c> if it's not a <c>ldloc</c>, <c>stloc</c> or <c>ldloca</c>
            instruction or if the local doesn't exist.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.GetParameterIndex">
            <summary>
            Gets the index of the instruction's parameter operand or <c>-1</c> if the parameter
            is missing or if it's not an instruction with a parameter operand.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.GetParameter(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Returns a method parameter
            </summary>
            <param name="parameters">All parameters</param>
            <returns>A parameter or <c>null</c> if it doesn't exist</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.GetArgumentType(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns an argument type
            </summary>
            <param name="methodSig">Method signature</param>
            <param name="declaringType">Declaring type (only needed if it's an instance method)</param>
            <returns>The type or <c>null</c> if it doesn't exist</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Clone">
            <summary>
            Clone this instance. The <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.Operand"/> and <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.SequencePoint"/> fields
            are shared by this instance and the created instance.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InstructionPrinter">
            <summary>
            Converts instructions to strings
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InstructionPrinter.ToString(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Converts an instruction to a string
            </summary>
            <param name="instr">The instruction</param>
            <returns>The result</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InstructionPrinter.GetOperandString(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Gets the instruction's operand as a string
            </summary>
            <param name="instr">The instruction</param>
            <returns>The operand as a string</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InstructionPrinter.AddOperandString(System.Text.StringBuilder,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Add an instruction's operand to <paramref name="sb"/>
            </summary>
            <param name="sb">Place result here</param>
            <param name="instr">The instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InstructionPrinter.AddOperandString(System.Text.StringBuilder,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction,System.String)">
            <summary>
            Add an instruction's operand to <paramref name="sb"/>
            </summary>
            <param name="sb">Place result here</param>
            <param name="instr">The instruction</param>
            <param name="extra">A string that will be added before the operand, if there's
            an operand.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InvalidMethodException">
            <summary>
            Thrown when invalid data is detected while parsing a .NET method
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InvalidMethodException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InvalidMethodException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Error message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InvalidMethodException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Error message</param>
            <param name="innerException">The inner exception or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.InvalidMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList">
            <summary>
            A collection of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local"/>s
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Count">
            <summary>
            Gets the number of locals
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Locals">
            <summary>
            Gets the list of locals
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Item(System.Int32)">
            <summary>
            Gets the N'th local
            </summary>
            <param name="index">The local index</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.#ctor(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local})">
            <summary>
            Constructor
            </summary>
            <param name="locals">All locals that will be owned by this instance</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Add(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <summary>
            Adds a new local and then returns it
            </summary>
            <param name="local">The local that should be added to the list</param>
            <returns>The input is always returned</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#Emit#Local}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#Emit#Local}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#Emit#Local}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#Emit#Local}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#Emit#Local}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.IndexOf(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Insert(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Contains(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.CopyTo(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.Remove(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.LocalList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local">
            <summary>
            A method local
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.Type">
            <summary>
            Gets/sets the type of the local
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.Index">
            <summary>
            Local index
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.Name">
            <summary>
            Gets the name. This property is obsolete, use <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal"/> to get/set the name stored in the PDB file.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.Attributes">
            <summary>
            Gets the attributes. This property is obsolete, use <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal"/> to get/set the attributes stored in the PDB file.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="typeSig">The type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="typeSig">The type</param>
            <param name="name">Name of local</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="typeSig">The type</param>
            <param name="name">Name of local</param>
            <param name="index">Index, should only be used if you don't add it to the locals list</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBody">
            <summary>
            Method body base class
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.NativeMethodBody">
            <summary>
            A native method body
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.NativeMethodBody.RVA">
            <summary>
            Gets/sets the RVA of the native method body
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.NativeMethodBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.NativeMethodBody.#ctor(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Constructor
            </summary>
            <param name="rva">RVA of method body</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody">
            <summary>
            CIL (managed code) body
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.SMALL_HEADER_SIZE">
            <summary>
            Size of a small header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.KeepOldMaxStack">
            <summary>
            Gets/sets a flag indicating whether the original max stack value should be used.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.InitLocals">
            <summary>
            Gets/sets the init locals flag. This is only valid if the method has any locals.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.HeaderSize">
            <summary>
            Gets/sets the size in bytes of the method body header. The instructions immediately follow
            the header.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.IsSmallHeader">
            <summary>
            <c>true</c> if it was a small body header (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.HeaderSize"/> is <c>1</c>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.IsBigHeader">
            <summary>
            <c>true</c> if it was a big body header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.MaxStack">
            <summary>
            Gets/sets max stack value from the fat method header.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.LocalVarSigTok">
            <summary>
            Gets/sets the locals metadata token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.HasInstructions">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.Instructions"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.Instructions">
            <summary>
            Gets the instructions
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.HasExceptionHandlers">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.ExceptionHandlers"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.ExceptionHandlers">
            <summary>
            Gets the exception handlers
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.HasVariables">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.Variables"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.Variables">
            <summary>
            Gets the locals
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.PdbMethod">
            <summary>
            Gets/sets the PDB method. This is <c>null</c> if no PDB has been loaded or if there's
            no PDB info for this method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.HasPdbMethod">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.PdbMethod"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.MetadataBodySize">
            <summary>
            Gets the total size of the body in the PE file, including header, IL bytes, and exception handlers.
            This property returns 0 if the size is unknown.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.#ctor(System.Boolean,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local})">
            <summary>
            Constructor
            </summary>
            <param name="initLocals">Init locals flag</param>
            <param name="instructions">All instructions. This instance will own the list.</param>
            <param name="exceptionHandlers">All exception handlers. This instance will own the list.</param>
            <param name="locals">All locals. This instance will own the locals in the list.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.SimplifyMacros(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Shorter instructions are converted to the longer form, eg. <c>Ldc_I4_1</c> is
            converted to <c>Ldc_I4</c> with a <c>1</c> as the operand.
            </summary>
            <param name="parameters">All method parameters, including the hidden 'this' parameter
            if it's an instance method. Use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Parameters"/>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.OptimizeMacros">
            <summary>
            Optimizes instructions by using the shorter form if possible. Eg. <c>Ldc_I4</c> <c>1</c>
            will be replaced with <c>Ldc_I4_1</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.SimplifyBranches">
            <summary>
            Short branch instructions are converted to the long form, eg. <c>Beq_S</c> is
            converted to <c>Beq</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.OptimizeBranches">
            <summary>
            Optimizes branches by using the smallest possible branch
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody.UpdateInstructionOffsets">
            <summary>
            Updates each instruction's offset
            </summary>
            <returns>Total size in bytes of all instructions</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.IStringResolver">
            <summary>
            Reads strings from #US heap
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.IStringResolver.ReadUserString(System.UInt32)">
            <summary>
            Reads a string from the #US heap
            </summary>
            <param name="token">String token</param>
            <returns>A string</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver">
            <summary>
            Resolves instruction operands
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader">
            <summary>
            Reads a .NET method body (header, locals, instructions, exception handlers)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="reader"/> doesn't
            point to the start of a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="method">Use parameters from this method</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="reader"/> doesn't
            point to the start of a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="method">Use parameters from this method</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="reader"/> doesn't
            point to the start of a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="reader"/> doesn't
            point to the start of a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="parameters">Method parameters</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="reader"/> doesn't
            point to the start of a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="parameters">Method parameters</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="context">The module context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,System.Byte[],System.Byte[],System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="code"/> is not
            a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="code">All code</param>
            <param name="exceptions">Exceptions or <c>null</c> if all exception handlers are in
            <paramref name="code"/></param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,System.Byte[],System.Byte[],System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="code"/> is not
            a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="code">All code</param>
            <param name="exceptions">Exceptions or <c>null</c> if all exception handlers are in
            <paramref name="code"/></param>
            <param name="parameters">Method parameters</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Nullable{Datadog.Trace.Vendors.dnlib.IO.DataReader},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="codeReader"/> doesn't
            point to the start of a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="codeReader">A reader positioned at the start of a .NET method body</param>
            <param name="ehReader">Exception handler reader or <c>null</c> if exceptions aren't
            present or if <paramref name="codeReader"/> contains the exception handlers</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Nullable{Datadog.Trace.Vendors.dnlib.IO.DataReader},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="codeReader"/> doesn't
            point to the start of a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="codeReader">A reader positioned at the start of a .NET method body</param>
            <param name="ehReader">Exception handler reader or <c>null</c> if exceptions aren't
            present or if <paramref name="codeReader"/> contains the exception handlers</param>
            <param name="parameters">Method parameters</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Nullable{Datadog.Trace.Vendors.dnlib.IO.DataReader},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="codeReader"/> doesn't
            point to the start of a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="codeReader">A reader positioned at the start of a .NET method body</param>
            <param name="ehReader">Exception handler reader or <c>null</c> if exceptions aren't
            present or if <paramref name="codeReader"/> contains the exception handlers</param>
            <param name="parameters">Method parameters</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="context">The module context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,System.Byte[],System.Byte[],System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},System.UInt16,System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="code"/> is not
            a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="code">All code</param>
            <param name="exceptions">Exceptions or <c>null</c> if all exception handlers are in
            <paramref name="code"/></param>
            <param name="parameters">Method parameters</param>
            <param name="flags">Method header flags, eg. 2 if tiny method</param>
            <param name="maxStack">Max stack</param>
            <param name="codeSize">Code size</param>
            <param name="localVarSigTok">Local variable signature token or 0 if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,System.Byte[],System.Byte[],System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},System.UInt16,System.UInt16,System.UInt32,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="code"/> is not
            a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="code">All code</param>
            <param name="exceptions">Exceptions or <c>null</c> if all exception handlers are in
            <paramref name="code"/></param>
            <param name="parameters">Method parameters</param>
            <param name="flags">Method header flags, eg. 2 if tiny method</param>
            <param name="maxStack">Max stack</param>
            <param name="codeSize">Code size</param>
            <param name="localVarSigTok">Local variable signature token or 0 if none</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,System.Byte[],System.Byte[],System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},System.UInt16,System.UInt16,System.UInt32,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a CIL method body or returns an empty one if <paramref name="code"/> is not
            a valid CIL method body.
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="code">All code</param>
            <param name="exceptions">Exceptions or <c>null</c> if all exception handlers are in
            <paramref name="code"/></param>
            <param name="parameters">Method parameters</param>
            <param name="flags">Method header flags, eg. 2 if tiny method</param>
            <param name="maxStack">Max stack</param>
            <param name="codeSize">Code size</param>
            <param name="localVarSigTok">Local variable signature token or 0 if none</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="context">The module context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Constructor
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="method">Use parameters from this method</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="method">Use parameters from this method</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Constructor
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="reader">A reader positioned at the start of a .NET method body</param>
            <param name="parameters">Method parameters</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Nullable{Datadog.Trace.Vendors.dnlib.IO.DataReader},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Constructor
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="codeReader">A reader positioned at the start of a .NET method body</param>
            <param name="ehReader">Exception handler reader or <c>null</c> if exceptions aren't
            present or if <paramref name="codeReader"/> contains the exception handlers</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Nullable{Datadog.Trace.Vendors.dnlib.IO.DataReader},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="codeReader">A reader positioned at the start of a .NET method body</param>
            <param name="ehReader">Exception handler reader or <c>null</c> if exceptions aren't
            present or if <paramref name="codeReader"/> contains the exception handlers</param>
            <param name="parameters">Method parameters</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.IInstructionOperandResolver,Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Nullable{Datadog.Trace.Vendors.dnlib.IO.DataReader},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Constructor
            </summary>
            <param name="opResolver">The operand resolver</param>
            <param name="codeReader">A reader positioned at the start of a .NET method body</param>
            <param name="ehReader">Exception handler reader or <c>null</c> if exceptions aren't
            present or if <paramref name="codeReader"/> contains the exception handlers</param>
            <param name="parameters">Method parameters</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="context">Module context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.SetHeader(System.UInt16,System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Initializes the method header
            </summary>
            <param name="flags">Header flags, eg. 2 if it's a tiny method</param>
            <param name="maxStack">Max stack</param>
            <param name="codeSize">Code size</param>
            <param name="localVarSigTok">Local variable signature token</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.Read">
            <summary>
            Reads the method body header, locals, all instructions, and the exception handlers (if any)
            </summary>
            <returns><c>true</c> if it worked, and <c>false</c> if something failed</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadHeader">
            <summary>
            Reads the method header
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadLocals">
            <summary>
            Reads the locals
            </summary>
            <returns>All locals or <c>null</c> if there are none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadInstructions">
            <summary>
            Reads all instructions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadInlineField(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadInlineMethod(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadInlineSig(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadInlineString(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadInlineTok(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadInlineType(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.ReadExceptionHandlers(System.UInt32@)">
            <summary>
            Reads all exception handlers
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.CreateCilBody">
            <summary>
            Creates a CIL body. Must be called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReader.Read"/>, and can only be
            called once.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody"/> instance</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase">
            <summary>
            Method body reader base class
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.reader">
            <summary>The method reader</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.parameters">
            <summary>All parameters</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.locals">
            <summary>All locals</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.instructions">
            <summary>All instructions</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.exceptionHandlers">
            <summary>All exception handlers</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.codeEndOffs">
            <summary>First byte after the end of the code</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.codeStartOffs">
            <summary>Start offset of method</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.Parameters">
            <summary>
            Gets all parameters
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.Locals">
            <summary>
            Gets all locals
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.Instructions">
            <summary>
            Gets all instructions
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ExceptionHandlers">
            <summary>
            Gets all exception handlers
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Constructor
            </summary>
            <param name="context">The module context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Constructor
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Constructor
            </summary>
            <param name="reader">The reader</param>
            <param name="parameters">Method parameters or <c>null</c> if they're not known yet</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Constructor
            </summary>
            <param name="reader">The reader</param>
            <param name="parameters">Method parameters or <c>null</c> if they're not known yet</param>
            <param name="context">The module context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.SetLocals(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Sets new locals
            </summary>
            <param name="newLocals">A list of types of all locals or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.SetLocals(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local})">
            <summary>
            Sets new locals
            </summary>
            <param name="newLocals">A list of types of all locals or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInstructions(System.Int32)">
            <summary>
            Reads all instructions
            </summary>
            <param name="numInstrs">Number of instructions to read</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInstructionsNumBytes(System.UInt32)">
            <summary>
            Reads all instructions
            </summary>
            <param name="codeSize">Size of code</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.FixBranches">
            <summary>
            Fixes all branch instructions so their operands are set to an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/>
            instead of an offset.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.GetInstruction(System.UInt32)">
            <summary>
            Finds an instruction
            </summary>
            <param name="offset">Offset of instruction</param>
            <returns>The instruction or <c>null</c> if there's no instruction at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.GetInstructionThrow(System.UInt32)">
            <summary>
            Finds an instruction and throws if it's not present
            </summary>
            <param name="offset">Offset of instruction</param>
            <returns>The instruction</returns>
            <exception cref="T:System.InvalidOperationException">There's no instruction at
            <paramref name="offset"/></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadOneInstruction">
            <summary>
            Reads the next instruction
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadOpCode">
            <summary>
            Reads the next OpCode from the current position
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadOperand(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads the instruction operand (if any)
            </summary>
            <param name="instr">The instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineBrTarget(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineBrTarget"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineField(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineField"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineI(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineI"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineI8(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineI8"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineMethod(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineMethod"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineNone(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineNone"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlinePhi(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlinePhi"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineR(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineR"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineSig(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineSig"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineString(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineString"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineSwitch(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineSwitch"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineTok(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineTok"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineType(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineType"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineVar(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineVar"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineVarArg(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineVar"/> (a parameter) operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadInlineVarLocal(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineVar"/> (a local) operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadShortInlineBrTarget(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineBrTarget"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadShortInlineI(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineI"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadShortInlineR(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineR"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadShortInlineVar(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineVar"/> operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadShortInlineVarArg(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineVar"/> (a parameter) operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.ReadShortInlineVarLocal(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Reads a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineVar"/> (a local) operand
            </summary>
            <param name="instr">The current instruction</param>
            <returns>The operand</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.IsArgOperandInstruction(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Returns <c>true</c> if it's one of the ldarg/starg instructions that have an operand
            </summary>
            <param name="instr">The instruction to check</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.GetParameter(System.Int32)">
            <summary>
            Returns a parameter
            </summary>
            <param name="index">A parameter index</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Parameter"/> or <c>null</c> if <paramref name="index"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.GetLocal(System.Int32)">
            <summary>
            Returns a local
            </summary>
            <param name="index">A local index</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local"/> or <c>null</c> if <paramref name="index"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.Add(Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler)">
            <summary>
            Add an exception handler if it appears valid
            </summary>
            <param name="eh">The exception handler</param>
            <returns><c>true</c> if it was added, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.GetOffset(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Gets the offset of an instruction
            </summary>
            <param name="instr">The instruction or <c>null</c> if the offset is the first offset
            at the end of the method.</param>
            <returns>The instruction offset</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBodyReaderBase.RestoreMethod(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Restores a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>'s body with the parsed method instructions
            and exception handlers
            </summary>
            <param name="method">The method that gets updated with the instructions, locals, and
            exception handlers.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodTableToTypeConverter">
            <summary>
            Converts a type address to a <see cref="T:System.Type"/>. The address can be found in
            <c>RuntimeTypeHandle.Value</c> and it's the same address you use with the WinDbg SOS command
            !dumpmt.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodTableToTypeConverter.Convert(System.IntPtr)">
            <summary>
            Converts <paramref name="address"/> to a <see cref="T:System.Type"/>.
            </summary>
            <param name="address">Address of type</param>
            <returns>The <see cref="T:System.Type"/> or <c>null</c></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodUtils">
            <summary>
            Instruction utility methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodUtils.SimplifyMacros(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter})">
            <summary>
            Shorter instructions are converted to the longer form, eg. <c>Ldc_I4_1</c> is
            converted to <c>Ldc_I4</c> with a <c>1</c> as the operand.
            </summary>
            <param name="instructions">All instructions</param>
            <param name="locals">All locals</param>
            <param name="parameters">All method parameters, including the hidden 'this' parameter
            if it's an instance method. Use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Parameters"/>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodUtils.OptimizeMacros(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction})">
            <summary>
            Optimizes instructions by using the shorter form if possible. Eg. <c>Ldc_I4</c> <c>1</c>
            will be replaced with <c>Ldc_I4_1</c>.
            </summary>
            <param name="instructions">All instructions</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodUtils.SimplifyBranches(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction})">
            <summary>
            Short branch instructions are converted to the long form, eg. <c>Beq_S</c> is
            converted to <c>Beq</c>.
            </summary>
            <param name="instructions">All instructions</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodUtils.OptimizeBranches(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction})">
            <summary>
            Optimizes branches by using the smallest possible branch
            </summary>
            <param name="instructions">All instructions</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodUtils.UpdateInstructionOffsets(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction})">
            <summary>
            Updates each instruction's offset
            </summary>
            <param name="instructions">All instructions</param>
            <returns>Total size in bytes of all instructions</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode">
            <summary>
            A CIL opcode
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.Name">
            <summary>
            The opcode name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.Code">
            <summary>
            The opcode as a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.Code"/> enum
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.OperandType">
            <summary>
            Operand type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.FlowControl">
            <summary>
            Flow control info
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.OpCodeType">
            <summary>
            Opcode type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.StackBehaviourPush">
            <summary>
            Push stack behavior
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.StackBehaviourPop">
            <summary>
            Pop stack behavior
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.Value">
            <summary>
            Gets the value which is compatible with <see cref="P:System.Reflection.Emit.OpCode.Value"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.Size">
            <summary>
            Gets the size of the opcode. It's either 1 or 2 bytes.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.#ctor(System.String,System.Byte,System.Byte,Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType,Datadog.Trace.Vendors.dnlib.DotNet.Emit.FlowControl,Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour,Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour)">
            <summary>
            Constructs an experimental opcode.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction">
            <summary>
            Creates a new instruction with no operand
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(System.Byte)">
            <summary>
            Creates a new instruction with a <see cref="T:System.Byte"/> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(System.SByte)">
            <summary>
            Creates a new instruction with a <see cref="T:System.SByte"/> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(System.Int32)">
            <summary>
            Creates a new instruction with an <see cref="T:System.Int32"/> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(System.Int64)">
            <summary>
            Creates a new instruction with a <see cref="T:System.Int64"/> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(System.Single)">
            <summary>
            Creates a new instruction with a <see cref="T:System.Single"/> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(System.Double)">
            <summary>
            Creates a new instruction with a <see cref="T:System.Double"/> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(System.String)">
            <summary>
            Creates a new instruction with a string operand
            </summary>
            <param name="s">The string</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Creates a new instruction with an instruction target operand
            </summary>
            <param name="target">Target instruction</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction})">
            <summary>
            Creates a new instruction with an instruction target list operand
            </summary>
            <param name="targets">The targets</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Creates a new instruction with a type operand
            </summary>
            <param name="type">The type</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig)">
            <summary>
            Creates a new instruction with a type operand
            </summary>
            <param name="type">The type</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Creates a new instruction with a method/field operand
            </summary>
            <param name="mr">The method/field</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Creates a new instruction with a field operand
            </summary>
            <param name="field">The field</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Creates a new instruction with a method operand
            </summary>
            <param name="method">The method</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.ITokenOperand)">
            <summary>
            Creates a new instruction with a token operand
            </summary>
            <param name="token">The token</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Creates a new instruction with a method signature operand
            </summary>
            <param name="methodSig">The method signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.Parameter)">
            <summary>
            Creates a new instruction with a method parameter operand
            </summary>
            <param name="parameter">The method parameter</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToInstruction(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local)">
            <summary>
            Creates a new instruction with a method local operand
            </summary>
            <param name="local">The method local</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodes">
            <summary>
            Contains all valid CIL opcodes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodes.OneByteOpCodes">
            <summary>
            All one-byte opcodes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodes.TwoByteOpCodes">
            <summary>
            All two-byte opcodes (first byte is <c>0xFE</c>)
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodeType">
            <summary>
            CIL opcode type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodeType.Annotation">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodeType.Macro">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodeType.Nternal">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodeType.Objmodel">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodeType.Prefix">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodeType.Primitive">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCodeType.Experimental">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType">
            <summary>
            CIL opcode operand type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineBrTarget">
            <summary>4-byte relative instruction offset</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineField">
            <summary>4-byte field token (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Field"/> or <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MemberRef"/>)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineI">
            <summary>int32</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineI8">
            <summary>int64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineMethod">
            <summary>4-byte method token (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Method"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MemberRef"/>
            or <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MethodSpec"/>)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineNone">
            <summary>No operand</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlinePhi">
            <summary>Never used</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineR">
            <summary>64-bit real</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.NOT_USED_8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineSig">
            <summary>4-byte method sig token (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.StandAloneSig"/>)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineString">
            <summary>4-byte string token (<c>0x70xxxxxx</c>)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineSwitch">
            <summary>4-byte count N followed by N 4-byte relative instruction offsets</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineTok">
            <summary>4-byte token (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Field"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MemberRef"/>,
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Method"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MethodSpec"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeDef"/>,
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeRef"/> or <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeSpec"/>)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineType">
            <summary>4-byte type token (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeDef"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeRef"/> or
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeSpec"/>)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineVar">
            <summary>2-byte param/local index</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineBrTarget">
            <summary>1-byte relative instruction offset</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineI">
            <summary>1-byte sbyte (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Code.Ldc_I4_S"/>) or byte (the rest)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineR">
            <summary>32-bit real</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineVar">
            <summary>1-byte param/local index</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour">
            <summary>
            CIL opcode stack behavior
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Pop0">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Pop1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Pop1_pop1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popi">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popi_pop1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popi_popi">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popi_popi8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popi_popi_popi">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popi_popr4">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popi_popr8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref_pop1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref_popi">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref_popi_popi">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref_popi_popi8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref_popi_popr4">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref_popi_popr8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref_popi_popref">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Push0">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Push1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Push1_push1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Pushi">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Pushi8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Pushr4">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Pushr8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Pushref">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Varpop">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Varpush">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.Popref_popi_pop1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.StackBehaviour.PopAll">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.EventAttributes">
            <summary>
            Event attributes, see CorHdr.h/CorEventAttr
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventAttributes.SpecialName">
            <summary>event is special.  Name describes how.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventAttributes.RTSpecialName">
            <summary>Runtime(metadata internal APIs) should check name encoding.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef">
            <summary>
            A high-level representation of a row in the Event table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.HasSemanticTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.Attributes">
            <summary>
            From column Event.EventFlags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.attributes">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.Name">
            <summary>
            From column Event.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.EventType">
            <summary>
            From column Event.EventType
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.eventType">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.AddMethod">
            <summary>
            Gets/sets the adder method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.InvokeMethod">
            <summary>
            Gets/sets the invoker method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.RemoveMethod">
            <summary>
            Gets/sets the remover method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.OtherMethods">
            <summary>
            Gets the other methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.InitializeEventMethods_NoLock">
            <summary>
            Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.otherMethods"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.addMethod"/>,
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.invokeMethod"/> and <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.removeMethod"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.addMethod">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.invokeMethod">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.removeMethod">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.otherMethods">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.ResetMethods">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.AddMethod"/>, <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.InvokeMethod"/>, <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.RemoveMethod"/>, <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.OtherMethods"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.IsEmpty">
            <summary>
            <c>true</c> if there are no methods attached to this event
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.HasOtherMethods">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.OtherMethods"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.DeclaringType">
            <summary>
            Gets/sets the declaring type (owner type)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.Datadog#Trace#Vendors#dnlib#DotNet#IMemberRef#DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.DeclaringType2">
            <summary>
            Called by <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.DeclaringType"/> and should normally not be called by any user
            code. Use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.DeclaringType"/> instead. Only call this if you must set the
            declaring type without inserting it in the declaring type's method list.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.declaringType2">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.FullName">
            <summary>
            Gets the full name of the event
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.EventAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.IsSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventAttributes.SpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.IsRuntimeSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.EventAttributes.RTSpecialName"/> bit
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDefUser">
            <summary>
            An Event row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="type">Type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.EventAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="type">Type</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD">
            <summary>
            Created from a row in the Event table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>Event</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD.InitializeEventMethods_NoLock">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType">
            <summary>
            A high-level representation of a row in the ExportedType table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.module">
            <summary>
            The owner module
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ImplementationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsValueType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsPrimitive">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Datadog#Trace#Vendors#dnlib#DotNet#IType#TypeName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Name">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ReflectionName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Namespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ReflectionNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ReflectionFullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.AssemblyQualifiedName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.DefinitionAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Scope">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ScopeType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ContainsGenericParameter">
            <summary>
            Always returns <c>false</c> since a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/> does not contain any
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Datadog#Trace#Vendors#dnlib#DotNet#IIsTypeOrMethod#IsMethod">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Datadog#Trace#Vendors#dnlib#DotNet#IIsTypeOrMethod#IsType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Datadog#Trace#Vendors#dnlib#DotNet#IGenericParameterProvider#NumberOfGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Attributes">
            <summary>
            From column ExportedType.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.TypeDefId">
            <summary>
            From column ExportedType.TypeDefId
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.typeDefId">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.TypeName">
            <summary>
            From column ExportedType.TypeName
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.typeName">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.TypeNamespace">
            <summary>
            From column ExportedType.TypeNamespace
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.typeNamespace">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Implementation">
            <summary>
            From column ExportedType.Implementation
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.implementation">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.implementation_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.GetImplementation_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.implementation"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsNested">
            <summary>
            <c>true</c> if it's nested within another <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.DeclaringType">
            <summary>
            Gets the declaring type, if any
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes,Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.attributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Visibility">
            <summary>
            Gets/sets the visibility
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsNotPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NotPublic"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Public"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsNestedPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedPublic"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsNestedPrivate">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedPrivate"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsNestedFamily">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamily"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsNestedAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedAssembly"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsNestedFamilyAndAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamANDAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsNestedFamilyOrAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamORAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Layout">
            <summary>
            Gets/sets the layout
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsAutoLayout">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AutoLayout"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsSequentialLayout">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.SequentialLayout"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsExplicitLayout">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.ExplicitLayout"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsInterface">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Interface"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsClass">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Class"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsAbstract">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Abstract"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsSealed">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Sealed"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.SpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsImport">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Import"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsSerializable">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Serializable"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsWindowsRuntime">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.WindowsRuntime"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.StringFormat">
            <summary>
            Gets/sets the string format
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsAnsiClass">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AnsiClass"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsUnicodeClass">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.UnicodeClass"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsAutoClass">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AutoClass"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsCustomFormatClass">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.CustomFormatClass"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsBeforeFieldInit">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.BeforeFieldInit"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsForwarder">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Forwarder"/> bit. See also <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.MovedToAnotherAssembly"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.IsRuntimeSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.RTSpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.HasSecurity">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.HasSecurity"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.MovedToAnotherAssembly">
            <summary>
            <c>true</c> if this type has been moved to another assembly
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Resolve">
            <summary>
            Resolves the type
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance or <c>null</c> if it couldn't be resolved</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Resolves the type
            </summary>
            <param name="sourceModule">Source module or <c>null</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance or <c>null</c> if it couldn't be resolved</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ResolveThrow">
            <summary>
            Resolves the type
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If the type couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ToTypeRef">
            <summary>
            Converts this instance to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeUser">
            <summary>
            An ExportedType row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes,Datadog.Trace.Vendors.dnlib.DotNet.IImplementation)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="typeDefId">TypeDef ID</param>
            <param name="typeName">Type name</param>
            <param name="typeNamespace">Type namespace</param>
            <param name="flags">Flags</param>
            <param name="implementation">Implementation</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeMD">
            <summary>
            Created from a row in the ExportedType table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeMD.GetImplementation_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ExportedTypeMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>ExportedType</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes">
            <summary>
            Field flags, see CorHdr.h/CorFieldAttr
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.FieldAccessMask">
            <summary>member access mask - Use this mask to retrieve accessibility information.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.PrivateScope">
            <summary>Member not referenceable.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.CompilerControlled">
            <summary>Member not referenceable.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Private">
            <summary>Accessible only by the parent type.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.FamANDAssem">
            <summary>Accessible by sub-types only in this Assembly.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Assembly">
            <summary>Accessibly by anyone in the Assembly.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Family">
            <summary>Accessible only by type and sub-types.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.FamORAssem">
            <summary>Accessibly by sub-types anywhere, plus anyone in assembly.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Public">
            <summary>Accessibly by anyone who has visibility to this scope.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Static">
            <summary>Defined on type, else per instance.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.InitOnly">
            <summary>Field may only be initialized, not written to after init.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Literal">
            <summary>Value is compile time constant.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.NotSerialized">
            <summary>Field does not have to be serialized when type is remoted.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.SpecialName">
            <summary>field is special.  Name describes how.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.PinvokeImpl">
            <summary>Implementation is forwarded through pinvoke.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.RTSpecialName">
            <summary>Runtime(metadata internal APIs) should check name encoding.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.HasFieldMarshal">
            <summary>Field has marshalling information.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.HasDefault">
            <summary>Field has default.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.HasFieldRVA">
            <summary>Field has RVA.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef">
            <summary>
            A high-level representation of a row in the Field table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasConstantTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasFieldMarshalTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.MemberForwardedTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Attributes">
            <summary>
            From column Field.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Name">
            <summary>
            From column Field.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Signature">
            <summary>
            From column Field.Signature
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.signature">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.FieldOffset">
            <summary>
            Gets/sets the field layout offset
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.fieldOffset">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.fieldOffset_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetFieldOffset_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.fieldOffset"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.MarshalType">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.marshalType">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.marshalType_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetMarshalType_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.marshalType"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ResetMarshalType">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.MarshalType"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.RVA">
            <summary>
            Gets/sets the field RVA
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.rva">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.rva_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetRVA_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.rva"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ResetRVA">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.RVA"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.InitialValue">
            <summary>
            Gets/sets the initial value. Be sure to set <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasFieldRVA"/> to <c>true</c> if
            you write to this field.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.initialValue">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.initialValue_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetInitialValue_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.initialValue"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ResetInitialValue">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.InitialValue"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ImplMap">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.implMap">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.implMap_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetImplMap_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.implMap"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Constant">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.constant">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.constant_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetConstant_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.constant"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ResetConstant">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Constant"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasImplMap">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.DeclaringType">
            <summary>
            Gets/sets the declaring type (owner type)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Datadog#Trace#Vendors#dnlib#DotNet#IMemberRef#DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.DeclaringType2">
            <summary>
            Called by <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.DeclaringType"/> and should normally not be called by any user
            code. Use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.DeclaringType"/> instead. Only call this if you must set the
            declaring type without inserting it in the declaring type's method list.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.declaringType2">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.FieldSig">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.FieldSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasLayoutInfo">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.FieldOffset"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasConstant">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Constant"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ElementType">
            <summary>
            Gets the constant element type or <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.End"/> if there's no constant
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasMarshalType">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.MarshalType"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.FieldType">
            <summary>
            Gets/sets the field type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes,Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.attributes"/> field: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.Access">
            <summary>
            Gets/sets the field access
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsCompilerControlled">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.PrivateScope"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsPrivateScope">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.PrivateScope"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsPrivate">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Private"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsFamilyAndAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.FamANDAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Assembly"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsFamily">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Family"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsFamilyOrAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.FamORAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Public"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsStatic">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Static"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsInitOnly">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.InitOnly"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsLiteral">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.Literal"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsNotSerialized">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.NotSerialized"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.SpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsPinvokeImpl">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.PinvokeImpl"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.IsRuntimeSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.RTSpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasFieldMarshal">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.HasFieldMarshal"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasDefault">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.HasDefault"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.HasFieldRVA">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.HasFieldRVA"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.FullName">
            <summary>
            Returns the full name of this field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetFieldSize">
            <summary>
            Gets the size of this field in bytes or <c>0</c> if unknown.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetFieldSize(System.UInt32@)">
            <summary>
            Gets the size of this field in bytes or <c>0</c> if unknown.
            </summary>
            <param name="size">Updated with size</param>
            <returns><c>true</c> if <paramref name="size"/> is valid, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetFieldSize(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,System.UInt32@)">
            <summary>
            Gets the size of this field in bytes or <c>0</c> if unknown.
            </summary>
            <param name="declaringType">The declaring type of <c>this</c></param>
            <param name="fieldSig">The field signature of <c>this</c></param>
            <param name="size">Updated with size</param>
            <returns><c>true</c> if <paramref name="size"/> is valid, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.GetFieldSize(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,System.Int32,System.UInt32@)">
            <summary>
            Gets the size of this field in bytes or <c>0</c> if unknown.
            </summary>
            <param name="declaringType">The declaring type of <c>this</c></param>
            <param name="fieldSig">The field signature of <c>this</c></param>
            <param name="ptrSize">Size of a pointer</param>
            <param name="size">Updated with size</param>
            <returns><c>true</c> if <paramref name="size"/> is valid, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefUser">
            <summary>
            A Field row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="signature">Signature</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="signature">Signature</param>
            <param name="attributes">Flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD">
            <summary>
            Created from a row in the Field table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.GetFieldOffset_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.GetMarshalType_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.GetRVA_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.GetInitialValue_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.GetImplMap_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.GetConstant_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>Field</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FileAttributes">
            <summary>
            File row flags. See CorHdr.h/CorFileFlags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileAttributes.ContainsMetadata">
            <summary>This is not a resource file</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileAttributes.ContainsNoMetadata">
            <summary>This is a resource file or other non-metadata-containing file</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FileDef">
            <summary>
            A high-level representation of a row in the File table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.ImplementationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.Flags">
            <summary>
            From column File.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.Name">
            <summary>
            From column File.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.HashValue">
            <summary>
            From column File.HashValue
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.hashValue">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.customDebugInfos"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.FileAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.ContainsMetadata">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FileAttributes.ContainsMetadata"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.ContainsNoMetadata">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FileAttributes.ContainsNoMetadata"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.FullName">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FileDefUser">
            <summary>
            A File row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FileAttributes,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of file</param>
            <param name="flags">Flags</param>
            <param name="hashValue">File hash</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FileDefMD">
            <summary>
            Created from a row in the File table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FileDefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FileDefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FileDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>File</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FrameworkRedirect">
            <summary>
            Redirects .NET framework assembly references from older to newer versions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FrameworkRedirect.ApplyFrameworkRedirect(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly@,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Redirects a .NET Framework assembly from an older version to the correct version
            loaded at runtime.
            </summary>
            <param name="assembly">Current assembly reference that might get updated</param>
            <param name="sourceModule">Module using the assembly reference</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FrameworkRedirect.TryApplyFrameworkRedirect(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly@)">
            <summary>
            Tries to redirect a .NET Framework assembly from an older version to the correct version
            loaded at runtime.
            </summary>
            <param name="assembly">Assembly reference</param>
            <param name="sourceModule">Module using the assembly reference</param>
            <param name="redirectedAssembly">Updated with the redirected assembly if successful</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FrameworkRedirect.ApplyFrameworkRedirectV2(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly@)">
            <summary>
            Redirects a .NET Framework 2.0-3.5 assembly from an older version to the correct version
            loaded at runtime.
            </summary>
            <param name="assembly">Current assembly reference that might get updated</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FrameworkRedirect.ApplyFrameworkRedirectV4(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly@)">
            <summary>
            Redirects a .NET Framework 4.0+ assembly from an older version to the correct version
            loaded at runtime.
            </summary>
            <param name="assembly">Current assembly reference that might get updated</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FrameworkRedirect.TryApplyFrameworkRedirectV2(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly@)">
            <summary>
            Tries to redirect a .NET Framework 2.0-3.5 assembly from an older version to the correct version
            loaded at runtime.
            </summary>
            <param name="assembly">Assembly reference</param>
            <param name="redirectedAssembly">Updated with the redirected assembly if successful</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FrameworkRedirect.TryApplyFrameworkRedirectV4(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly@)">
            <summary>
            Tries to redirect a .NET Framework 4.0+ assembly from an older version to the correct version
            loaded at runtime.
            </summary>
            <param name="assembly">Assembly reference</param>
            <param name="redirectedAssembly">Updated with the redirected assembly if successful</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper">
            <summary>
            Helps <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory"/> create a name
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper.MustUseAssemblyName(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Checks whether the assembly name should be included when printing
            the full type name. The assembly name isn't required in custom attributes
            when the type already exists in the same module as the CA, or if the type
            exists in mscorlib.
            </summary>
            <param name="type">The type (<c>TypeDef</c>, <c>TypeRef</c> or <c>ExportedType</c>)
            or <c>null</c></param>
            <returns><c>true</c> if the assembly name must be included, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory">
            <summary>
            Creates type names, method names, etc.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.MustUseAssemblyName(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Checks whether the assembly name should be included when printing the full name.
            See <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper.MustUseAssemblyName(Datadog.Trace.Vendors.dnlib.DotNet.IType)"/> for more info.
            </summary>
            <param name="module">Owner module</param>
            <param name="type">The type (<c>TypeDef</c>, <c>TypeRef</c> or <c>ExportedType</c>)
            or <c>null</c></param>
            <returns><c>true</c> if the assembly name must be included, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.MustUseAssemblyName(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.IType,System.Boolean)">
            <summary>
            Checks whether the assembly name should be included when printing the full name.
            See <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper.MustUseAssemblyName(Datadog.Trace.Vendors.dnlib.DotNet.IType)"/> for more info.
            </summary>
            <param name="module">Owner module</param>
            <param name="type">The type (<c>TypeDef</c>, <c>TypeRef</c> or <c>ExportedType</c>)
            or <c>null</c></param>
            <param name="allowCorlib">If false, don't add an assembly name if it's a type in <paramref name="module"/>,
            if true, don't add an assembly name if it's a type in <paramref name="module"/> or the corlib.</param>
            <returns><c>true</c> if the assembly name must be included, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullName(Datadog.Trace.Vendors.dnlib.DotNet.IType,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullNameSB(Datadog.Trace.Vendors.dnlib.DotNet.IType,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Name(Datadog.Trace.Vendors.dnlib.DotNet.IType,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NameSB(Datadog.Trace.Vendors.dnlib.DotNet.IType,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Namespace(Datadog.Trace.Vendors.dnlib.DotNet.IType,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NamespaceSB(Datadog.Trace.Vendors.dnlib.DotNet.IType,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedName(Datadog.Trace.Vendors.dnlib.DotNet.IType,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The <c>IType</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedNameSB(Datadog.Trace.Vendors.dnlib.DotNet.IType,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The <c>IType</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.PropertyFullName(System.String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Text.StringBuilder)">
            <summary>
            Returns the full name of a property
            </summary>
            <param name="declaringType">Declaring type full name or <c>null</c> if none</param>
            <param name="name">Name of property</param>
            <param name="propertySig">Property signature</param>
            <param name="typeGenArgs">Type generic arguments or <c>null</c> if none</param>
            <param name="sb">String builder to use or null</param>
            <returns>Property full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.PropertyFullNameSB(System.String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Text.StringBuilder)">
            <summary>
            Returns the full name of a property
            </summary>
            <param name="declaringType">Declaring type full name or <c>null</c> if none</param>
            <param name="name">Name of property</param>
            <param name="propertySig">Property signature</param>
            <param name="typeGenArgs">Type generic arguments or <c>null</c> if none</param>
            <param name="sb">String builder to use or null</param>
            <returns>Property full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.EventFullName(System.String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Text.StringBuilder)">
            <summary>
            Returns the full name of a property
            </summary>
            <param name="declaringType">Declaring type full name or <c>null</c> if none</param>
            <param name="name">Name of property</param>
            <param name="typeDefOrRef">Event type</param>
            <param name="typeGenArgs">Type generic arguments or <c>null</c> if none</param>
            <param name="sb">String builder to use or null</param>
            <returns>Property full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.EventFullNameSB(System.String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Text.StringBuilder)">
            <summary>
            Returns the full name of a property
            </summary>
            <param name="declaringType">Declaring type full name or <c>null</c> if none</param>
            <param name="name">Name of property</param>
            <param name="typeDefOrRef">Event type</param>
            <param name="typeGenArgs">Type generic arguments or <c>null</c> if none</param>
            <param name="sb">String builder to use or null</param>
            <returns>Property full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FieldFullName(System.String,System.String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Text.StringBuilder)">
            <summary>
            Returns the full name of a field
            </summary>
            <param name="declaringType">Declaring type full name or <c>null</c> if none</param>
            <param name="name">Name of field</param>
            <param name="fieldSig">Field signature</param>
            <param name="typeGenArgs">Type generic arguments or <c>null</c> if none</param>
            <param name="sb">String builder to use or null</param>
            <returns>Field full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FieldFullNameSB(System.String,System.String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Text.StringBuilder)">
            <summary>
            Returns the full name of a field
            </summary>
            <param name="declaringType">Declaring type full name or <c>null</c> if none</param>
            <param name="name">Name of field</param>
            <param name="fieldSig">Field signature</param>
            <param name="typeGenArgs">Type generic arguments or <c>null</c> if none</param>
            <param name="sb">String builder to use or null</param>
            <returns>Field full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.MethodFullName(System.String,System.String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a method
            </summary>
            <param name="declaringType">Declaring type full name or <c>null</c> if none</param>
            <param name="name">Name of method or <c>null</c> if none</param>
            <param name="methodSig">Method signature</param>
            <param name="typeGenArgs">Type generic arguments or <c>null</c> if none</param>
            <param name="methodGenArgs">Method generic arguments or <c>null</c> if none</param>
            <param name="gppMethod">Generic parameter owner method or <c>null</c></param>
            <param name="sb">String builder to use or null</param>
            <returns>Method full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.MethodFullNameSB(System.String,System.String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a method
            </summary>
            <param name="declaringType">Declaring type full name or <c>null</c> if none</param>
            <param name="name">Name of method or <c>null</c> if none</param>
            <param name="methodSig">Method signature</param>
            <param name="typeGenArgs">Type generic arguments or <c>null</c> if none</param>
            <param name="methodGenArgs">Method generic arguments or <c>null</c> if none</param>
            <param name="gppMethod">Generic parameter owner method or <c>null</c></param>
            <param name="sb">String builder to use or null</param>
            <returns>Method full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.MethodBaseSigFullName(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a property sig
            </summary>
            <param name="sig">Property sig</param>
            <param name="sb">String builder to use or null</param>
            <returns>Property sig full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.MethodBaseSigFullNameSB(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a property sig
            </summary>
            <param name="sig">Property sig</param>
            <param name="sb">String builder to use or null</param>
            <returns>Property sig full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.MethodBaseSigFullName(System.String,System.String,Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a sig
            </summary>
            <param name="declType">Declaring type or null</param>
            <param name="name">Name or null</param>
            <param name="sig">Method sig</param>
            <param name="gppMethod">Owner method or null</param>
            <param name="sb">String builder to use or null</param>
            <returns>Sig full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.MethodBaseSigFullNameSB(System.String,System.String,Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a sig
            </summary>
            <param name="declType">Declaring type or null</param>
            <param name="name">Name or null</param>
            <param name="sig">Method sig</param>
            <param name="gppMethod">Owner method or null</param>
            <param name="sb">String builder to use or null</param>
            <returns>Sig full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Namespace(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NamespaceSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Name(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullName(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullNameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedName(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedNameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.DefinitionAssembly(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Returns the assembly where this type is defined
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Scope(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Gets the scope
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IScope"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.OwnerModule(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Returns the owner module. The type was created from metadata in this module.
            </summary>
            <param name="typeRef">The <c>TypeRef</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Namespace(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NamespaceSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Name(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullName(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullNameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedName(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedNameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.DefinitionAssembly(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Returns the assembly where this type is defined
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.OwnerModule(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Returns the owner module. The type was created from metadata in this module.
            </summary>
            <param name="typeDef">The <c>TypeDef</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Namespace(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NamespaceSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Name(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullName(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullNameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedName(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedNameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.DefinitionAssembly(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Returns the assembly where this type is defined
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.ScopeType(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Gets the scope type
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <returns>The scope type or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Scope(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Gets the scope
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IScope"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.OwnerModule(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Returns the owner module. The type was created from metadata in this module.
            </summary>
            <param name="typeSpec">The <c>TypeSpec</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Namespace(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="typeSig">The type sig</param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NamespaceSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="typeSig">The type sig</param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Name(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="typeSig">The type sig</param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="typeSig">The type sig</param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullName(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="typeSig">The type sig</param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="typeGenArgs">Type generic args or <c>null</c> if none</param>
            <param name="methodGenArgs">Method generic args or <c>null</c> if none</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullNameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="typeSig">The type sig</param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="typeGenArgs">Type generic args or <c>null</c> if none</param>
            <param name="methodGenArgs">Method generic args or <c>null</c> if none</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedName(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="typeSig">The <c>TypeSig</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedNameSB(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="typeSig">The <c>TypeSig</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.DefinitionAssembly(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns the assembly where this type is defined
            </summary>
            <param name="typeSig">The <c>TypeSig</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Scope(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the scope
            </summary>
            <param name="typeSig">The <c>TypeSig</c></param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IScope"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.ScopeType(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the scope type
            </summary>
            <param name="typeSig">The <c>TypeSig</c></param>
            <returns>The scope type or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.OwnerModule(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Returns the owner module. The type was created from metadata in this module.
            </summary>
            <param name="typeSig">The <c>TypeSig</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Namespace(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NamespaceSB(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the namespace of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Name(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.NameSB(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Returns the name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="sb">String builder to use or null</param>
            <returns>The name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullName(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.FullNameSB(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <param name="isReflection">Set if output should be compatible with reflection</param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedName(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.AssemblyQualifiedNameSB(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.IFullNameFactoryHelper,System.Text.StringBuilder)">
            <summary>
            Returns the assembly qualified full name of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <param name="helper">Helps print the name</param>
            <param name="sb">String builder to use or null</param>
            <returns>The assembly qualified full name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.DefinitionAssembly(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Returns the assembly where this type is defined
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.ScopeType(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Gets the scope type
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <returns>The scope type or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.Scope(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Gets the scope
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IScope"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.OwnerModule(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Returns the owner module. The type was created from metadata in this module.
            </summary>
            <param name="exportedType">The <c>ExportedType</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FullNameFactory.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArgumentsStack.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="isTypeVar"><c>true</c> if it's for generic types, <c>false</c> if generic methods</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArgumentsStack.Push(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Pushes generic arguments
            </summary>
            <param name="args">The generic arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArgumentsStack.Pop">
            <summary>
            Pops generic arguments
            </summary>
            <returns>The popped generic arguments</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArgumentsStack.Resolve(System.UInt32)">
            <summary>
            Resolves a generic argument
            </summary>
            <param name="number">Generic variable number</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> or <c>null</c> if none was found</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericArguments">
            <summary>
            Replaces generic type/method var with its generic argument
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArguments.PushTypeArgs(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Pushes generic arguments
            </summary>
            <param name="typeArgs">The generic arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArguments.PopTypeArgs">
            <summary>
            Pops generic arguments
            </summary>
            <returns>The popped generic arguments</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArguments.PushMethodArgs(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Pushes generic arguments
            </summary>
            <param name="methodArgs">The generic arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArguments.PopMethodArgs">
            <summary>
            Pops generic arguments
            </summary>
            <returns>The popped generic arguments</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericArguments.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Replaces a generic type/method var with its generic argument (if any). If
            <paramref name="typeSig"/> isn't a generic type/method var or if it can't
            be resolved, it itself is returned. Else the resolved type is returned.
            </summary>
            <param name="typeSig">Type signature</param>
            <returns>New <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> which is never <c>null</c> unless
            <paramref name="typeSig"/> is <c>null</c></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam">
            <summary>
            A high-level representation of a row in the GenericParam table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Owner">
            <summary>
            Gets the owner type/method
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.owner">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.DeclaringType">
            <summary>
            Gets the declaring type or <c>null</c> if none or if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Owner"/> is
            not a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Datadog#Trace#Vendors#dnlib#DotNet#IMemberRef#DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.DeclaringMethod">
            <summary>
            Gets the declaring method or <c>null</c> if none or if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Owner"/> is
            not a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Number">
            <summary>
            From column GenericParam.Number
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.number">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Flags">
            <summary>
            From column GenericParam.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Name">
            <summary>
            From column GenericParam.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Kind">
            <summary>
            From column GenericParam.Kind (v1.1 only)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.kind">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.GenericParamConstraints">
            <summary>
            Gets the generic param constraints
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.genericParamConstraints">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.InitializeGenericParamConstraints">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.genericParamConstraints"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasGenericParamConstraints">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.GenericParamConstraints"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.FullName">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.attributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Variance">
            <summary>
            Gets/sets variance (non, contra, co)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.IsNonVariant">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.NonVariant"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.IsCovariant">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.Covariant"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.IsContravariant">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.Contravariant"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.SpecialConstraint">
            <summary>
            Gets/sets the special constraint
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasNoSpecialConstraint">
            <summary>
            <c>true</c> if there are no special constraints
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasReferenceTypeConstraint">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.ReferenceTypeConstraint"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasNotNullableValueTypeConstraint">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.NotNullableValueTypeConstraint"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.HasDefaultConstructorConstraint">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.DefaultConstructorConstraint"/> bit
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParamConstraint}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParamConstraint}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParamConstraint}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParamConstraint}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParamConstraint}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamUser">
            <summary>
            A GenericParam row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamUser.#ctor(System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="number">The generic param number</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamUser.#ctor(System.UInt16,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="number">The generic param number</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamUser.#ctor(System.UInt16,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="number">The generic param number</param>
            <param name="flags">Flags</param>
            <param name="name">Name</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD">
            <summary>
            Created from a row in the GenericParam table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD.InitializeGenericParamConstraints">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>GenericParam</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD.OnLazyAdd2(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint@)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes">
            <summary>
            Generic parameter flags. See CorHdr.h/CorGenericParamAttr
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.VarianceMask">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.NonVariant">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.Covariant">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.Contravariant">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.SpecialConstraintMask">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.NoSpecialConstraint">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.ReferenceTypeConstraint">
            <summary>type argument must be a reference type</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.NotNullableValueTypeConstraint">
            <summary>type argument must be a value type but not Nullable</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamAttributes.DefaultConstructorConstraint">
            <summary>type argument must have a public default constructor</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint">
            <summary>
            A high-level representation of a row in the GenericParamConstraint table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.Owner">
            <summary>
            Gets the owner generic param
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.owner">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.Constraint">
            <summary>
            From column GenericParamConstraint.Constraint
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.constraint">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint.customDebugInfos"/></summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintUser">
            <summary>
            A GenericParamConstraintAssembly row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="constraint">The constraint</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD">
            <summary>
            Created from a row in the GenericParamConstraint table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>GenericParamConstraint</c> row</param>
            <param name="rid">Row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext">
            <summary>
            Generic parameter context
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Type">
            <summary>
            Type context
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Method">
            <summary>
            Method context
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.IsEmpty">
            <summary>
            true if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Type"/> and <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Method"/> are both <c>null</c>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Create(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext"/> instance and initializes the
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Type"/> field to <paramref name="method"/>'s <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.DeclaringType"/>
            and the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Method"/> field to <paramref name="method"/>.
            </summary>
            <param name="method">Method</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Create(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext"/> instance and initializes the
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Type"/> field to <paramref name="type"/> and the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Method"/> field
            to <c>null</c>
            </summary>
            <param name="type">Type</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Constructor. The <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Type"/> field is set to <c>null</c> and <c>NOT</c> to
            <paramref name="method"/>'s <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.DeclaringType"/>. Use
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.Create(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)"/> if you want that behavior.
            </summary>
            <param name="method">Method context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type context</param>
            <param name="method">Method context</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver">
            <summary>
            Resolves assemblies
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds and returns an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>
            </summary>
            <param name="assembly">The assembly to find</param>
            <param name="sourceModule">The module that needs to resolve an assembly or <c>null</c></param>
            <returns>An <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance owned by the assembly resolver or
            <c>null</c> if the assembly couldn't be found.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider">
            <summary>
            The table row can be referenced by a MD token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider.MDToken">
            <summary>
            Returns the metadata token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider.Rid">
            <summary>
            Gets/sets the row ID
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProviderMD">
            <summary>
            All <c>*MD</c> classes implement this interface.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProviderMD.OrigRid">
            <summary>
            Gets the original row ID
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly">
            <summary>
            An assembly. Implemented by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> and
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyNameInfo"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.Version">
            <summary>
            The assembly version
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.Attributes">
            <summary>
            Assembly flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.PublicKeyOrToken">
            <summary>
            Public key or public key token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.Culture">
            <summary>
            Locale, aka culture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.FullNameToken">
            <summary>
            Gets the full name of the assembly but use a public key token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.HasPublicKey">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PublicKey"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.ProcessorArchitecture">
            <summary>
            Gets/sets the processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.ProcessorArchitectureFull">
            <summary>
            Gets/sets the processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsProcessorArchitectureNone">
            <summary>
            <c>true</c> if unspecified processor architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsProcessorArchitectureMSIL">
            <summary>
            <c>true</c> if neutral (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsProcessorArchitectureX86">
            <summary>
            <c>true</c> if x86 (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsProcessorArchitectureIA64">
            <summary>
            <c>true</c> if IA-64 (PE32+) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsProcessorArchitectureX64">
            <summary>
            <c>true</c> if x64 (PE32+) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsProcessorArchitectureARM">
            <summary>
            <c>true</c> if ARM (PE32) architecture
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsProcessorArchitectureNoPlatform">
            <summary>
            <c>true</c> if eg. reference assembly (not runnable)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsProcessorArchitectureSpecified">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.PA_Specified"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.EnableJITcompileTracking">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.EnableJITcompileTracking"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.DisableJITcompileOptimizer">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.DisableJITcompileOptimizer"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsRetargetable">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes.Retargetable"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.ContentType">
            <summary>
            Gets/sets the content type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsContentTypeDefault">
            <summary>
            <c>true</c> if content type is <c>Default</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IAssembly.IsContentTypeWindowsRuntime">
            <summary>
            <c>true</c> if content type is <c>WindowsRuntime</c>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IManagedEntryPoint">
            <summary>
            Implemented by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> and <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FileDef"/>, which are the only
            valid managed entry point tokens.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IModule">
            <summary>
            Interface to access a module def/ref
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ScopeType">
            <summary>
            Type of scope
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ScopeType.AssemblyRef">
            <summary>
            It's an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> instance
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ScopeType.ModuleRef">
            <summary>
            It's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef"/> instance
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ScopeType.ModuleDef">
            <summary>
            It's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IScope">
            <summary>
            Implemented by modules and assemblies
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IScope.ScopeType">
            <summary>
            Gets the scope type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IScope.ScopeName">
            <summary>
            Gets the scope name
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IFullName">
            <summary>
            Interface to get the full name of a type, field, or method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IFullName.FullName">
            <summary>
            Gets the full name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IFullName.Name">
            <summary>
            Simple name of implementer
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IOwnerModule">
            <summary>
            Implemented by all member refs and types
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IOwnerModule.Module">
            <summary>
            Gets the owner module
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IIsTypeOrMethod">
            <summary>
            Methods to check whether the implementer is a type or a method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IIsTypeOrMethod.IsType">
            <summary>
            <c>true</c> if it's a type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IIsTypeOrMethod.IsMethod">
            <summary>
            <c>true</c> if it's a method
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef">
            <summary>
            Implemented by types, fields, methods, properties, events
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.DeclaringType">
            <summary>
            Gets the declaring type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsField">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> that's
            referencing a field.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsTypeSpec">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsTypeRef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsTypeDef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsMethodSpec">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsMethodDef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsMemberRef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsFieldDef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsPropertyDef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsEventDef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef.IsGenericParam">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberDef">
            <summary>
            All member definitions implement this interface: <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>,
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/>,
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/>, and <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberDef.DeclaringType">
            <summary>
            Gets the declaring type
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IDnlibDef">
            <summary>
            Implemented by the following classes: <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>,
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/>,
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>,
            and <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IGenericParameterProvider">
            <summary>
            Implemented by types and methods
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IGenericParameterProvider.NumberOfGenericParameters">
            <summary>
            Gets the number of generic parameters / arguments
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IField">
            <summary>
            Implemented by fields (<see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> and <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IField.FieldSig">
            <summary>
            Gets/sets the field signature
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod">
            <summary>
            Implemented by methods (<see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> and <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMethod.MethodSig">
            <summary>
            Method signature
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ITokenOperand">
            <summary>
            Implemented by tables that can be a token in the <c>ldtoken</c> instruction
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ICodedToken">
            <summary>
            The table row can be referenced by a coded token
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef">
            <summary>
            TypeDefOrRef coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef.TypeDefOrRefTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasConstant">
            <summary>
            HasConstant coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasConstant.HasConstantTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasConstant.Constant">
            <summary>
            Gets/sets the constant value
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute">
            <summary>
            HasCustomAttribute coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute.HasCustomAttributeTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute.HasCustomAttributes">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute.CustomAttributes"/> is not empty
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal">
            <summary>
            HasFieldMarshal coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal.HasFieldMarshalTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal.MarshalType">
            <summary>
            Gets/sets the marshal type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal.HasMarshalType">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal.MarshalType"/> is not <c>null</c>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasDeclSecurity">
            <summary>
            HasDeclSecurity coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasDeclSecurity.HasDeclSecurityTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasDeclSecurity.DeclSecurities">
            <summary>
            Gets the permission sets
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasDeclSecurity.HasDeclSecurities">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasDeclSecurity.DeclSecurities"/> is not empty
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent">
            <summary>
            MemberRefParent coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent.MemberRefParentTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasSemantic">
            <summary>
            HasSemantic coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasSemantic.HasSemanticTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef">
            <summary>
            MethodDefOrRef coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef.MethodDefOrRefTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded">
            <summary>
            MemberForwarded coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded.MemberForwardedTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded.ImplMap">
            <summary>
            Gets/sets the impl map
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded.HasImplMap">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded.ImplMap"/> is not <c>null</c>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IImplementation">
            <summary>
            Implementation coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IImplementation.ImplementationTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType">
            <summary>
            CustomAttributeType coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType.CustomAttributeTypeTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IResolutionScope">
            <summary>
            ResolutionScope coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IResolutionScope.ResolutionScopeTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeOrMethodDef">
            <summary>
            TypeOrMethodDef coded token interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ITypeOrMethodDef.TypeOrMethodDefTag">
            <summary>
            The coded token tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ITypeOrMethodDef.GenericParameters">
            <summary>
            Gets the generic parameters
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ITypeOrMethodDef.HasGenericParameters">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ITypeOrMethodDef.GenericParameters"/> is not empty
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomDebugInformation">
            <summary>
            HasCustomDebugInformation interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomDebugInformation.HasCustomDebugInformationTag">
            <summary>
            The custom debug information tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomDebugInformation.CustomDebugInfos">
            <summary>
            Gets the custom debug infos
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomDebugInformation.HasCustomDebugInfos">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomDebugInformation.CustomDebugInfos"/> is not empty
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes">
            <summary>
            Access to .NET core library's simple types
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Void">
            <summary>
            Gets a <c>System.Void</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Boolean">
            <summary>
            Gets a <c>System.Boolean</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Char">
            <summary>
            Gets a <c>System.Char</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.SByte">
            <summary>
            Gets a <c>System.SByte</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Byte">
            <summary>
            Gets a <c>System.Byte</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Int16">
            <summary>
            Gets a <c>System.Int16</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.UInt16">
            <summary>
            Gets a <c>System.UInt16</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Int32">
            <summary>
            Gets a <c>System.Int32</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.UInt32">
            <summary>
            Gets a <c>System.UInt32</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Int64">
            <summary>
            Gets a <c>System.Int64</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.UInt64">
            <summary>
            Gets a <c>System.UInt64</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Single">
            <summary>
            Gets a <c>System.Single</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Double">
            <summary>
            Gets a <c>System.Double</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.String">
            <summary>
            Gets a <c>System.String</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.TypedReference">
            <summary>
            Gets a <c>System.TypedReference</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.IntPtr">
            <summary>
            Gets a <c>System.IntPtr</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.UIntPtr">
            <summary>
            Gets a <c>System.UIntPtr</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.Object">
            <summary>
            Gets a <c>System.Object</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.AssemblyRef">
            <summary>
            Gets the assembly reference to the core library
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes.GetTypeRef(System.String,System.String)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> that references a type in the core library assembly
            </summary>
            <param name="namespace">Namespace of type (eg. "System")</param>
            <param name="name">Name of type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> instance. This instance may be a cached instance.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttribute">
            <summary>
            Custom attribute interface. Implemented by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/> and
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttribute.AttributeType">
            <summary>
            Gets the attribute type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttribute.TypeFullName">
            <summary>
            Gets the full name of the attribute type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttribute.NamedArguments">
            <summary>
            Gets all named arguments (field and property values)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttribute.HasNamedArguments">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttribute.NamedArguments"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttribute.Fields">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/>s that are field arguments
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttribute.Properties">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/>s that are property arguments
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDecrypter">
            <summary>
            Interface to decrypt methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDecrypter.GetMethodBody(System.UInt32,Datadog.Trace.Vendors.dnlib.PE.RVA,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBody@)">
            <summary>
            Gets the method's body
            </summary>
            <param name="rid"><c>Method</c> rid</param>
            <param name="rva">The <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/> found in the method's <c>Method</c> row</param>
            <param name="parameters">The method's parameters</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="methodBody">Updated with the method's <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBody"/> if this
            method returns <c>true</c></param>
            <returns><c>true</c> if the method body was decrypted, <c>false</c> if the method isn't
            encrypted and the default <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> body reader code should be used.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IStringDecrypter">
            <summary>
            Interface to decrypt strings
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.IStringDecrypter.ReadUserString(System.UInt32)">
            <summary>
            Reads a string
            </summary>
            <param name="token">String token</param>
            <returns>A string or <c>null</c> if we should read it from the #US heap</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ILogger"/> events
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent.Error">
            <summary>
            An error was detected. An exception should normally be thrown but the error
            can be ignored.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent.Warning">
            <summary>
            Just a warning and can be ignored.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent.Info">
            <summary>
            A normal message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent.Verbose">
            <summary>
            A verbose message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent.VeryVerbose">
            <summary>
            A very verbose message
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ILogger">
            <summary>
            Simple logger
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ILogger.Log(System.Object,Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent,System.String,System.Object[])">
            <summary>
            Log something
            </summary>
            <param name="sender">Caller or <c>null</c></param>
            <param name="loggerEvent">Logger event</param>
            <param name="format">Format</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ILogger.IgnoresEvent(Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent)">
            <summary>
            <c>true</c> if this event is ignored. If the event is ignored, the caller can
            choose not to call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ILogger.Log(System.Object,Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent,System.String,System.Object[])"/>. This is useful if it can take time to
            prepare the message.
            </summary>
            <param name="loggerEvent">The logger event</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.DummyLogger">
            <summary>
            Dummy logger which ignores all messages, but can optionally throw on errors.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.DummyLogger.NoThrowInstance">
            <summary>
            It ignores everything and doesn't throw anything.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.DummyLogger.ThrowModuleWriterExceptionOnErrorInstance">
            <summary>
            Throws a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterException"/> on errors, but ignores anything else.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DummyLogger.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="exceptionToThrow">If non-<c>null</c>, this exception type is thrown on
            errors. It must have a public constructor that takes a <see cref="T:System.String"/> as the only
            argument.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DummyLogger.Log(System.Object,Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.DummyLogger.IgnoresEvent(Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap">
            <summary>
            A high-level representation of a row in the ImplMap table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.Attributes">
            <summary>
            From column ImplMap.MappingFlags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.Name">
            <summary>
            From column ImplMap.ImportName
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.Module">
            <summary>
            From column ImplMap.ImportScope
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.module">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes,Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.attributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsNoMangle">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.NoMangle"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.CharSet">
            <summary>
            Gets/sets the char set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCharSetNotSpec">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetNotSpec"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCharSetAnsi">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetAnsi"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCharSetUnicode">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetUnicode"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCharSetAuto">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetAuto"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.BestFit">
            <summary>
            Gets/sets best fit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsBestFitUseAssem">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.BestFitUseAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsBestFitEnabled">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.BestFitEnabled"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsBestFitDisabled">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.BestFitDisabled"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.ThrowOnUnmappableChar">
            <summary>
            Gets/sets throw on unmappable char
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsThrowOnUnmappableCharUseAssem">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.ThrowOnUnmappableCharUseAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsThrowOnUnmappableCharEnabled">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.ThrowOnUnmappableCharEnabled"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsThrowOnUnmappableCharDisabled">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.ThrowOnUnmappableCharDisabled"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.SupportsLastError">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.SupportsLastError"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.CallConv">
            <summary>
            Gets/sets calling convention
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCallConvWinapi">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvWinapi"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCallConvCdecl">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvCdecl"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCallConvStdcall">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvStdcall"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCallConvThiscall">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvThiscall"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsCallConvFastcall">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvFastcall"/> is set
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsPinvokeMethod(System.String,System.String)">
            <summary>
            Checks whether this <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap"/> is a certain P/Invoke method
            </summary>
            <param name="dllName">Name of the DLL</param>
            <param name="funcName">Name of the function within the DLL</param>
            <returns><c>true</c> if it's the specified P/Invoke method, else <c>false</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap.IsPinvokeMethod(System.String,System.String,System.Boolean)">
            <summary>
            Checks whether this <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap"/> is a certain P/Invoke method
            </summary>
            <param name="dllName">Name of the DLL</param>
            <param name="funcName">Name of the function within the DLL</param>
            <param name="treatAsWindows">Treat as Windows</param>
            <returns><c>true</c> if it's the specified P/Invoke method, else <c>false</c></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ImplMapUser">
            <summary>
            An ImplMap row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImplMapUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImplMapUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="scope">Scope</param>
            <param name="name">Name</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ImplMapMD">
            <summary>
            Created from a row in the ImplMap table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ImplMapMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImplMapMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>ImplMap</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Importer"/> options
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.TryToUseTypeDefs">
            <summary>
            Use <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>s whenever possible if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> is located
            in this module.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.TryToUseMethodDefs">
            <summary>
            Use <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>s whenever possible if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> is located
            in this module.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.TryToUseFieldDefs">
            <summary>
            Use <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>s whenever possible if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> is located
            in this module.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.TryToUseDefs">
            <summary>
            Use <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>s, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>s and <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>s
            whenever possible if the definition is located in this module.
            </summary>
            <seealso cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.TryToUseTypeDefs"/>
            <seealso cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.TryToUseMethodDefs"/>
            <seealso cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.TryToUseFieldDefs"/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.TryToUseExistingAssemblyRefs">
            <summary>
            Use already existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/>s whenever possible
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions.FixSignature">
            <summary>
            Don't set this flag. For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ImportMapper">
            <summary>
            Re-maps entities that were renamed in the target module
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImportMapper.Map(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Matches source <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> to the one that is already present in the target module under a different name.
            </summary>
            <param name="source"><see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> referenced by the entity that is being imported.</param>
            <returns>matching <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c> if there's no match.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImportMapper.Map(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Matches source <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> to the one that is already present in the target module under a different name.
            </summary>
            <param name="source"><see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> referenced by the entity that is being imported.</param>
            <returns>matching <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IField"/> or <c>null</c> if there's no match.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImportMapper.Map(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Matches source <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> to the one that is already present in the target module under a different name.
            </summary>
            <param name="source"><see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> referenced by the entity that is being imported.</param>
            <returns>matching <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/> or <c>null</c> if there's no match.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImportMapper.Map(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Matches source <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> to the one that is already present in the target module under a different name.
            </summary>
            <param name="source"><see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> referenced by the entity that is being imported.</param>
            <returns>matching <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> or <c>null</c> if there's no match.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ImportMapper.Map(System.Type)">
            <summary>
            Overrides default behavior of <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(System.Type)"/>
            May be used to use reference assemblies for <see cref="T:System.Type"/> resolution, for example.
            </summary>
            <param name="source"><see cref="T:System.Type"/> to create <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> for. <paramref name="source"/> is non-generic type or generic type without generic arguments.</param>
            <returns><see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> or null to use default <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Importer"/>'s type resolution</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Importer">
            <summary>
            Imports <see cref="T:System.Type"/>s, <see cref="T:System.Reflection.ConstructorInfo"/>s, <see cref="T:System.Reflection.MethodInfo"/>s
            and <see cref="T:System.Reflection.FieldInfo"/>s as references
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module that will own all references</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module that will own all references</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module that will own all references</param>
            <param name="options">Importer options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module that will own all references</param>
            <param name="options">Importer options</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.ImporterOptions,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,Datadog.Trace.Vendors.dnlib.DotNet.ImportMapper)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module that will own all references</param>
            <param name="options">Importer options</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="mapper">Mapper for renamed entities</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(System.Type)">
            <summary>
            Imports a <see cref="T:System.Type"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>. If it's a type that should be
            the declaring type of a field/method reference, call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.ImportDeclaringType(System.Type)"/> instead.
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c> if <paramref name="type"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.ImportDeclaringType(System.Type)">
            <summary>
            Imports a <see cref="T:System.Type"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>. Should be called if it's the
            declaring type of a method/field reference. See also <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(System.Type)"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(System.Type,System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{System.Type})">
            <summary>
            Imports a <see cref="T:System.Type"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="type">The type</param>
            <param name="requiredModifiers">A list of all required modifiers or <c>null</c></param>
            <param name="optionalModifiers">A list of all optional modifiers or <c>null</c></param>
            <returns>The imported type or <c>null</c> if <paramref name="type"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.ImportAsTypeSig(System.Type)">
            <summary>
            Imports a <see cref="T:System.Type"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c> if <paramref name="type"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.ImportAsTypeSig(System.Type,System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{System.Type})">
            <summary>
            Imports a <see cref="T:System.Type"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="type">The type</param>
            <param name="requiredModifiers">A list of all required modifiers or <c>null</c></param>
            <param name="optionalModifiers">A list of all optional modifiers or <c>null</c></param>
            <returns>The imported type or <c>null</c> if <paramref name="type"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(System.Reflection.MethodBase)">
            <summary>
            Imports a <see cref="T:System.Reflection.MethodBase"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/>. This will be either
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>.
            </summary>
            <param name="methodBase">The method</param>
            <returns>The imported method or <c>null</c> if <paramref name="methodBase"/> is invalid
            or if we failed to import the method</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(System.Reflection.MethodBase,System.Boolean)">
            <summary>
            Imports a <see cref="T:System.Reflection.MethodBase"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/>. This will be either
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>.
            </summary>
            <param name="methodBase">The method</param>
            <param name="forceFixSignature">Always verify method signature to make sure the
            returned reference matches the metadata in the source assembly</param>
            <returns>The imported method or <c>null</c> if <paramref name="methodBase"/> is invalid
            or if we failed to import the method</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(System.Reflection.FieldInfo)">
            <summary>
            Imports a <see cref="T:System.Reflection.FieldInfo"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="fieldInfo">The field</param>
            <returns>The imported field or <c>null</c> if <paramref name="fieldInfo"/> is invalid
            or if we failed to import the field</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Imports a <see cref="T:System.Reflection.FieldInfo"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="fieldInfo">The field</param>
            <param name="forceFixSignature">Always verify field signature to make sure the
            returned reference matches the metadata in the source assembly</param>
            <returns>The imported field or <c>null</c> if <paramref name="fieldInfo"/> is invalid
            or if we failed to import the field</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/>
            </summary>
            <param name="sig">The sig</param>
            <returns>The imported sig or <c>null</c> if input is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig"/>
            </summary>
            <param name="sig">The sig</param>
            <returns>The imported sig or <c>null</c> if input is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig"/>
            </summary>
            <param name="sig">The sig</param>
            <returns>The imported sig or <c>null</c> if input is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.PropertySig)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig"/>
            </summary>
            <param name="sig">The sig</param>
            <returns>The imported sig or <c>null</c> if input is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.LocalSig)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig"/>
            </summary>
            <param name="sig">The sig</param>
            <returns>The imported sig or <c>null</c> if input is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig"/>
            </summary>
            <param name="sig">The sig</param>
            <returns>The imported sig or <c>null</c> if input is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IField"/>
            </summary>
            <param name="field">The field</param>
            <returns>The imported type or <c>null</c> if <paramref name="field"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/>
            </summary>
            <param name="method">The method</param>
            <returns>The imported method or <c>null</c> if <paramref name="method"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> as an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IField"/>
            </summary>
            <param name="field">The field</param>
            <returns>The imported type or <c>null</c> if <paramref name="field"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> as an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/>
            </summary>
            <param name="method">The method</param>
            <returns>The imported method or <c>null</c> if <paramref name="method"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>
            </summary>
            <param name="method">The method</param>
            <returns>The imported method or <c>null</c> if <paramref name="method"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Importer.Import(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="memberRef">The member ref</param>
            <returns>The imported member ref or <c>null</c> if <paramref name="memberRef"/> is invalid</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl">
            <summary>
            A high-level representation of a row in the InterfaceImpl table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.Interface">
            <summary>
            From column InterfaceImpl.Interface
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.interface">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl.customDebugInfos"/></summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplUser">
            <summary>
            An InterfaceImpl row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="interface">The interface the type implements</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplMD">
            <summary>
            Created from a row in the InterfaceImpl table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImplMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>InterfaceImpl</c> row</param>
            <param name="rid">Row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IResolver">
            <summary>
            Resolves types, methods, fields
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeResolver">
            <summary>
            Resolves types
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ITypeResolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Resolves a type
            </summary>
            <param name="typeRef">The type</param>
            <param name="sourceModule">The module that needs to resolve the type or <c>null</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance or <c>null</c> if it couldn't be resolved</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefResolver">
            <summary>
            Resolves fields and methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefResolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Resolves a method or a field
            </summary>
            <param name="memberRef">A method/field reference</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance or <c>null</c>
            if it couldn't be resolved.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ITokenResolver">
            <summary>
            Resolves tokens
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ITokenResolver.ResolveToken(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a token
            </summary>
            <param name="token">The metadata token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IType">
            <summary>
            Interface to get the full name of a type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.IsValueType">
            <summary>
            <c>true</c> if it's a value type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.TypeName">
            <summary>
            Returns the name of this type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.ReflectionName">
            <summary>
            Returns the reflection name of this type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.Namespace">
            <summary>
            Returns the namespace of this type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.ReflectionNamespace">
            <summary>
            Returns the reflection namespace of this type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.ReflectionFullName">
            <summary>
            Returns the reflection name of this type. See also <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.AssemblyQualifiedName"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.AssemblyQualifiedName">
            <summary>
            Returns the reflection name of this type, and includes the assembly name where the
            type is located. It can be passed to <see cref="M:System.Type.GetType(System.String)"/> to
            load the type.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.DefinitionAssembly">
            <summary>
            Gets the assembly where this type is defined
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.Scope">
            <summary>
            Gets the scope, which is different from <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.DefinitionAssembly"/> since it
            can differentiate between modules within the same assembly.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.ScopeType">
            <summary>
            Gets the type whose scope is returned by <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.Scope"/> and whose assembly
            is returned by <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.DefinitionAssembly"/>. This is always a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> or <c>null</c>. It can also be a
            nested <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>.
            For example, if this type is a System.String&amp;, then this value is a System.String.
            If it's a generic instance type (eg. List&lt;int&gt;), then the generic type is
            returned (eg. List&lt;T&gt;). In other words, the first <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> that is found (without searching generic arguments) is returned.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IType.IsPrimitive">
            <summary>
            <c>true</c> if it's an integer or a floating point type
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IContainsGenericParameter">
            <summary>
            Implemented by types and calling convention signatures.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IContainsGenericParameter.ContainsGenericParameter">
            <summary>
            <c>true</c> if this contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder">
            <summary>
            Finds <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder.Find(System.String,System.Boolean)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="fullName">Full name of the type (no assembly information)</param>
            <param name="isReflectionName"><c>true</c> if it's a reflection name, and nested
            type names are separated by a <c>+</c> character. If <c>false</c>, nested type names
            are separated by a <c>/</c> character.</param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefFinder.Find(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>. <paramref name="typeRef"/>'s scope (i.e., module or
            assembly) is ignored when looking up the type.
            </summary>
            <param name="typeRef">The type ref</param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IVariable">
            <summary>
            Interface to access a local or a parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IVariable.Type">
            <summary>
            Gets the variable type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IVariable.Index">
            <summary>
            Gets the 0-based position
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.IVariable.Name">
            <summary>
            Gets/sets the variable name
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource">
            <summary>
            A high-level representation of a row in the ManifestResource table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.Offset">
            <summary>
            From column ManifestResource.Offset
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.offset">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.Flags">
            <summary>
            From column ManifestResource.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.Name">
            <summary>
            From column ManifestResource.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.Implementation">
            <summary>
            From column ManifestResource.Implementation
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.implementation">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.customDebugInfos"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes,Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.attributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.Visibility">
            <summary>
            Gets/sets the visibility
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.IsPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes.Public"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource.IsPrivate">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes.Private"/> is set
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceUser">
            <summary>
            A ManifestResource row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.IImplementation)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="implementation">Implementation</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.IImplementation,Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="implementation">Implementation</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.IImplementation,Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="implementation">Implementation</param>
            <param name="flags">Flags</param>
            <param name="offset">Offset</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceMD">
            <summary>
            Created from a row in the ManifestResource table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>ManifestResource</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes">
            <summary>
            ManifestResource flags. See CorHdr.h/CorManifestResourceFlags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes.VisibilityMask">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes.Public">
            <summary>The Resource is exported from the Assembly.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes.Private">
            <summary>The Resource is private to the Assembly.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader">
            <summary>
            Reads <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> from the <c>#Blob</c> heap
            </summary>
            <param name="module">Module</param>
            <param name="sig">Blob offset</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> from the <c>#Blob</c> heap
            </summary>
            <param name="module">Module</param>
            <param name="sig">Blob offset</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Byte[])">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> from <paramref name="data"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="data">Marshal data</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> from <paramref name="data"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="data">Marshal data</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> from <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader.reader"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="reader">A reader that will be owned by us</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> from <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MarshalBlobReader.reader"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="reader">A reader that will be owned by us</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> instance</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType">
            <summary>
            Base class of all marshal types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType.nativeType">
            <summary>
            The native type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType.NativeType">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.NativeType"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.NativeType)">
            <summary>
            Constructor
            </summary>
            <param name="nativeType">Native type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.RawMarshalType">
            <summary>
            Contains the raw marshal blob data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.RawMarshalType.Data">
            <summary>
            Gets/sets the raw data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.RawMarshalType.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Raw data</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FixedSysStringMarshalType">
            <summary>
            A <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.FixedSysString"/> marshal type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedSysStringMarshalType.Size">
            <summary>
            Gets/sets the size
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedSysStringMarshalType.IsSizeValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedSysStringMarshalType.Size"/> is valid
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FixedSysStringMarshalType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FixedSysStringMarshalType.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Size</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FixedSysStringMarshalType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType">
            <summary>
            A <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.SafeArray"/> marshal type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.VariantType">
            <summary>
            Gets/sets the variant type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.UserDefinedSubType">
            <summary>
            Gets/sets the user-defined sub type (it's usually <c>null</c>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.IsVariantTypeValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.VariantType"/> is valid
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.IsUserDefinedSubTypeValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.UserDefinedSubType"/> is valid
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.VariantType)">
            <summary>
            Constructor
            </summary>
            <param name="vt">Variant type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="userDefinedSubType">User-defined sub type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.VariantType,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="vt">Variant type</param>
            <param name="userDefinedSubType">User-defined sub type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SafeArrayMarshalType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType">
            <summary>
            A <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.FixedArray"/> marshal type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.ElementType">
            <summary>
            Gets/sets the element type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.Size">
            <summary>
            Gets/sets the size
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.IsElementTypeValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.ElementType"/> is valid
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.IsSizeValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.Size"/> is valid
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Size</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.#ctor(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.NativeType)">
            <summary>
            Constructor
            </summary>
            <param name="size">Size</param>
            <param name="elementType">Element type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FixedArrayMarshalType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType">
            <summary>
            A <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Array"/> marshal type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.ElementType">
            <summary>
            Gets/sets the element type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.ParamNumber">
            <summary>
            Gets/sets the parameter number
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.Size">
            <summary>
            Gets/sets the size of the array
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.Flags">
            <summary>
            Gets/sets the flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.IsElementTypeValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.ElementType"/> is valid
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.IsParamNumberValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.ParamNumber"/> is valid
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.IsSizeValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.Size"/> is valid
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.IsFlagsValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.Flags"/> is valid
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.IsSizeParamIndexSpecified">
            <summary>
            <c>true</c> if <c>ntaSizeParamIndexSpecified</c> bit is set, <c>false</c> if it's not
            set or if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.Flags"/> is invalid.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.IsSizeParamIndexNotSpecified">
            <summary>
            <c>true</c> if <c>ntaSizeParamIndexSpecified</c> bit is not set, <c>false</c> if it's
            set or if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.Flags"/> is invalid.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.NativeType)">
            <summary>
            Constructor
            </summary>
            <param name="elementType">Element type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.NativeType,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="elementType">Element type</param>
            <param name="paramNum">Parameter number</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.NativeType,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="elementType">Element type</param>
            <param name="paramNum">Parameter number</param>
            <param name="numElems">Number of elements</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.NativeType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="elementType">Element type</param>
            <param name="paramNum">Parameter number</param>
            <param name="numElems">Number of elements</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArrayMarshalType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType">
            <summary>
            A <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.CustomMarshaler"/> marshal type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.Guid">
            <summary>
            Gets/sets the <c>GUID</c> string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.NativeTypeName">
            <summary>
            Gets/sets the native type name string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.CustomMarshaler">
            <summary>
            Gets/sets the custom marshaler
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.Cookie">
            <summary>
            Gets/sets the cookie string
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="guid">GUID string</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="guid">GUID string</param>
            <param name="nativeTypeName">Native type name string</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="guid">GUID string</param>
            <param name="nativeTypeName">Native type name string</param>
            <param name="custMarshaler">Custom marshaler name string</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="guid">GUID string</param>
            <param name="nativeTypeName">Native type name string</param>
            <param name="custMarshaler">Custom marshaler name string</param>
            <param name="cookie">Cookie string</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CustomMarshalType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceMarshalType">
            <summary>
            A <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.IUnknown"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.IDispatch"/> or a
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.IntF"/> marshal type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceMarshalType.IidParamIndex">
            <summary>
            Gets/sets the IID parameter index
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceMarshalType.IsIidParamIndexValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceMarshalType.IidParamIndex"/> is valid
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.NativeType)">
            <summary>
            Constructor
            </summary>
            <param name="nativeType">Native type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceMarshalType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.NativeType,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="nativeType">Native type</param>
            <param name="iidParamIndex">IID parameter index</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceMarshalType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MDToken">
            <summary>
            Metadata token
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.RID_MASK">
            <summary>
            Mask to get the rid from a raw metadata token
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.RID_MAX">
            <summary>
            Max rid value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.TABLE_SHIFT">
            <summary>
            Number of bits to right shift a raw metadata token to get the table index
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.Table">
            <summary>
            Returns the table type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.Rid">
            <summary>
            Returns the row id
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.Raw">
            <summary>
            Returns the raw token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.IsNull">
            <summary>
            Returns <c>true</c> if it's a <c>null</c> token
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="token">Raw token</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="token">Raw token</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="table">The table type</param>
            <param name="rid">Row id</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="table">The table type</param>
            <param name="rid">Row id</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.ToRID(System.UInt32)">
            <summary>
            Returns the <c>rid</c> (row ID)
            </summary>
            <param name="token">A raw metadata token</param>
            <returns>A <c>rid</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.ToRID(System.Int32)">
            <summary>
            Returns the <c>rid</c> (row ID)
            </summary>
            <param name="token">A raw metadata token</param>
            <returns>A <c>rid</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.ToTable(System.UInt32)">
            <summary>
            Returns the <c>table</c>
            </summary>
            <param name="token">A raw metadata token</param>
            <returns>A metadata table index</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.ToTable(System.Int32)">
            <summary>
            Returns the <c>table</c>
            </summary>
            <param name="token">A raw metadata token</param>
            <returns>A metadata table index</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.ToInt32">
            <summary>
            Gets the token as a raw 32-bit signed integer
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.ToUInt32">
            <summary>
            Gets the token as a raw 32-bit unsigned integer
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.op_Equality(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.op_Inequality(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.op_LessThan(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.op_GreaterThan(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.op_LessThanOrEqual(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.op_GreaterThanOrEqual(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.CompareTo(Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MDToken.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream">
            <summary>
            Represents the #Blob stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream.Read(System.UInt32)">
            <summary>
            Reads data
            </summary>
            <param name="offset">Offset of data</param>
            <returns>The data or <c>null</c> if invalid offset</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream.ReadNoNull(System.UInt32)">
            <summary>
            Reads data just like <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream.Read(System.UInt32)"/>, but returns an empty array if
            offset is invalid
            </summary>
            <param name="offset">Offset of data</param>
            <returns>The data</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream.CreateReader(System.UInt32)">
            <summary>
            Creates a reader that can access a blob
            </summary>
            <param name="offset">Offset of blob</param>
            <returns>A new stream</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream.TryCreateReader(System.UInt32,Datadog.Trace.Vendors.dnlib.IO.DataReader@)">
            <summary>
            Creates a reader that can access a blob or returns false on failure
            </summary>
            <param name="offset">Offset of blob</param>
            <param name="reader">Updated with the reader</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken">
            <summary>
            Contains all possible coded token classes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.TypeDefOrRef">
            <summary>TypeDefOrRef coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.HasConstant">
            <summary>HasConstant coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.HasCustomAttribute">
            <summary>HasCustomAttribute coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.HasFieldMarshal">
            <summary>HasFieldMarshal coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.HasDeclSecurity">
            <summary>HasDeclSecurity coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.MemberRefParent">
            <summary>MemberRefParent coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.HasSemantic">
            <summary>HasSemantic coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.MethodDefOrRef">
            <summary>MethodDefOrRef coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.MemberForwarded">
            <summary>MemberForwarded coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Implementation">
            <summary>Implementation coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.CustomAttributeType">
            <summary>CustomAttributeType coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.ResolutionScope">
            <summary>ResolutionScope coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.TypeOrMethodDef">
            <summary>TypeOrMethodDef coded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.HasCustomDebugInformation">
            <summary>HasCustomDebugInformation coded token</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.TableTypes">
            <summary>
            Returns all types of tables
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Bits">
            <summary>
            Returns the number of bits that is used to encode table type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.#ctor(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.MD.Table[])">
            <summary>
            Constructor
            </summary>
            <param name="bits">Number of bits used to encode token type</param>
            <param name="tableTypes">All table types</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Encode(Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <summary>
            Encodes a token
            </summary>
            <param name="token">The token</param>
            <returns>Coded token</returns>
            <seealso cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Encode(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,System.UInt32@)"/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Encode(System.UInt32)">
            <summary>
            Encodes a token
            </summary>
            <param name="token">The token</param>
            <returns>Coded token</returns>
            <seealso cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Encode(System.UInt32,System.UInt32@)"/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Encode(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,System.UInt32@)">
            <summary>
            Encodes a token
            </summary>
            <param name="token">The token</param>
            <param name="codedToken">Coded token</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Encode(System.UInt32,System.UInt32@)">
            <summary>
            Encodes a token
            </summary>
            <param name="token">The token</param>
            <param name="codedToken">Coded token</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Decode2(System.UInt32)">
            <summary>
            Decodes a coded token
            </summary>
            <param name="codedToken">The coded token</param>
            <returns>Decoded token or 0 on failure</returns>
            <seealso cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Decode(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MDToken@)"/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Decode(System.UInt32)">
            <summary>
            Decodes a coded token
            </summary>
            <param name="codedToken">The coded token</param>
            <returns>Decoded token or 0 on failure</returns>
            <seealso cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Decode(System.UInt32,System.UInt32@)"/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Decode(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MDToken@)">
            <summary>
            Decodes a coded token
            </summary>
            <param name="codedToken">The coded token</param>
            <param name="token">Decoded token</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CodedToken.Decode(System.UInt32,System.UInt32@)">
            <summary>
            Decodes a coded token
            </summary>
            <param name="codedToken">The coded token</param>
            <param name="token">Decoded token</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo">
            <summary>
            Info about one column in a MD table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.Index">
            <summary>
            Gets the column index
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.Offset">
            <summary>
            Returns the column offset within the table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.Size">
            <summary>
            Returns the column size
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.Name">
            <summary>
            Returns the column name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.ColumnSize">
            <summary>
            Returns the ColumnSize enum value
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.#ctor(System.Byte,System.String,Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize)">
            <summary>
            Constructor
            </summary>
            <param name="index">Column index</param>
            <param name="name">The column name</param>
            <param name="columnSize">Column size</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.#ctor(System.Byte,System.String,Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize,System.Byte,System.Byte)">
            <summary>
            Constructor
            </summary>
            <param name="index">Column index</param>
            <param name="name">The column name</param>
            <param name="columnSize">Column size</param>
            <param name="offset">Offset of column</param>
            <param name="size">Size of column</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.Read(Datadog.Trace.Vendors.dnlib.IO.DataReader@)">
            <summary>
            Reads the column
            </summary>
            <param name="reader">A reader positioned on this column</param>
            <returns>The column value</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,System.UInt32)">
            <summary>
            Writes a column
            </summary>
            <param name="writer">The writer position on this column</param>
            <param name="value">The column value</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize">
            <summary>
            MD table column size
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Module">
            <summary>RID into Module table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.TypeRef">
            <summary>RID into TypeRef table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.TypeDef">
            <summary>RID into TypeDef table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.FieldPtr">
            <summary>RID into FieldPtr table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Field">
            <summary>RID into Field table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MethodPtr">
            <summary>RID into MethodPtr table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Method">
            <summary>RID into Method table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ParamPtr">
            <summary>RID into ParamPtr table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Param">
            <summary>RID into Param table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.InterfaceImpl">
            <summary>RID into InterfaceImpl table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MemberRef">
            <summary>RID into MemberRef table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Constant">
            <summary>RID into Constant table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.CustomAttribute">
            <summary>RID into CustomAttribute table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.FieldMarshal">
            <summary>RID into FieldMarshal table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.DeclSecurity">
            <summary>RID into DeclSecurity table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ClassLayout">
            <summary>RID into ClassLayout table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.FieldLayout">
            <summary>RID into FieldLayout table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.StandAloneSig">
            <summary>RID into StandAloneSig table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.EventMap">
            <summary>RID into EventMap table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.EventPtr">
            <summary>RID into EventPtr table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Event">
            <summary>RID into Event table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.PropertyMap">
            <summary>RID into PropertyMap table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.PropertyPtr">
            <summary>RID into PropertyPtr table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Property">
            <summary>RID into Property table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MethodSemantics">
            <summary>RID into MethodSemantics table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MethodImpl">
            <summary>RID into MethodImpl table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ModuleRef">
            <summary>RID into ModuleRef table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.TypeSpec">
            <summary>RID into TypeSpec table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ImplMap">
            <summary>RID into ImplMap table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.FieldRVA">
            <summary>RID into FieldRVA table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ENCLog">
            <summary>RID into ENCLog table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ENCMap">
            <summary>RID into ENCMap table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Assembly">
            <summary>RID into Assembly table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.AssemblyProcessor">
            <summary>RID into AssemblyProcessor table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.AssemblyOS">
            <summary>RID into AssemblyOS table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.AssemblyRef">
            <summary>RID into AssemblyRef table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.AssemblyRefProcessor">
            <summary>RID into AssemblyRefProcessor table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.AssemblyRefOS">
            <summary>RID into AssemblyRefOS table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.File">
            <summary>RID into File table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ExportedType">
            <summary>RID into ExportedType table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ManifestResource">
            <summary>RID into ManifestResource table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.NestedClass">
            <summary>RID into NestedClass table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.GenericParam">
            <summary>RID into GenericParam table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MethodSpec">
            <summary>RID into MethodSpec table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.GenericParamConstraint">
            <summary>RID into GenericParamConstraint table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Document">
            <summary>RID into Document table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MethodDebugInformation">
            <summary>RID into MethodDebugInformation table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.LocalScope">
            <summary>RID into LocalScope table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.LocalVariable">
            <summary>RID into LocalVariable table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.LocalConstant">
            <summary>RID into LocalConstant table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ImportScope">
            <summary>RID into ImportScope table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.StateMachineMethod">
            <summary>RID into StateMachineMethod table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.CustomDebugInformation">
            <summary>RID into CustomDebugInformation table</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Byte">
            <summary>8-bit byte</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Int16">
            <summary>16-bit signed int</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.UInt16">
            <summary>16-bit unsigned int</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Int32">
            <summary>32-bit signed int</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.UInt32">
            <summary>32-bit unsigned int</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Strings">
            <summary>Index into #Strings stream</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.GUID">
            <summary>Index into #GUID stream</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Blob">
            <summary>Index into #Blob stream</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.TypeDefOrRef">
            <summary>TypeDefOrRef encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.HasConstant">
            <summary>HasConstant encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.HasCustomAttribute">
            <summary>HasCustomAttribute encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.HasFieldMarshal">
            <summary>HasFieldMarshal encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.HasDeclSecurity">
            <summary>HasDeclSecurity encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MemberRefParent">
            <summary>MemberRefParent encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.HasSemantic">
            <summary>HasSemantic encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MethodDefOrRef">
            <summary>MethodDefOrRef encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.MemberForwarded">
            <summary>MemberForwarded encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.Implementation">
            <summary>Implementation encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.CustomAttributeType">
            <summary>CustomAttributeType encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.ResolutionScope">
            <summary>ResolutionScope encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.TypeOrMethodDef">
            <summary>TypeOrMethodDef encoded token</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnSize.HasCustomDebugInformation">
            <summary>HasCustomDebugInformation encoded token</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags">
            <summary>
            See COMIMAGE_FLAGS_XXX in CorHdr.h in the Windows SDK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.ILOnly">
            <summary>
            See COMIMAGE_FLAGS_ILONLY in the Windows SDK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.Bit32Required">
            <summary>
            See COMIMAGE_FLAGS_32BITREQUIRED in the Windows SDK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.ILLibrary">
            <summary>
            Set if a native header exists (COMIMAGE_FLAGS_IL_LIBRARY)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.StrongNameSigned">
            <summary>
            See COMIMAGE_FLAGS_STRONGNAMESIGNED in the Windows SDK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.NativeEntryPoint">
            <summary>
            See COMIMAGE_FLAGS_NATIVE_ENTRYPOINT in the Windows SDK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.TrackDebugData">
            <summary>
            See COMIMAGE_FLAGS_TRACKDEBUGDATA in the Windows SDK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.Bit32Preferred">
            <summary>
            See COMIMAGE_FLAGS_32BITPREFERRED in the Windows SDK
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata">
            <summary>
            Used when a #~ stream is present in the metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.IsCompressed">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.#ctor(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header,Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.InitializeInternal(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.GetFieldRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.GetMethodRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.GetParamRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.GetEventRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.GetPropertyRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.GetLocalVariableRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.GetLocalConstantRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.GetRidList(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.UInt32,System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable)">
            <summary>
            Gets a rid list (eg. field list)
            </summary>
            <param name="tableSource">Source table, eg. <c>TypeDef</c></param>
            <param name="tableSourceRid">Row ID in <paramref name="tableSource"/></param>
            <param name="colIndex">Column index in <paramref name="tableSource"/>, eg. 4 for <c>TypeDef.FieldList</c></param>
            <param name="tableDest">Destination table, eg. <c>Field</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CompressedMetadata.BinarySearch(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.Int32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.CustomDotNetStream">
            <summary>
            A custom .NET metadata stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CustomDotNetStream.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.CustomDotNetStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <summary>
            Constructor
            </summary>
            <param name="mdReaderFactory">Data reader factory</param>
            <param name="metadataBaseOffset">Offset of metadata</param>
            <param name="streamHeader">The stream header</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream">
            <summary>
            .NET metadata stream
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.dataReader">
            <summary>
            Reader that can access the whole stream.
            
            NOTE: Always copy this field to a local variable before using it since it must be thread safe.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.streamHeader">
            <summary>
            <c>null</c> if it wasn't present in the file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.StartOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.EndOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.StreamLength">
            <summary>
            Gets the length of this stream in the metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.StreamHeader">
            <summary>
            Gets the stream header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.Name">
            <summary>
            Gets the name of the stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.CreateReader">
            <summary>
            Gets a data reader that can read the full stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <summary>
            Constructor
            </summary>
            <param name="mdReaderFactory">Data reader factory</param>
            <param name="metadataBaseOffset">Offset of metadata</param>
            <param name="streamHeader">The stream header</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.OnReaderRecreated">
            <summary>
            Called after <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.dataReader"/> gets recreated
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing"><c>true</c> if called by <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.Dispose"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.IsValidIndex(System.UInt32)">
            <summary>
            Checks whether an index is valid
            </summary>
            <param name="index">The index</param>
            <returns><c>true</c> if the index is valid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.IsValidOffset(System.UInt32)">
            <summary>
            Check whether an offset is within the stream
            </summary>
            <param name="offset">Stream offset</param>
            <returns><c>true</c> if the offset is valid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream.IsValidOffset(System.UInt32,System.Int32)">
            <summary>
            Check whether an offset is within the stream
            </summary>
            <param name="offset">Stream offset</param>
            <param name="size">Size of data</param>
            <returns><c>true</c> if the offset is valid</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.HeapStream">
            <summary>
            Base class of #US, #Strings, #Blob, and #GUID classes
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.HeapStream.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.HeapStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetTableSizes">
            <summary>
            Initializes .NET table row sizes
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetTableSizes.InitializeSizes(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Initializes the table sizes
            </summary>
            <param name="bigStrings"><c>true</c> if #Strings size >= 0x10000</param>
            <param name="bigGuid"><c>true</c> if #GUID size >= 0x10000</param>
            <param name="bigBlob"><c>true</c> if #Blob size >= 0x10000</param>
            <param name="systemRowCounts">Count of rows in each table</param>
            <param name="debugRowCounts">Count of rows in each table (debug tables)</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetTableSizes.InitializeSizes(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.UInt32},System.Boolean)">
            <summary>
            Initializes the table sizes
            </summary>
            <param name="bigStrings"><c>true</c> if #Strings size >= 0x10000</param>
            <param name="bigGuid"><c>true</c> if #GUID size >= 0x10000</param>
            <param name="bigBlob"><c>true</c> if #Blob size >= 0x10000</param>
            <param name="systemRowCounts">Count of rows in each table</param>
            <param name="debugRowCounts">Count of rows in each table (debug tables)</param>
            <param name="forceAllBig">Force all columns to 4 bytes instead of 2 or 4 bytes</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetTableSizes.CreateTables(System.Byte,System.Byte)">
            <summary>
            Creates the table infos
            </summary>
            <param name="majorVersion">Major table version</param>
            <param name="minorVersion">Minor table version</param>
            <returns>All table infos (not completely initialized)</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetTableSizes.CreateTables(System.Byte,System.Byte,System.Int32@)">
            <summary>
            Creates the table infos
            </summary>
            <param name="majorVersion">Major table version</param>
            <param name="minorVersion">Minor table version</param>
            <param name="maxPresentTables">Initialized to max present tables (eg. 42 or 45)</param>
            <returns>All table infos (not completely initialized)</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata">
            <summary>
            Used when a #- stream is present in the metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.IsCompressed">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.#ctor(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header,Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader,System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.InitializeInternal(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetTypeDefRidList">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetExportedTypeRidList">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.ToFieldRid(System.UInt32)">
            <summary>
            Converts a logical <c>Field</c> rid to a physical <c>Field</c> rid
            </summary>
            <param name="listRid">A valid rid</param>
            <returns>Converted rid or any invalid rid value if <paramref name="listRid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.ToMethodRid(System.UInt32)">
            <summary>
            Converts a logical <c>Method</c> rid to a physical <c>Method</c> rid
            </summary>
            <param name="listRid">A valid rid</param>
            <returns>Converted rid or any invalid rid value if <paramref name="listRid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.ToParamRid(System.UInt32)">
            <summary>
            Converts a logical <c>Param</c> rid to a physical <c>Param</c> rid
            </summary>
            <param name="listRid">A valid rid</param>
            <returns>Converted rid or any invalid rid value if <paramref name="listRid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.ToEventRid(System.UInt32)">
            <summary>
            Converts a logical <c>Event</c> rid to a physical <c>Event</c> rid
            </summary>
            <param name="listRid">A valid rid</param>
            <returns>Converted rid or any invalid rid value if <paramref name="listRid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.ToPropertyRid(System.UInt32)">
            <summary>
            Converts a logical <c>Property</c> rid to a physical <c>Property</c> rid
            </summary>
            <param name="listRid">A valid rid</param>
            <returns>Converted rid or any invalid rid value if <paramref name="listRid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetFieldRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetMethodRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetParamRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetEventRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetPropertyRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetLocalVariableRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetLocalConstantRidList(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.GetRidList(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.UInt32,System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable)">
            <summary>
            Gets a rid list (eg. field list)
            </summary>
            <param name="tableSource">Source table, eg. <c>TypeDef</c></param>
            <param name="tableSourceRid">Row ID in <paramref name="tableSource"/></param>
            <param name="colIndex">Column index in <paramref name="tableSource"/>, eg. 4 for <c>TypeDef.FieldList</c></param>
            <param name="tableDest">Destination table, eg. <c>Field</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.BinarySearch(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.Int32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ENCMetadata.FindAllRowsUnsorted(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.Int32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.GuidStream">
            <summary>
            Represents the #GUID stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.GuidStream.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.GuidStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.GuidStream.IsValidIndex(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.GuidStream.Read(System.UInt32)">
            <summary>
            Read a <see cref="T:System.Guid"/>
            </summary>
            <param name="index">Index into this stream</param>
            <returns>A <see cref="T:System.Guid"/> or <c>null</c> if <paramref name="index"/> is 0 or invalid</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.HeapType">
            <summary>
            Heap type. The values are set in stone by MS. Don't change.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.HeapType.Strings">
            <summary>#Strings heap</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.HeapType.Guid">
            <summary>#GUID heap</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.HeapType.Blob">
            <summary>#Blob heap</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.HeapType.US">
            <summary>#US heap</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header">
            <summary>
            Represents the IMAGE_COR20_HEADER structure
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.HasNativeHeader">
            <summary>
            Returns <c>true</c> if it has a native header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.CB">
            <summary>
            Returns the IMAGE_COR20_HEADER.cb field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.MajorRuntimeVersion">
            <summary>
            Returns the IMAGE_COR20_HEADER.MajorRuntimeVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.MinorRuntimeVersion">
            <summary>
            Returns the IMAGE_COR20_HEADER.MinorRuntimeVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.Metadata">
            <summary>
            Returns the IMAGE_COR20_HEADER.Metadata field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.Flags">
            <summary>
            Returns the IMAGE_COR20_HEADER.Flags field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.EntryPointToken_or_RVA">
            <summary>
            Returns the IMAGE_COR20_HEADER.EntryPointToken/EntryPointTokenRVA field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.Resources">
            <summary>
            Returns the IMAGE_COR20_HEADER.Resources field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.StrongNameSignature">
            <summary>
            Returns the IMAGE_COR20_HEADER.StrongNameSignature field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.CodeManagerTable">
            <summary>
            Returns the IMAGE_COR20_HEADER.CodeManagerTable field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.VTableFixups">
            <summary>
            Returns the IMAGE_COR20_HEADER.VTableFixups field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.ExportAddressTableJumps">
            <summary>
            Returns the IMAGE_COR20_HEADER.ExportAddressTableJumps field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.ManagedNativeHeader">
            <summary>
            Returns the IMAGE_COR20_HEADER.ManagedNativeHeader field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.IColumnReader">
            <summary>
            Reads metadata table columns
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.IColumnReader.ReadColumn(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo,System.UInt32@)">
            <summary>
            Reads a column
            </summary>
            <param name="table">The table to read from</param>
            <param name="rid">Table row id</param>
            <param name="column">The column to read</param>
            <param name="value">Result</param>
            <returns><c>true</c> if <paramref name="value"/> was updated, <c>false</c> if
            the column should be read from the original table.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.IRowReader`1">
            <summary>
            Reads table rows
            </summary>
            <typeparam name="TRow">Raw row</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.IRowReader`1.TryReadRow(System.UInt32,`0@)">
            <summary>
            Reads a table row or returns false if the row should be read from the original table
            </summary>
            <param name="rid">Row id</param>
            <param name="row">The row</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion">
            <summary>
            Version strings found in the meta data header
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_10">
            <summary>
            MS CLR 1.0 version string (.NET Framework 1.0)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_10_X86RETAIL">
            <summary>
            MS CLR 1.0 version string (.NET Framework 1.0). This is an incorrect version that shouldn't be used.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_10_RETAIL">
            <summary>
            MS CLR 1.0 version string (.NET Framework 1.0). This is an incorrect version that shouldn't be used.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_10_COMPLUS">
            <summary>
            MS CLR 1.0 version string (.NET Framework 1.0). This is an incorrect version that shouldn't be used.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_11">
            <summary>
            MS CLR 1.1 version string (.NET Framework 1.1)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_20">
            <summary>
            MS CLR 2.0 version string (.NET Framework 2.0-3.5)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_40">
            <summary>
            MS CLR 4.0 version string (.NET Framework 4.0-4.5)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_10_PREFIX">
            <summary>
            MS CLR 1.0 any version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_10_PREFIX_X86RETAIL">
            <summary>
            MS CLR 1.0 any version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_11_PREFIX">
            <summary>
            MS CLR 1.1 any version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_20_PREFIX">
            <summary>
            MS CLR 2.0 any version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.MS_CLR_40_PREFIX">
            <summary>
            MS CLR 4.0 any version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.ECMA_2002">
            <summary>
            ECMA 2002 version string
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.ECMA_2005">
            <summary>
            ECMA 2005 version string
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion.PORTABLE_PDB_V1_0">
            <summary>
            Portable PDB v1.0
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags">
            <summary>
            MDStream flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.BigStrings">
            <summary>#Strings stream is big and requires 4 byte offsets</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.BigGUID">
            <summary>#GUID stream is big and requires 4 byte offsets</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.BigBlob">
            <summary>#Blob stream is big and requires 4 byte offsets</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.Padding">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.DeltaOnly">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.ExtraData">
            <summary>Extra data follows the row counts</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.HasDelete">
            <summary>Set if certain tables can contain deleted rows. The name column (if present) is set to "_Deleted"</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable">
            <summary>
            A MD table (eg. Method table)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.StartOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.EndOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.Table">
            <summary>
            Gets the table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.Name">
            <summary>
            Gets the name of this table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.Rows">
            <summary>
            Returns total number of rows
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.RowSize">
            <summary>
            Gets the total size in bytes of one row in this table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.Columns">
            <summary>
            Returns all the columns
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.IsEmpty">
            <summary>
            Returns <c>true</c> if there are no valid rows
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.TableInfo">
            <summary>
            Returns info about this table
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.TableInfo)">
            <summary>
            Constructor
            </summary>
            <param name="table">The table</param>
            <param name="numRows">Number of rows in this table</param>
            <param name="tableInfo">Info about this table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.IsValidRID(System.UInt32)">
            <summary>
            Checks whether the row <paramref name="rid"/> exists
            </summary>
            <param name="rid">Row ID</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.IsInvalidRID(System.UInt32)">
            <summary>
            Checks whether the row <paramref name="rid"/> does not exist
            </summary>
            <param name="rid">Row ID</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata">
            <summary>
            Reads .NET metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.IsCompressed">
            <summary>
            <c>true</c> if the compressed (normal) metadata is used, <c>false</c> if the non-compressed
            (Edit N' Continue) metadata is used. This can be <c>false</c> even if the table stream
            is <c>#~</c> but that's very uncommon.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.IsStandalonePortablePdb">
            <summary>
            <c>true</c> if this is standalone Portable PDB metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.ImageCor20Header">
            <summary>
            Gets the .NET header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.Version">
            <summary>
            Gets the version found in the metadata header. The major version number is in the high 16 bits
            and the lower version number is in the low 16 bits.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.VersionString">
            <summary>
            Gets the version string found in the metadata header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.PEImage">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.PE.IPEImage"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.MetadataHeader">
            <summary>
            Gets the metadata header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.StringsStream">
            <summary>
            Returns the #Strings stream or a default empty one if it's not present
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.USStream">
            <summary>
            Returns the #US stream or a default empty one if it's not present
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.BlobStream">
            <summary>
            Returns the #Blob stream or a default empty one if it's not present
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GuidStream">
            <summary>
            Returns the #GUID stream or a default empty one if it's not present
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.TablesStream">
            <summary>
            Returns the #~ or #- tables stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.PdbStream">
            <summary>
            Returns the #Pdb stream or null if it's not a standalone portable PDB file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.AllStreams">
            <summary>
            Gets all streams
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetTypeDefRidList">
            <summary>
            Gets a list of all the valid <c>TypeDef</c> rids. It's usually every rid in the
            <c>TypeDef</c> table, but could be less if a type has been deleted.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetExportedTypeRidList">
            <summary>
            Gets a list of all the valid <c>ExportedType</c> rids. It's usually every rid in the
            <c>ExportedType</c> table, but could be less if a type has been deleted.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetFieldRidList(System.UInt32)">
            <summary>
            Gets the <c>Field</c> rid list
            </summary>
            <param name="typeDefRid"><c>TypeDef</c> rid</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetMethodRidList(System.UInt32)">
            <summary>
            Gets the <c>Method</c> rid list
            </summary>
            <param name="typeDefRid"><c>TypeDef</c> rid</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetParamRidList(System.UInt32)">
            <summary>
            Gets the <c>Param</c> rid list
            </summary>
            <param name="methodRid"><c>Method</c> rid</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetEventRidList(System.UInt32)">
            <summary>
            Gets the <c>Event</c> rid list
            </summary>
            <param name="eventMapRid"><c>EventMap</c> rid</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetPropertyRidList(System.UInt32)">
            <summary>
            Gets the <c>Property</c> rid list
            </summary>
            <param name="propertyMapRid"><c>PropertyMap</c> rid</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetInterfaceImplRidList(System.UInt32)">
            <summary>
            Finds all <c>InterfaceImpl</c> rids owned by <paramref name="typeDefRid"/>
            </summary>
            <param name="typeDefRid">Owner <c>TypeDef</c> rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>InterfaceImpl</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetGenericParamRidList(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Finds all <c>GenericParam</c> rids owned by <paramref name="rid"/> in table <paramref name="table"/>
            </summary>
            <param name="table">A <c>TypeOrMethodDef</c> table</param>
            <param name="rid">Owner rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>GenericParam</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetGenericParamConstraintRidList(System.UInt32)">
            <summary>
            Finds all <c>GenericParamConstraint</c> rids owned by <paramref name="genericParamRid"/>
            </summary>
            <param name="genericParamRid">Owner <c>GenericParam</c> rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>GenericParamConstraint</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetCustomAttributeRidList(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Finds all <c>CustomAttribute</c> rids owned by <paramref name="rid"/> in table <paramref name="table"/>
            </summary>
            <param name="table">A <c>HasCustomAttribute</c> table</param>
            <param name="rid">Owner rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>CustomAttribute</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetDeclSecurityRidList(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Finds all <c>DeclSecurity</c> rids owned by <paramref name="rid"/> in table <paramref name="table"/>
            </summary>
            <param name="table">A <c>HasDeclSecurity</c> table</param>
            <param name="rid">Owner rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>DeclSecurity</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetMethodSemanticsRidList(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Finds all <c>MethodSemantics</c> rids owned by <paramref name="rid"/> in table <paramref name="table"/>
            </summary>
            <param name="table">A <c>HasSemantic</c> table</param>
            <param name="rid">Owner rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>MethodSemantics</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetMethodImplRidList(System.UInt32)">
            <summary>
            Finds all <c>MethodImpl</c> rids owned by <paramref name="typeDefRid"/>
            </summary>
            <param name="typeDefRid">Owner <c>TypeDef</c> rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>MethodImpl</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetClassLayoutRid(System.UInt32)">
            <summary>
            Finds a <c>ClassLayout</c> rid
            </summary>
            <param name="typeDefRid">Owner <c>TypeDef</c> rid</param>
            <returns>The <c>ClassLayout</c> rid or 0 if <paramref name="typeDefRid"/> is invalid
            or if it has no row in the <c>ClassLayout</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetFieldLayoutRid(System.UInt32)">
            <summary>
            Finds a <c>FieldLayout</c> rid
            </summary>
            <param name="fieldRid">Owner <c>Field</c> rid</param>
            <returns>The <c>FieldLayout</c> rid or 0 if <paramref name="fieldRid"/> is invalid
            or if it has no row in the <c>FieldLayout</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetFieldMarshalRid(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Finds a <c>FieldMarshal</c> rid
            </summary>
            <param name="table">A <c>HasFieldMarshal</c> table</param>
            <param name="rid">Owner rid</param>
            <returns>The <c>FieldMarshal</c> rid or 0 if <paramref name="rid"/> is invalid
            or if it has no row in the <c>FieldMarshal</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetFieldRVARid(System.UInt32)">
            <summary>
            Finds a <c>FieldRVA</c> rid
            </summary>
            <param name="fieldRid">Owner <c>Field</c> rid</param>
            <returns>The <c>FieldRVA</c> rid or 0 if <paramref name="fieldRid"/> is invalid
            or if it has no row in the <c>FieldRVA</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetImplMapRid(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Finds an <c>ImplMap</c> rid
            </summary>
            <param name="table">A <c>MemberForwarded</c> table</param>
            <param name="rid">Owner rid</param>
            <returns>The <c>ImplMap</c> rid or 0 if <paramref name="rid"/> is invalid
            or if it has no row in the <c>ImplMap</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetNestedClassRid(System.UInt32)">
            <summary>
            Finds a <c>NestedClass</c> rid
            </summary>
            <param name="typeDefRid">Owner <c>TypeDef</c> rid</param>
            <returns>The <c>NestedClass</c> rid or 0 if <paramref name="typeDefRid"/> is invalid
            or if it has no row in the <c>NestedClass</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetEventMapRid(System.UInt32)">
            <summary>
            Finds an <c>EventMap</c> rid
            </summary>
            <param name="typeDefRid">Owner <c>TypeDef</c> rid</param>
            <returns>The <c>EventMap</c> rid or 0 if <paramref name="typeDefRid"/> is invalid
            or if it has no row in the <c>EventMap</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetPropertyMapRid(System.UInt32)">
            <summary>
            Finds a <c>PropertyMap</c> rid
            </summary>
            <param name="typeDefRid">Owner <c>TypeDef</c> rid</param>
            <returns>The <c>PropertyMap</c> rid or 0 if <paramref name="typeDefRid"/> is invalid
            or if it has no row in the <c>PropertyMap</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetConstantRid(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Finds a <c>Constant</c> rid
            </summary>
            <param name="table">A <c>HasConstant</c> table</param>
            <param name="rid">Owner rid</param>
            <returns>The <c>Constant</c> rid or 0 if <paramref name="rid"/> is invalid
            or if it has no row in the <c>Constant</c> table.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetOwnerTypeOfField(System.UInt32)">
            <summary>
            Returns the owner <c>TypeDef</c> rid
            </summary>
            <param name="fieldRid">A <c>Field</c> rid</param>
            <returns>The owner <c>TypeDef</c> rid or 0 if <paramref name="fieldRid"/> is invalid
            or if it has no owner.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetOwnerTypeOfMethod(System.UInt32)">
            <summary>
            Returns the owner <c>TypeDef</c> rid
            </summary>
            <param name="methodRid">A <c>Method</c> rid</param>
            <returns>The owner <c>TypeDef</c> rid or 0 if <paramref name="methodRid"/> is invalid
            or if it has no owner.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetOwnerTypeOfEvent(System.UInt32)">
            <summary>
            Returns the owner <c>TypeDef</c> rid
            </summary>
            <param name="eventRid">A <c>Event</c> rid</param>
            <returns>The owner <c>TypeDef</c> rid or 0 if <paramref name="eventRid"/> is invalid
            or if it has no owner.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetOwnerTypeOfProperty(System.UInt32)">
            <summary>
            Returns the owner <c>TypeDef</c> rid
            </summary>
            <param name="propertyRid">A <c>Property</c> rid</param>
            <returns>The owner <c>TypeDef</c> rid or 0 if <paramref name="propertyRid"/> is invalid
            or if it has no owner.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetOwnerOfGenericParam(System.UInt32)">
            <summary>
            Returns the owner <c>TypeOrMethodDef</c> rid
            </summary>
            <param name="gpRid">A <c>GenericParam</c> rid</param>
            <returns>The owner <c>TypeOrMethodDef</c> rid or 0 if <paramref name="gpRid"/> is
            invalid or if it has no owner.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetOwnerOfGenericParamConstraint(System.UInt32)">
            <summary>
            Returns the owner <c>GenericParam</c> rid
            </summary>
            <param name="gpcRid">A <c>GenericParamConstraint</c> rid</param>
            <returns>The owner <c>GenericParam</c> rid or 0 if <paramref name="gpcRid"/> is
            invalid or if it has no owner.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetOwnerOfParam(System.UInt32)">
            <summary>
            Returns the owner <c>Method</c> rid
            </summary>
            <param name="paramRid">A <c>Param</c> rid</param>
            <returns>The owner <c>Method</c> rid or 0 if <paramref name="paramRid"/> is invalid
            or if it has no owner.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetNestedClassRidList(System.UInt32)">
            <summary>
            Gets a list of all nested classes owned by <paramref name="typeDefRid"/>
            </summary>
            <param name="typeDefRid">A <c>TypeDef</c> rid</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetNonNestedClassRidList">
            <summary>
            Gets a list of all non-nested classes. A type is a non-nested type if
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetNestedClassRidList(System.UInt32)"/> returns an empty list.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetLocalScopeRidList(System.UInt32)">
            <summary>
            Finds all <c>LocalScope</c> rids owned by <paramref name="methodRid"/>
            </summary>
            <param name="methodRid">Owner <c>Method</c> rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>LocalScope</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetLocalVariableRidList(System.UInt32)">
            <summary>
            Finds all <c>LocalVariable</c> rids owned by <paramref name="localScopeRid"/>
            </summary>
            <param name="localScopeRid">Owner <c>LocalScope</c> rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>LocalVariable</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetLocalConstantRidList(System.UInt32)">
            <summary>
            Finds all <c>LocalConstant</c> rids owned by <paramref name="localScopeRid"/>
            </summary>
            <param name="localScopeRid">Owner <c>LocalScope</c> rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>LocalConstant</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetStateMachineMethodRid(System.UInt32)">
            <summary>
            Gets the <c>StateMachineMethod</c> rid or 0 if it's not a state machine method
            </summary>
            <param name="methodRid">Owner <c>Method</c> rid</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.GetCustomDebugInformationRidList(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32)">
            <summary>
            Finds all <c>CustomDebugInformation</c> rids owned by <paramref name="rid"/> in table <paramref name="table"/>
            </summary>
            <param name="table">A <c>HasCustomDebugInformation</c> table</param>
            <param name="rid">Owner rid</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance containing the valid <c>CustomDebugInformation</c> rids</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata.Dispose">
            <summary>
            Disposes of this instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase">
            <summary>
            Common base class for #~ and #- metadata classes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.peImage">
            <summary>
            The PE image
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.cor20Header">
            <summary>
            The .NET header
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.mdHeader">
            <summary>
            The MD header
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.stringsStream">
            <summary>
            The #Strings stream
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.usStream">
            <summary>
            The #US stream
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.blobStream">
            <summary>
            The #Blob stream
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.guidStream">
            <summary>
            The #GUID stream
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.tablesStream">
            <summary>
            The #~ or #- stream
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.pdbStream">
            <summary>
            The #Pdb stream
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.allStreams">
            <summary>
            All the streams that are present in the PE image
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.isStandalonePortablePdb">
            <summary><c>true</c> if this is standalone Portable PDB metadata</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.SortedTable">
            <summary>
            Sorts a table by key column
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.SortedTable.RowInfo">
            <summary>
            Remembers <c>rid</c> and key
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.SortedTable.RowInfo.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="rid">Row ID</param>
            <param name="key">Key</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.SortedTable.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mdTable">The MD table</param>
            <param name="keyColIndex">Index of key column</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.SortedTable.BinarySearch(System.UInt32)">
            <summary>
            Binary searches for a row with a certain key
            </summary>
            <param name="key">The key</param>
            <returns>The row or 0 if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.SortedTable.FindAllRows(System.UInt32)">
            <summary>
            Find all rids that contain <paramref name="key"/>
            </summary>
            <param name="key">The key</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.#ctor(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.DotNet.MD.ImageCor20Header,Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader)">
            <summary>
            Constructor
            </summary>
            <param name="peImage">The PE image</param>
            <param name="cor20Header">The .NET header</param>
            <param name="mdHeader">The MD header</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.Initialize(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory)">
            <summary>
            Initializes the metadata, tables, streams
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.InitializeNonExistentHeaps">
            <summary>
            Creates empty heap objects if they're not present in the metadata
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.InitializeInternal(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32)">
            <summary>
            Called by <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.Initialize(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory)"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.BinarySearch(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.Int32,System.UInt32)">
            <summary>
            Binary searches the table for a <c>rid</c> whose key column at index
            <paramref name="keyColIndex"/> is equal to <paramref name="key"/>.
            </summary>
            <param name="tableSource">Table to search</param>
            <param name="keyColIndex">Key column index</param>
            <param name="key">Key</param>
            <returns>The <c>rid</c> of the found row, or 0 if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.FindAllRows(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.Int32,System.UInt32)">
            <summary>
            Finds all rows owned by <paramref name="key"/> in table <paramref name="tableSource"/>
            whose index is <paramref name="keyColIndex"/>
            </summary>
            <param name="tableSource">Table to search</param>
            <param name="keyColIndex">Key column index</param>
            <param name="key">Key</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.FindAllRowsUnsorted(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.Int32,System.UInt32)">
            <summary>
            Finds all rows owned by <paramref name="key"/> in table <paramref name="tableSource"/>
            whose index is <paramref name="keyColIndex"/>. Should be called if <paramref name="tableSource"/>
            could be unsorted.
            </summary>
            <param name="tableSource">Table to search</param>
            <param name="keyColIndex">Key column index</param>
            <param name="key">Key</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing"><c>true</c> if called by <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase.Dispose"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataFactory">
            <summary>
            Low level access to a .NET file's metadata
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataFactory.CreateMetadata(Datadog.Trace.Vendors.dnlib.PE.IPEImage)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata"/> instance
            </summary>
            <param name="peImage">The PE image</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataFactory.CreateMetadata(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata"/> instance
            </summary>
            <param name="peImage">The PE image</param>
            <param name="runtime">Runtime reader kind</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataFactory.CreateMetadata(Datadog.Trace.Vendors.dnlib.PE.IPEImage,System.Boolean)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata"/> instance
            </summary>
            <param name="peImage">The PE image</param>
            <param name="verify"><c>true</c> if we should verify that it's a .NET PE file</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataFactory.CreateMetadata(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind,System.Boolean)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata"/> instance
            </summary>
            <param name="peImage">The PE image</param>
            <param name="runtime">Runtime reader kind</param>
            <param name="verify"><c>true</c> if we should verify that it's a .NET PE file</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Metadata"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataFactory.Create(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind,System.Boolean)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase"/> instance
            </summary>
            <param name="peImage">The PE image</param>
            <param name="runtime">Runtime reader kind</param>
            <param name="verify"><c>true</c> if we should verify that it's a .NET PE file</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataFactory.CreateStandalonePortablePDB(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.Boolean)">
            <summary>
            Create a standalone portable PDB <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase"/> instance
            </summary>
            <param name="mdReaderFactory">Metadata stream</param>
            <param name="verify"><c>true</c> if we should verify that it's a .NET PE file</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase"/> instance</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader">
            <summary>
            Represents the .NET metadata header
            </summary>
            <remarks><c>IMAGE_COR20_HEADER.Metadata</c> points to this header</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.Signature">
            <summary>
            Returns the signature (should be 0x424A5342)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.MajorVersion">
            <summary>
            Returns the major version
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.MinorVersion">
            <summary>
            Returns the minor version
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.Reserved1">
            <summary>
            Returns the reserved dword (pointer to extra header data)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.StringLength">
            <summary>
            Returns the version string length value
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.VersionString">
            <summary>
            Returns the version string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.StorageHeaderOffset">
            <summary>
            Returns the offset of <c>STORAGEHEADER</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.Flags">
            <summary>
            Returns the flags (reserved)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.Reserved2">
            <summary>
            Returns the reserved byte (padding)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.Streams">
            <summary>
            Returns the number of streams
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.StreamHeaders">
            <summary>
            Returns all stream headers
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataHeader.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="runtime">Runtime reader kind</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.PdbStream">
            <summary>
            #Pdb stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.PdbStream.Id">
            <summary>
            Gets the PDB id
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.PdbStream.EntryPoint">
            <summary>
            Gets the entry point token or 0
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.PdbStream.ReferencedTypeSystemTables">
            <summary>
            Gets the referenced type system tables in the PE metadata file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.PdbStream.TypeSystemTableRows">
            <summary>
            Gets all type system table rows. This array has exactly 64 elements.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.PdbStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawRowEqualityComparer">
            <summary>
            Equality comparer for all raw rows
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawRowEqualityComparer.Instance">
            <summary>
            Default instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawModuleRow">
            <summary>
            Raw contents of an uncompressed Module table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawModuleRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeRefRow">
            <summary>
            Raw contents of an uncompressed TypeRef table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeRefRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeDefRow">
            <summary>
            Raw contents of an uncompressed TypeDef table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeDefRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldPtrRow">
            <summary>
            Raw contents of an uncompressed FieldPtr table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldPtrRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldRow">
            <summary>
            Raw contents of an uncompressed Field table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodPtrRow">
            <summary>
            Raw contents of an uncompressed MethodPtr table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodPtrRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodRow">
            <summary>
            Raw contents of an uncompressed Method table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawParamPtrRow">
            <summary>
            Raw contents of an uncompressed ParamPtr table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawParamPtrRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawParamRow">
            <summary>
            Raw contents of an uncompressed Param table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawParamRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawInterfaceImplRow">
            <summary>
            Raw contents of an uncompressed InterfaceImpl table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawInterfaceImplRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMemberRefRow">
            <summary>
            Raw contents of an uncompressed MemberRef table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMemberRefRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawConstantRow">
            <summary>
            Raw contents of an uncompressed Constant table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawConstantRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawCustomAttributeRow">
            <summary>
            Raw contents of an uncompressed CustomAttribute table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawCustomAttributeRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldMarshalRow">
            <summary>
            Raw contents of an uncompressed FieldMarshal table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldMarshalRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawDeclSecurityRow">
            <summary>
            Raw contents of an uncompressed DeclSecurity table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawDeclSecurityRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawClassLayoutRow">
            <summary>
            Raw contents of an uncompressed ClassLayout table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawClassLayoutRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldLayoutRow">
            <summary>
            Raw contents of an uncompressed FieldLayout table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldLayoutRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawStandAloneSigRow">
            <summary>
            Raw contents of an uncompressed StandAloneSig table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawStandAloneSigRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventMapRow">
            <summary>
            Raw contents of an uncompressed EventMap table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventMapRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventPtrRow">
            <summary>
            Raw contents of an uncompressed EventPtr table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventPtrRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventRow">
            <summary>
            Raw contents of an uncompressed Event table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyMapRow">
            <summary>
            Raw contents of an uncompressed PropertyMap table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyMapRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyPtrRow">
            <summary>
            Raw contents of an uncompressed PropertyPtr table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyPtrRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyRow">
            <summary>
            Raw contents of an uncompressed Property table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodSemanticsRow">
            <summary>
            Raw contents of an uncompressed MethodSemantics table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodSemanticsRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodImplRow">
            <summary>
            Raw contents of an uncompressed MethodImpl table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodImplRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawModuleRefRow">
            <summary>
            Raw contents of an uncompressed ModuleRef table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawModuleRefRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeSpecRow">
            <summary>
            Raw contents of an uncompressed TypeSpec table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeSpecRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawImplMapRow">
            <summary>
            Raw contents of an uncompressed ImplMap table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawImplMapRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldRVARow">
            <summary>
            Raw contents of an uncompressed FieldRVA table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldRVARow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawENCLogRow">
            <summary>
            Raw contents of an uncompressed ENCLog table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawENCLogRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawENCMapRow">
            <summary>
            Raw contents of an uncompressed ENCMap table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawENCMapRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRow">
            <summary>
            Raw contents of an uncompressed Assembly table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyProcessorRow">
            <summary>
            Raw contents of an uncompressed AssemblyProcessor table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyProcessorRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyOSRow">
            <summary>
            Raw contents of an uncompressed AssemblyOS table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyOSRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefRow">
            <summary>
            Raw contents of an uncompressed AssemblyRef table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefProcessorRow">
            <summary>
            Raw contents of an uncompressed AssemblyRefProcessor table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefProcessorRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefOSRow">
            <summary>
            Raw contents of an uncompressed AssemblyRefOS table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefOSRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFileRow">
            <summary>
            Raw contents of an uncompressed File table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFileRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawExportedTypeRow">
            <summary>
            Raw contents of an uncompressed ExportedType table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawExportedTypeRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawManifestResourceRow">
            <summary>
            Raw contents of an uncompressed ManifestResource table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawManifestResourceRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawNestedClassRow">
            <summary>
            Raw contents of an uncompressed NestedClass table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawNestedClassRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawGenericParamRow">
            <summary>
            Raw contents of an uncompressed GenericParam table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawGenericParamRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodSpecRow">
            <summary>
            Raw contents of an uncompressed MethodSpec table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodSpecRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawGenericParamConstraintRow">
            <summary>
            Raw contents of an uncompressed GenericParamConstraint table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawGenericParamConstraintRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawDocumentRow">
            <summary>
            Raw contents of an uncompressed Document table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawDocumentRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodDebugInformationRow">
            <summary>
            Raw contents of an uncompressed MethodDebugInformation table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodDebugInformationRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalScopeRow">
            <summary>
            Raw contents of an uncompressed LocalScope table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalScopeRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalVariableRow">
            <summary>
            Raw contents of an uncompressed LocalVariable table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalVariableRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalConstantRow">
            <summary>
            Raw contents of an uncompressed LocalConstant table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalConstantRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawImportScopeRow">
            <summary>
            Raw contents of an uncompressed ImportScope table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawImportScopeRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawStateMachineMethodRow">
            <summary>
            Raw contents of an uncompressed StateMachineMethod table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawStateMachineMethodRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawCustomDebugInformationRow">
            <summary>
            Raw contents of an uncompressed CustomDebugInformation table row
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RawCustomDebugInformationRow.Item(System.Int32)">
            <summary>
            Gets a column
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList">
            <summary>
            Stores a list of rids
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Empty">
            <summary>
            Gets the empty instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Create(System.UInt32,System.UInt32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="startRid"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Create(System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Creates a new instance
            </summary>
            <param name="rids">List of valid rids</param>
            <returns></returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Item(System.Int32)">
            <summary>
            Gets the <paramref name="index"/>'th rid
            </summary>
            <param name="index">Index. Must be &lt; <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Count"/></param>
            <returns>A rid or 0 if <paramref name="index"/> is invalid</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Count">
            <summary>
            Gets the number of rids it will iterate over
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Enumerator">
            <summary>
            Enumerator
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Enumerator.Current">
            <summary>
            Gets the current rid
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Enumerator.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.Enumerator.MoveNext">
            <summary>
            Moves to the next rid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.StorageFlags">
            <summary>
            Storage flags found in the MD header
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.StorageFlags.Normal">
            <summary>
            Normal flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.StorageFlags.ExtraData">
            <summary>
            More data after the header but before the streams.
            </summary>
            <remarks>The CLR will fail to load the file if this flag (or any other bits) is set.</remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader">
            <summary>
            A metadata stream header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader.Offset">
            <summary>
            The offset of the stream relative to the start of the metadata header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader.StreamSize">
            <summary>
            The size of the stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader.Name">
            <summary>
            The name of the stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.StringsStream">
            <summary>
            Represents the #Strings stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.StringsStream.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.StringsStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.StringsStream.Read(System.UInt32)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/>
            </summary>
            <param name="offset">Offset of string</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/> instance or <c>null</c> if invalid offset</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.StringsStream.ReadNoNull(System.UInt32)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/>. The empty string is returned if <paramref name="offset"/>
            is invalid.
            </summary>
            <param name="offset">Offset of string</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/> instance</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table">
            <summary>
            The metadata tables
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Module">
            <summary>Module table (00h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeRef">
            <summary>TypeRef table (01h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeDef">
            <summary>TypeDef table (02h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.FieldPtr">
            <summary>FieldPtr table (03h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Field">
            <summary>Field table (04h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MethodPtr">
            <summary>MethodPtr table (05h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Method">
            <summary>Method table (06h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ParamPtr">
            <summary>ParamPtr table (07h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Param">
            <summary>Param table (08h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.InterfaceImpl">
            <summary>InterfaceImpl table (09h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MemberRef">
            <summary>MemberRef table (0Ah)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Constant">
            <summary>Constant table (0Bh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.CustomAttribute">
            <summary>CustomAttribute table (0Ch)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.FieldMarshal">
            <summary>FieldMarshal table (0Dh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.DeclSecurity">
            <summary>DeclSecurity table (0Eh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ClassLayout">
            <summary>ClassLayout table (0Fh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.FieldLayout">
            <summary>FieldLayout table (10h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.StandAloneSig">
            <summary>StandAloneSig table (11h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.EventMap">
            <summary>EventMap table (12h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.EventPtr">
            <summary>EventPtr table (13h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Event">
            <summary>Event table (14h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.PropertyMap">
            <summary>PropertyMap table (15h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.PropertyPtr">
            <summary>PropertyPtr table (16h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Property">
            <summary>Property table (17h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MethodSemantics">
            <summary>MethodSemantics table (18h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MethodImpl">
            <summary>MethodImpl table (19h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ModuleRef">
            <summary>ModuleRef table (1Ah)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.TypeSpec">
            <summary>TypeSpec table (1Bh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ImplMap">
            <summary>ImplMap table (1Ch)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.FieldRVA">
            <summary>FieldRVA table (1Dh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ENCLog">
            <summary>ENCLog table (1Eh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ENCMap">
            <summary>ENCMap table (1Fh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Assembly">
            <summary>Assembly table (20h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.AssemblyProcessor">
            <summary>AssemblyProcessor table (21h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.AssemblyOS">
            <summary>AssemblyOS table (22h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.AssemblyRef">
            <summary>AssemblyRef table (23h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.AssemblyRefProcessor">
            <summary>AssemblyRefProcessor table (24h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.AssemblyRefOS">
            <summary>AssemblyRefOS table (25h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.File">
            <summary>File table (26h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ExportedType">
            <summary>ExportedType table (27h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ManifestResource">
            <summary>ManifestResource table (28h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.NestedClass">
            <summary>NestedClass table (29h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.GenericParam">
            <summary>GenericParam table (2Ah)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MethodSpec">
            <summary>MethodSpec table (2Bh)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.GenericParamConstraint">
            <summary>GenericParamConstraint table (2Ch)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.Document">
            <summary>(Portable PDB) Document table (30h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.MethodDebugInformation">
            <summary>(Portable PDB) MethodDebugInformation table (31h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.LocalScope">
            <summary>(Portable PDB) LocalScope table (32h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.LocalVariable">
            <summary>(Portable PDB) LocalVariable table (33h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.LocalConstant">
            <summary>(Portable PDB) LocalConstant table (34h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.ImportScope">
            <summary>(Portable PDB) ImportScope table (35h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.StateMachineMethod">
            <summary>(Portable PDB) StateMachineMethod table (36h)</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.Table.CustomDebugInformation">
            <summary>(Portable PDB) CustomDebugInformation table (37h)</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.TableInfo">
            <summary>
            Info about one MD table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TableInfo.Table">
            <summary>
            Returns the table type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TableInfo.RowSize">
            <summary>
            Returns the total size of a row in bytes
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TableInfo.Columns">
            <summary>
            Returns all the columns
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TableInfo.Name">
            <summary>
            Returns the name of the table
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TableInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.String,Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo[])">
            <summary>
            Constructor
            </summary>
            <param name="table">Table type</param>
            <param name="name">Table name</param>
            <param name="columns">All columns</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TableInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.String,Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="table">Table type</param>
            <param name="name">Table name</param>
            <param name="columns">All columns</param>
            <param name="rowSize">Row size</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream">
            <summary>
            .NET metadata tables stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.ColumnReader">
            <summary>
            Gets/sets the column reader
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.MethodRowReader">
            <summary>
            Gets/sets the <c>Method</c> table reader
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.Reserved1">
            <summary>
            Gets the reserved field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.Version">
            <summary>
            Gets the version. The major version is in the upper 8 bits, and the minor version
            is in the lower 8 bits.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.Flags">
            <summary>
            Gets <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.Log2Rid">
            <summary>
            Gets the reserved log2 rid field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.ValidMask">
            <summary>
            Gets the valid mask
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.SortedMask">
            <summary>
            Gets the sorted mask
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.ExtraData">
            <summary>
            Gets the extra data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.MDTables">
            <summary>
            Gets the MD tables
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.HasBigStrings">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.BigStrings"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.HasBigGUID">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.BigGUID"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.HasBigBlob">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.BigBlob"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.HasPadding">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.Padding"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.HasDeltaOnly">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.DeltaOnly"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.HasExtraData">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.ExtraData"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.HasDelete">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDStreamFlags.HasDelete"/> bit
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <summary>
            Constructor
            </summary>
            <param name="mdReaderFactory"><see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> factory</param>
            <param name="metadataBaseOffset">Offset of metadata</param>
            <param name="streamHeader">Stream header</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind)">
            <summary>
            Constructor
            </summary>
            <param name="mdReaderFactory"><see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> factory</param>
            <param name="metadataBaseOffset">Offset of metadata</param>
            <param name="streamHeader">Stream header</param>
            <param name="runtime">Runtime kind</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.Initialize(System.UInt32[])">
            <summary>
            Initializes MD tables
            </summary>
            <param name="typeSystemTableRows">Type system table rows (from #Pdb stream)</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.Initialize(System.UInt32[],System.Boolean)">
            <summary>
            Initializes MD tables
            </summary>
            <param name="typeSystemTableRows">Type system table rows (from #Pdb stream)</param>
            <param name="forceAllBig">Force all columns to 4 bytes instead of 2 or 4 bytes</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.OnReaderRecreated">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.Get(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table)">
            <summary>
            Returns a MD table
            </summary>
            <param name="table">The table type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable"/> or <c>null</c> if table doesn't exist</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.HasTable(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table)">
            <summary>
            Checks whether a table exists
            </summary>
            <param name="table">The table type</param>
            <returns><c>true</c> if the table exists</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.IsSorted(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable)">
            <summary>
            Checks whether table <paramref name="table"/> is sorted
            </summary>
            <param name="table">The table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadModuleRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawModuleRow@)">
            <summary>
            Reads a raw <c>Module</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadTypeRefRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeRefRow@)">
            <summary>
            Reads a raw <c>TypeRef</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadTypeDefRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeDefRow@)">
            <summary>
            Reads a raw <c>TypeDef</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadFieldPtrRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldPtrRow@)">
            <summary>
            Reads a raw <c>FieldPtr</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadFieldRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldRow@)">
            <summary>
            Reads a raw <c>Field</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadMethodPtrRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodPtrRow@)">
            <summary>
            Reads a raw <c>MethodPtr</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadMethodRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodRow@)">
            <summary>
            Reads a raw <c>Method</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadParamPtrRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawParamPtrRow@)">
            <summary>
            Reads a raw <c>ParamPtr</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadParamRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawParamRow@)">
            <summary>
            Reads a raw <c>Param</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadInterfaceImplRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawInterfaceImplRow@)">
            <summary>
            Reads a raw <c>InterfaceImpl</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadMemberRefRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMemberRefRow@)">
            <summary>
            Reads a raw <c>MemberRef</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadConstantRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawConstantRow@)">
            <summary>
            Reads a raw <c>Constant</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadCustomAttributeRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawCustomAttributeRow@)">
            <summary>
            Reads a raw <c>CustomAttribute</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadFieldMarshalRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldMarshalRow@)">
            <summary>
            Reads a raw <c>FieldMarshal</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadDeclSecurityRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawDeclSecurityRow@)">
            <summary>
            Reads a raw <c>DeclSecurity</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadClassLayoutRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawClassLayoutRow@)">
            <summary>
            Reads a raw <c>ClassLayout</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadFieldLayoutRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldLayoutRow@)">
            <summary>
            Reads a raw <c>FieldLayout</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadStandAloneSigRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawStandAloneSigRow@)">
            <summary>
            Reads a raw <c>StandAloneSig</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadEventMapRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventMapRow@)">
            <summary>
            Reads a raw <c>EventMap</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadEventPtrRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventPtrRow@)">
            <summary>
            Reads a raw <c>EventPtr</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadEventRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventRow@)">
            <summary>
            Reads a raw <c>Event</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadPropertyMapRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyMapRow@)">
            <summary>
            Reads a raw <c>PropertyMap</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadPropertyPtrRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyPtrRow@)">
            <summary>
            Reads a raw <c>PropertyPtr</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadPropertyRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyRow@)">
            <summary>
            Reads a raw <c>Property</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadMethodSemanticsRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodSemanticsRow@)">
            <summary>
            Reads a raw <c>MethodSemantics</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadMethodImplRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodImplRow@)">
            <summary>
            Reads a raw <c>MethodImpl</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadModuleRefRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawModuleRefRow@)">
            <summary>
            Reads a raw <c>ModuleRef</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadTypeSpecRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeSpecRow@)">
            <summary>
            Reads a raw <c>TypeSpec</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadImplMapRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawImplMapRow@)">
            <summary>
            Reads a raw <c>ImplMap</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadFieldRVARow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldRVARow@)">
            <summary>
            Reads a raw <c>FieldRVA</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadENCLogRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawENCLogRow@)">
            <summary>
            Reads a raw <c>ENCLog</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadENCMapRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawENCMapRow@)">
            <summary>
            Reads a raw <c>ENCMap</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadAssemblyRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRow@)">
            <summary>
            Reads a raw <c>Assembly</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadAssemblyProcessorRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyProcessorRow@)">
            <summary>
            Reads a raw <c>AssemblyProcessor</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadAssemblyOSRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyOSRow@)">
            <summary>
            Reads a raw <c>AssemblyOS</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadAssemblyRefRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefRow@)">
            <summary>
            Reads a raw <c>AssemblyRef</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadAssemblyRefProcessorRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefProcessorRow@)">
            <summary>
            Reads a raw <c>AssemblyRefProcessor</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadAssemblyRefOSRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefOSRow@)">
            <summary>
            Reads a raw <c>AssemblyRefOS</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadFileRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFileRow@)">
            <summary>
            Reads a raw <c>File</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadExportedTypeRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawExportedTypeRow@)">
            <summary>
            Reads a raw <c>ExportedType</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadManifestResourceRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawManifestResourceRow@)">
            <summary>
            Reads a raw <c>ManifestResource</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadNestedClassRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawNestedClassRow@)">
            <summary>
            Reads a raw <c>NestedClass</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadGenericParamRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawGenericParamRow@)">
            <summary>
            Reads a raw <c>GenericParam</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadMethodSpecRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodSpecRow@)">
            <summary>
            Reads a raw <c>MethodSpec</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadGenericParamConstraintRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawGenericParamConstraintRow@)">
            <summary>
            Reads a raw <c>GenericParamConstraint</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadDocumentRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawDocumentRow@)">
            <summary>
            Reads a raw <c>Document</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadMethodDebugInformationRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodDebugInformationRow@)">
            <summary>
            Reads a raw <c>MethodDebugInformation</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadLocalScopeRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalScopeRow@)">
            <summary>
            Reads a raw <c>LocalScope</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadLocalVariableRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalVariableRow@)">
            <summary>
            Reads a raw <c>LocalVariable</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadLocalConstantRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalConstantRow@)">
            <summary>
            Reads a raw <c>LocalConstant</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadImportScopeRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawImportScopeRow@)">
            <summary>
            Reads a raw <c>ImportScope</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadStateMachineMethodRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawStateMachineMethodRow@)">
            <summary>
            Reads a raw <c>StateMachineMethod</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadCustomDebugInformationRow(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.RawCustomDebugInformationRow@)">
            <summary>
            Reads a raw <c>CustomDebugInformation</c> row or returns false if the row doesn't exist
            </summary>
            <param name="rid">Row ID</param>
            <param name="row">Row data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadColumn(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.UInt32,System.Int32,System.UInt32@)">
            <summary>
            Reads a column
            </summary>
            <param name="table">The table</param>
            <param name="rid">Row ID</param>
            <param name="colIndex">Column index in <paramref name="table"/></param>
            <param name="value">Result is put here or 0 if we return <c>false</c></param>
            <returns><c>true</c> if we could read the column, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.TablesStream.TryReadColumn(Datadog.Trace.Vendors.dnlib.DotNet.MD.MDTable,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.ColumnInfo,System.UInt32@)">
            <summary>
            Reads a column
            </summary>
            <param name="table">The table</param>
            <param name="rid">Row ID</param>
            <param name="column">Column</param>
            <param name="value">Result is put here or 0 if we return <c>false</c></param>
            <returns><c>true</c> if we could read the column, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.USStream">
            <summary>
            Represents the #US stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.USStream.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.USStream.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MD.StreamHeader)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.USStream.Read(System.UInt32)">
            <summary>
            Reads a unicode string
            </summary>
            <param name="offset">Offset of unicode string</param>
            <returns>A string or <c>null</c> if <paramref name="offset"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.USStream.ReadNoNull(System.UInt32)">
            <summary>
            Reads data just like <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MD.USStream.Read(System.UInt32)"/>, but returns an empty string if
            offset is invalid
            </summary>
            <param name="offset">Offset of unicode string</param>
            <returns>The string</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder">
            <summary>
            Finds types, fields, methods, etc in a module. If nothing has been added to the module, it's
            faster to call ResolveMethodDef(), ResolveTypeRef() etc.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.CustomAttributes">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.EventDefs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.FieldDefs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.GenericParams">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.MemberRefs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.MethodDefs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.MethodSpecs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.PropertyDefs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.TypeDefs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.TypeRefs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.TypeSigs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.TypeSpecs">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.ExportedTypes">
            <summary>
            All found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberFinder.FindAll(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds all types, fields, etc
            </summary>
            <param name="module">The module to scan</param>
            <returns>Itself</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberMDInitializer">
            <summary>
            Methods to load properties to make sure they're initialized
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberMDInitializer.Initialize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Read every collection element
            </summary>
            <typeparam name="T">Collection element type</typeparam>
            <param name="coll">Collection</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberMDInitializer.Initialize(System.Object)">
            <summary>
            Load the object instance
            </summary>
            <param name="o">The value (ignored)</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef">
            <summary>
            A high-level representation of a row in the MemberRef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.module">
            <summary>
            The owner module
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.MethodDefOrRefTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.CustomAttributeTypeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Class">
            <summary>
            From column MemberRef.Class
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.class">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Name">
            <summary>
            From column MemberRef.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Signature">
            <summary>
            From column MemberRef.Signature
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.signature">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.IsMethodRef">
            <summary>
            <c>true</c> if this is a method reference (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.MethodSig"/> != <c>null</c>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.IsFieldRef">
            <summary>
            <c>true</c> if this is a field reference (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.FieldSig"/> != <c>null</c>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.MethodSig">
            <summary>
            Gets/sets the method sig
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.FieldSig">
            <summary>
            Gets/sets the field sig
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.HasThis">
            <summary>
            <c>true</c> if the method has a hidden 'this' parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.ExplicitThis">
            <summary>
            <c>true</c> if the method has an explicit 'this' parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.CallingConvention">
            <summary>
            Gets the calling convention
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.ReturnType">
            <summary>
            Gets/sets the method return type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Datadog#Trace#Vendors#dnlib#DotNet#IGenericParameterProvider#NumberOfGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.FullName">
            <summary>
            Gets the full name
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.GetDeclaringTypeFullName">
            <summary>
            Get the declaring type's full name
            </summary>
            <returns>Full name or <c>null</c> if there's no declaring type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Resolve">
            <summary>
            Resolves the method/field
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance or <c>null</c>
            if it couldn't be resolved.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.ResolveThrow">
            <summary>
            Resolves the method/field
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException">If the method/field couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.ResolveField">
            <summary>
            Resolves the field
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance or <c>null</c> if it couldn't be resolved.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.ResolveFieldThrow">
            <summary>
            Resolves the field
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException">If the field couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.ResolveMethod">
            <summary>
            Resolves the method
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> instance or <c>null</c> if it couldn't be resolved.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.ResolveMethodThrow">
            <summary>
            Resolves the method
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException">If the method couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.GetSignatureGenericParamContext(Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext"/> that can be used as signature context
            </summary>
            <param name="gpContext">Context passed to the constructor</param>
            <param name="class">Field/method class owner</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefUser">
            <summary>
            A MemberRef row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="name">Name of ref</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="name">Name of field ref</param>
            <param name="sig">Field sig</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="name">Name of field ref</param>
            <param name="sig">Field sig</param>
            <param name="class">Owner of field</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="name">Name of method ref</param>
            <param name="sig">Method sig</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="name">Name of method ref</param>
            <param name="sig">Method sig</param>
            <param name="class">Owner of method</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefMD">
            <summary>
            Created from a row in the MemberRef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>MemberRef</c> row</param>
            <param name="rid">Row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes">
            <summary>
            Method attributes, see CorHdr.h/CorMethodAttr
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.MemberAccessMask">
            <summary>member access mask - Use this mask to retrieve accessibility information.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.PrivateScope">
            <summary>Member not referenceable.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.CompilerControlled">
            <summary>Member not referenceable.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Private">
            <summary>Accessible only by the parent type.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.FamANDAssem">
            <summary>Accessible by sub-types only in this Assembly.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Assembly">
            <summary>Accessibly by anyone in the Assembly.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Family">
            <summary>Accessible only by type and sub-types.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.FamORAssem">
            <summary>Accessibly by sub-types anywhere, plus anyone in assembly.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Public">
            <summary>Accessibly by anyone who has visibility to this scope.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Static">
            <summary>Defined on type, else per instance.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Final">
            <summary>Method may not be overridden.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Virtual">
            <summary>Method virtual.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.HideBySig">
            <summary>Method hides by name+sig, else just by name.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.VtableLayoutMask">
            <summary>vtable layout mask - Use this mask to retrieve vtable attributes.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.ReuseSlot">
            <summary>The default.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.NewSlot">
            <summary>Method always gets a new slot in the vtable.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.CheckAccessOnOverride">
            <summary>Overridability is the same as the visibility.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Abstract">
            <summary>Method does not provide an implementation.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.SpecialName">
            <summary>Method is special.  Name describes how.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.PinvokeImpl">
            <summary>Implementation is forwarded through pinvoke.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.UnmanagedExport">
            <summary>Managed method exported via thunk to unmanaged code.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.RTSpecialName">
            <summary>Runtime should check name encoding.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.HasSecurity">
            <summary>Method has security associate with it.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.RequireSecObject">
            <summary>Method calls another method containing security code.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef">
            <summary>
            A high-level representation of a row in the Method table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.parameterList">
            <summary>
            All parameters
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasDeclSecurityTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.MemberRefParentTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.MethodDefOrRefTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.MemberForwardedTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.CustomAttributeTypeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.TypeOrMethodDefTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.RVA">
            <summary>
            From column Method.RVA
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.rva">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ImplAttributes">
            <summary>
            From column Method.ImplFlags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.implAttributes">
            <summary>Implementation attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Attributes">
            <summary>
            From column Method.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Name">
            <summary>
            From column Method.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Signature">
            <summary>
            From column Method.Signature
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.signature">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ParamDefs">
            <summary>
            From column Method.ParamList
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.paramDefs">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.InitializeParamDefs">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.paramDefs"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.GenericParameters">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.genericParameters">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.InitializeGenericParameters">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.genericParameters"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.DeclSecurities">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.declSecurities">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.InitializeDeclSecurities">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.declSecurities"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ImplMap">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.implMap">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.implMap_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.GetImplMap_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.implMap"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ResetImplMap">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ImplMap"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.MethodBody">
            <summary>
            Gets/sets the method body. See also <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Body"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.methodBody">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.methodBody_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.FreeMethodBody">
            <summary>
            Frees the method body if it has been loaded. This does nothing if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.CanFreeMethodBody"/>
            returns <c>false</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.GetMethodBody_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.methodBody"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.CanFreeMethodBody">
            <summary>
            true if <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.FreeMethodBody"/> can free the method body
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Overrides">
            <summary>
            Gets the methods this method implements
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.overrides">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.InitializeOverrides">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.overrides"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ExportInfo">
            <summary>
            Gets the export info or null if the method isn't exported to unmanaged code.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.exportInfo">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasDeclSecurities">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasParamDefs">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ParamDefs"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.DeclaringType">
            <summary>
            Gets/sets the declaring type (owner type)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#DotNet#IMemberRef#DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.DeclaringType2">
            <summary>
            Called by <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.DeclaringType"/> and should normally not be called by any user
            code. Use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.DeclaringType"/> instead. Only call this if you must set the
            declaring type without inserting it in the declaring type's method list.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.declaringType2">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Body">
            <summary>
            Gets/sets the CIL method body. See also <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.FreeMethodBody"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.NativeBody">
            <summary>
            Gets/sets the native method body
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasGenericParameters">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.GenericParameters"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasBody">
            <summary>
            <c>true</c> if it has a <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Body"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasOverrides">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodOverride"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Overrides"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasImplMap">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ImplMap"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.FullName">
            <summary>
            Gets the full name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.MethodSig">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.MethodSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Parameters">
            <summary>
            Gets the parameters
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#DotNet#IGenericParameterProvider#NumberOfGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasThis">
            <summary>
            <c>true</c> if the method has a hidden 'this' parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ExplicitThis">
            <summary>
            <c>true</c> if the method has an explicit 'this' parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.CallingConvention">
            <summary>
            Gets the calling convention
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ReturnType">
            <summary>
            Gets/sets the method return type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasReturnType">
            <summary>
            <c>true</c> if the method returns a value (i.e., return type is not <see cref="T:System.Void"/>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.SemanticsAttributes">
            <summary>
            Gets/sets the method semantics attributes. If you remove/add a method to a property or
            an event, you must manually update this property or eg. <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsSetter"/> won't
            work as expected.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.SEMATTRS_INITD">
            <summary>Set when <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.semAttrs"/> has been initialized</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.semAttrs">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.InitializeSemanticsAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.semAttrs"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.semAttrs"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes,Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.attributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ModifyImplAttributes(Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes,Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.implAttributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.implAttributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.implAttributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ModifyImplAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.implAttributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Access">
            <summary>
            Gets/sets the method access
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsCompilerControlled">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.PrivateScope"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsPrivateScope">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.PrivateScope"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsPrivate">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Private"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsFamilyAndAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.FamANDAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Assembly"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsFamily">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Family"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsFamilyOrAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.FamORAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Public"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsStatic">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Static"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsFinal">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Final"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsVirtual">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Virtual"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsHideBySig">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.HideBySig"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsNewSlot">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.NewSlot"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsReuseSlot">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.ReuseSlot"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsCheckAccessOnOverride">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.CheckAccessOnOverride"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsAbstract">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.Abstract"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.SpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsPinvokeImpl">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.PinvokeImpl"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsUnmanagedExport">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.UnmanagedExport"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsRuntimeSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.RTSpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasSecurity">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.HasSecurity"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsRequireSecObject">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.RequireSecObject"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.CodeType">
            <summary>
            Gets/sets the code type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsIL">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.IL"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsNative">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Native"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsOPTIL">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.OPTIL"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsRuntime">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Runtime"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsUnmanaged">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Unmanaged"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsManaged">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Managed"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsForwardRef">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.ForwardRef"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsPreserveSig">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.PreserveSig"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsInternalCall">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.InternalCall"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsSynchronized">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Synchronized"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsNoInlining">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.NoInlining"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsAggressiveInlining">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.AggressiveInlining"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsNoOptimization">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.NoOptimization"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsAggressiveOptimization">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.AggressiveOptimization"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.HasSecurityMitigations">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.SecurityMitigations"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsSetter">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.Setter"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsGetter">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.Getter"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsOther">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.Other"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsAddOn">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.AddOn"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsRemoveOn">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.RemoveOn"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsFire">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.Fire"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsStaticConstructor">
            <summary>
            <c>true</c> if this is the static type constructor
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsInstanceConstructor">
            <summary>
            <c>true</c> if this is an instance constructor
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.IsConstructor">
            <summary>
            <c>true</c> if this is a static or an instance constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ParamDef}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.ParamDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ParamDef}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.ParamDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ParamDef}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.ParamDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ParamDef}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#ParamDef}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefUser">
            <summary>
            A Method row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Method name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Constructor
            </summary>
            <param name="name">Method name</param>
            <param name="methodSig">Method sig</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Method name</param>
            <param name="methodSig">Method sig</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Method name</param>
            <param name="methodSig">Method sig</param>
            <param name="implFlags">Impl flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes,Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Method name</param>
            <param name="methodSig">Method sig</param>
            <param name="implFlags">Impl flags</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD">
            <summary>
            Created from a row in the Method table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.InitializeParamDefs">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.InitializeGenericParameters">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.InitializeDeclSecurities">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.GetImplMap_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.GetMethodBody_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.InitializeOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.InitializeSemanticsAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>Method</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.OnLazyAdd2(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD.OnLazyAdd2(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.ParamDef@)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo">
            <summary>
            Contains the name and ordinal of a method that gets exported to unmanaged code.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.Ordinal">
            <summary>
            Gets the ordinal or null
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.Name">
            <summary>
            Gets the name. If it's null, and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.Ordinal"/> is also null, the name of the method
            (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.Name"/>) is used as the exported name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.Options">
            <summary>
            Gets the options
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name or null to export by ordinal</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.#ctor(System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="ordinal">Ordinal</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.#ctor(System.String,System.Nullable{System.UInt16})">
            <summary>
            Constructor
            </summary>
            <param name="name">Name or null to export by ordinal</param>
            <param name="ordinal">Ordinal or null to export by name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfo.#ctor(System.String,System.Nullable{System.UInt16},Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfoOptions)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name or null to export by ordinal</param>
            <param name="ordinal">Ordinal or null to export by name</param>
            <param name="options">Options</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfoOptions">
            <summary>
            Exported method options
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfoOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfoOptions.FromUnmanaged">
            <summary>
            Transition from unmanaged code
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfoOptions.FromUnmanagedRetainAppDomain">
            <summary>
            Also retain app domain
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodExportInfoOptions.CallMostDerived">
            <summary>
            Call most derived method
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes">
            <summary>
            Method impl attributes, see CorHdr.h/CorMethodImpl
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.CodeTypeMask">
            <summary>Flags about code type.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.IL">
            <summary>Method impl is IL.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Native">
            <summary>Method impl is native.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.OPTIL">
            <summary>Method impl is OPTIL</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Runtime">
            <summary>Method impl is provided by the runtime.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.ManagedMask">
            <summary>Flags specifying whether the code is managed or unmanaged.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Unmanaged">
            <summary>Method impl is unmanaged, otherwise managed.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Managed">
            <summary>Method impl is managed.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.ForwardRef">
            <summary>Indicates method is defined; used primarily in merge scenarios.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.PreserveSig">
            <summary>Indicates method sig is not to be mangled to do HRESULT conversion.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.InternalCall">
            <summary>Reserved for internal use.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.Synchronized">
            <summary>Method is single threaded through the body.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.NoInlining">
            <summary>Method may not be inlined.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.AggressiveInlining">
            <summary>Method should be inlined if possible.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.NoOptimization">
            <summary>Method may not be optimized.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.AggressiveOptimization">
            <summary>Method may contain hot code and should be aggressively optimized.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes.SecurityMitigations">
            <summary>The JIT compiler should look for security mitigation attributes, such as the user-defined System.Runtime.CompilerServices.SecurityMitigationsAttribute. If found, the JIT compiler applies any related security mitigations. Available starting with .NET Framework 4.8.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodOverride">
            <summary>
            Describes which method some method implements
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodOverride.MethodBody">
            <summary>
            The method body. Usually a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> but could be a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodOverride.MethodDeclaration">
            <summary>
            The method <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodOverride.MethodBody"/> implements
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodOverride.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="methodBody">Method body</param>
            <param name="methodDeclaration">The method <paramref name="methodBody"/> implements</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes">
            <summary>
            Method semantics flags, see CorHdr.h/CorMethodSemanticsAttr
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.None">
            <summary>No bit is set</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.Setter">
            <summary>Setter for property</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.Getter">
            <summary>Getter for property</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.Other">
            <summary>other method for property or event</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.AddOn">
            <summary>AddOn method for event</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.RemoveOn">
            <summary>RemoveOn method for event</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSemanticsAttributes.Fire">
            <summary>Fire method for event</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec">
            <summary>
            A high-level representation of a row in the MethodSpec table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Method">
            <summary>
            From column MethodSpec.Method
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.method">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Instantiation">
            <summary>
            From column MethodSpec.Instantiation
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.instantiation">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Datadog#Trace#Vendors#dnlib#DotNet#IMethod#MethodSig">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Name">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.GenericInstMethodSig">
            <summary>
            Gets/sets the generic instance method sig
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Datadog#Trace#Vendors#dnlib#DotNet#IGenericParameterProvider#NumberOfGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.FullName">
            <summary>
            Gets the full name
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecUser">
            <summary>
            A MethodSpec row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="method">The generic method</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig)">
            <summary>
            Constructor
            </summary>
            <param name="method">The generic method</param>
            <param name="sig">The instantiated method sig</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecMD">
            <summary>
            Created from a row in the MethodSpec table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpecMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>MethodSpec</c> row</param>
            <param name="rid">Row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> context
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.AssemblyResolver">
            <summary>
            Gets/sets the assembly resolver. This is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.Resolver">
            <summary>
            Gets/sets the resolver. This is never <c>null</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver)">
            <summary>
            Constructor
            </summary>
            <param name="assemblyResolver">Assembly resolver or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IResolver)">
            <summary>
            Constructor
            </summary>
            <param name="resolver">Type/method/field resolver or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver,Datadog.Trace.Vendors.dnlib.DotNet.IResolver)">
            <summary>
            Constructor
            </summary>
            <param name="assemblyResolver">Assembly resolver or <c>null</c></param>
            <param name="resolver">Type/method/field resolver or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.RegisterExperimentalOpCode(Datadog.Trace.Vendors.dnlib.DotNet.Emit.OpCode)">
            <summary>
            Registers an experimental CIL opcode. It must be a 2-byte opcode
            where the first byte lies within the range <c>0xF0..0xFB</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.ClearExperimentalOpCode(System.Byte,System.Byte)">
            <summary>
            Clears an experimental CIL opcode.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext.GetExperimentalOpCode(System.Byte,System.Byte)">
            <summary>
            Attempts to get an experimental CIL opcode.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> creation options
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.Context">
            <summary>
            Module context
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.PdbOptions">
            <summary>
            PDB reader options
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.PdbFileOrData">
            <summary>
            Set it to A) the path (string) of the PDB file, B) the data (byte[]) of the PDB file or
            C) to an <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory"/> of the PDB data. The <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory"/> will
            be owned by the module. You don't need to initialize <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.TryToLoadPdbFromDisk"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.TryToLoadPdbFromDisk">
            <summary>
            If <c>true</c>, will load the PDB file from disk if present, or an embedded portable PDB file
            stored in the PE file. The default value is <c>true</c>.
            You don't need to initialize <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.PdbFileOrData"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.CorLibAssemblyRef">
            <summary>
            corlib assembly reference to use or <c>null</c> if the default one from the opened
            module should be used.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.Runtime">
            <summary>
            Runtime reader kind, default is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind.CLR"/>. It should be
            set to <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind.Mono"/> if it's an obfuscated Mono/Unity assembly.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Constructor
            </summary>
            <param name="context">Module context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind)">
            <summary>
            Constructor
            </summary>
            <param name="runtime">Runtime reader kind, default is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind.CLR"/>. It should be
            set to <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind.Mono"/> if it's an obfuscated Mono/Unity assembly.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext,Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind)">
            <summary>
            Constructor
            </summary>
            <param name="context">Module context</param>
            <param name="runtime">Runtime reader kind, default is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind.CLR"/>. It should be
            set to <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind.Mono"/> if it's an obfuscated Mono/Unity assembly.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind">
            <summary>
            Runtime reader kind
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind.CLR">
            <summary>
            Microsoft's CLRs (.NET Framework, .NET Core)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.CLRRuntimeReaderKind.Mono">
            <summary>
            Mono's CLR (Mono, Unity)
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef">
            <summary>
            A high-level representation of a row in the Module table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.DefaultCharacteristics">
            <summary>Default characteristics</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.DefaultDllCharacteristics">
            <summary>Default DLL characteristics</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.corLibTypes">
            <summary>
            Initialize this in the ctor
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.pdbState">
            <summary>
            PDB state
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.lastUsedRids">
            <summary>
            Array of last used rid in each table. I.e., next free rid is value + 1
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.context">
            <summary>Module context</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResolutionScopeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Tag">
            <summary>
            Gets/sets a user value. This is never used by dnlib. This property isn't thread safe.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ScopeType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ScopeName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Generation">
            <summary>
            Gets/sets Module.Generation column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.generation">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Name">
            <summary>
            Gets/sets Module.Name column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Mvid">
            <summary>
            Gets/sets Module.Mvid column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.mvid">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EncId">
            <summary>
            Gets/sets Module.EncId column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.encId">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EncBaseId">
            <summary>
            Gets/sets Module.EncBaseId column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.encBaseId">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Assembly">
            <summary>
            Gets the module's assembly. To set this value, add this <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/>
            to <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef.Modules"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.assembly">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Types">
            <summary>
            Gets a list of all non-nested <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>s. See also <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetTypes"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.types">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.InitializeTypes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.types"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ExportedTypes">
            <summary>
            Gets a list of all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.exportedTypes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.InitializeExportedTypes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.exportedTypes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.NativeEntryPoint">
            <summary>
            Gets/sets the native entry point. Only one of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.NativeEntryPoint"/> and
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ManagedEntryPoint"/> can be set. You write to one and the other one gets cleared.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ManagedEntryPoint">
            <summary>
            Gets/sets the managed entry point. Only one of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.NativeEntryPoint"/> and
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ManagedEntryPoint"/> can be set. You write to one and the other one gets cleared.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.nativeEntryPoint">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.managedEntryPoint">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.nativeAndManagedEntryPoint_initialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetNativeEntryPoint_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.nativeEntryPoint"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetManagedEntryPoint_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.managedEntryPoint"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EntryPoint">
            <summary>
            Gets/sets the entry point method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsNativeEntryPointValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.NativeEntryPoint"/> is non-zero
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsManagedEntryPointValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ManagedEntryPoint"/> is non-null
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsEntryPointValid">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EntryPoint"/> is non-null
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Resources">
            <summary>
            Gets a list of all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resource"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.resources">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.InitializeResources">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.resources"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.VTableFixups">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.VTableFixups"/>. This is <c>null</c> if there are no
            vtable fixups.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.vtableFixups">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.vtableFixups_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetVTableFixups_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.vtableFixups"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.HasTypes">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Types"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.HasExportedTypes">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ExportedTypes"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.HasResources">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resource"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Resources"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Location">
            <summary>
            Gets/sets the path of the module or an empty string if it wasn't loaded from disk
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.location">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.CorLibTypes">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.TypeDefFinder">
            <summary>
            Gets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.TypeDefFinder"/> instance
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Context">
            <summary>
            Gets/sets the module context. This is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EnableTypeDefFindCache">
            <summary>
            If <c>true</c>, the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> cache is enabled. The cache is used by
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Find(System.String,System.Boolean)"/> and <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Find(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)"/> to find types.
            <br/><br/>
            <c>IMPORTANT:</c> Only enable the cache if this module's types keep their exact
            name, namespace, and declaring type and if <c>no</c> type is either added or
            removed from <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Types"/> or from any type that is reachable from the
            top-level types in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Types"/> (i.e., any type owned by this module).
            This is disabled by default. When disabled, all calls to <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Find(System.String,System.Boolean)"/>
            and <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Find(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)"/> will result in a slow <c>O(n)</c> (linear) search.
            </summary>
            <seealso cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResetTypeDefFindCache"/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsManifestModule">
            <summary>
            <c>true</c> if this is the manifest (main) module
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GlobalType">
            <summary>
            Gets the global (aka. &lt;Module&gt;) type or <c>null</c> if there are no types
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsCoreLibraryModule">
            <summary>
            true if it's the core library module, false if it's not the core library module,
            and null if it's not known.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Win32Resources">
            <summary>
            Gets/sets the Win32 resources
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.win32Resources">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.win32Resources_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetWin32Resources_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.win32Resources"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.PdbState">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState"/>. This is <c>null</c> if no PDB file
            has been loaded or if no PDB file could be found.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Kind">
            <summary>
            Module kind
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Characteristics">
            <summary>
            Gets/sets the characteristics (from PE file header)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.DllCharacteristics">
            <summary>
            Gets/sets the DLL characteristics (from PE optional header)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion">
            <summary>
            Gets/sets the runtime version which is stored in the metadata header.
            See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.MDHeaderRuntimeVersion"/>.
            </summary>
            <remarks>Not thread safe</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.WinMDStatus">
            <summary>
            Gets the WinMD status
            </summary>
            <remarks>Not thread safe</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsWinMD">
            <summary>
            <c>true</c> if this is a WinMD file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsManagedWinMD">
            <summary>
            <c>true</c> if this is a managed WinMD file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsPureWinMD">
            <summary>
            <c>true</c> if this is a pure (non-managed) WinMD file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersionWinMD">
            <summary>
            Gets the CLR runtime version of the managed WinMD file or <c>null</c> if none. This is
            similar to <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> for normal non-WinMD files.
            </summary>
            <remarks>Not thread safe</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.WinMDVersion">
            <summary>
            Gets the WinMD version or <c>null</c> if none
            </summary>
            <remarks>Not thread safe</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr10">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v1.0 string (only the major
            and minor version numbers are checked)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr10Exactly">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v1.0 string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr11">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v1.1 string (only the major
            and minor version numbers are checked)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr11Exactly">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v1.1 string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr1x">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v1.0 or v1.1 string (only the
            major and minor version numbers are checked)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr1xExactly">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v1.0 or v1.1 string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr20">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v2.0 string (only the major
            and minor version numbers are checked)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr20Exactly">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v2.0 string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr40">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v4.0 string (only the major
            and minor version numbers are checked)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsClr40Exactly">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the CLR v4.0 string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsEcma2002">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the ECMA 2002 string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsEcma2005">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.RuntimeVersion"/> is the ECMA 2005 string
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Machine">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Machine"/> (from PE header)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsI386">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.I386"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.I386_Native_Apple"/>, ...
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsIA64">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.IA64"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsAMD64">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.AMD64"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.AMD64_Native_Apple"/>, ...
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsARM">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARMNT"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARMNT_Native_Apple"/>, ...
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsARM64">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARM64"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARM64_Native_Apple"/>, ...
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsS390x">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Machine"/> is s390x, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.S390X_Native_Apple"/>, ...
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Cor20HeaderFlags">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Cor20HeaderFlags"/> (from .NET header)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.cor20HeaderFlags">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Cor20HeaderRuntimeVersion">
            <summary>
            Gets/sets the runtime version number in the COR20 header. The major version is
            in the high 16 bits. The minor version is in the low 16 bits. This is normally 2.5
            (0x00020005), but if it's .NET Framework 1.x, it should be 2.0 (0x00020000). If this is
            <c>null</c>, the default value will be used when saving the module (2.0 if CLR 1.x,
            and 2.5 if not CLR 1.x).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.TablesHeaderVersion">
            <summary>
            Gets the tables header version. The major version is in the upper 8 bits and the
            minor version is in the lower 8 bits. .NET Framework 1.0/1.1 use version 1.0 (0x0100) and
            .NET Framework 2.x and later use version 2.0 (0x0200). 1.0 has no support for generics,
            1.1 has support for generics (GenericParam rows have an extra Kind column),
            and 2.0 has support for generics (GenericParam rows have the standard 4 columns).
            No other version is supported. If this is <c>null</c>, the default version is
            used (1.0 if .NET Framework 1.x, else 2.0).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ModifyComImageFlags(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.cor20HeaderFlags"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsILOnly">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.ILOnly"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Is32BitRequired">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.Bit32Required"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsStrongNameSigned">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.StrongNameSigned"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.HasNativeEntryPoint">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.NativeEntryPoint"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Is32BitPreferred">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags.Bit32Preferred"/> bit
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing"><c>true</c> if called by <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Dispose"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetTypes">
            <summary>
            Gets all the types (including nested types) present in this module
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.AddAsNonNestedType(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Adds <paramref name="typeDef"/> as a non-nested type. If it's already nested, its
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.DeclaringType"/> will be set to <c>null</c>.
            </summary>
            <param name="typeDef">The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> to insert</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.UpdateRowId``1(``0)">
            <summary>
            Updates the <c>rid</c> to the next free <c>rid</c> available. It's only updated if
            the original <c>rid</c> is 0.
            </summary>
            <typeparam name="T">IMDTokenProvider</typeparam>
            <param name="tableRow">The row that should be updated</param>
            <returns>Returns the input</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ForceUpdateRowId``1(``0)">
            <summary>
            Updates the <c>rid</c> to the next free <c>rid</c> available.
            </summary>
            <typeparam name="T">IMDTokenProvider</typeparam>
            <param name="tableRow">The row that should be updated</param>
            <returns>Returns the input</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(System.Type)">
            <summary>
            Imports a <see cref="T:System.Type"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c> if <paramref name="type"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ImportAsTypeSig(System.Type)">
            <summary>
            Imports a <see cref="T:System.Type"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c> if <paramref name="type"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(System.Reflection.FieldInfo)">
            <summary>
            Imports a <see cref="T:System.Reflection.FieldInfo"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="fieldInfo">The field</param>
            <returns>The imported field or <c>null</c> if <paramref name="fieldInfo"/> is invalid
            or if we failed to import the field</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(System.Reflection.MethodBase)">
            <summary>
            Imports a <see cref="T:System.Reflection.MethodBase"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/>. This will be either
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>.
            </summary>
            <param name="methodBase">The method</param>
            <returns>The imported method or <c>null</c> if <paramref name="methodBase"/> is invalid
            or if we failed to import the method</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="type">The type</param>
            <returns>The imported type or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IField"/>
            </summary>
            <param name="field">The field</param>
            <returns>The imported type or <c>null</c> if <paramref name="field"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="field">The field</param>
            <returns>The imported type or <c>null</c> if <paramref name="field"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethod"/>
            </summary>
            <param name="method">The method</param>
            <returns>The imported method or <c>null</c> if <paramref name="method"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> as a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="method">The method</param>
            <returns>The imported method or <c>null</c> if <paramref name="method"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>
            </summary>
            <param name="method">The method</param>
            <returns>The imported method or <c>null</c> if <paramref name="method"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Import(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Imports a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="memberRef">The member ref</param>
            <returns>The imported member ref or <c>null</c> if <paramref name="memberRef"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Write(System.String)">
            <summary>
            Writes the module to a file on disk. If the file exists, it will be overwritten.
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Write(System.String,Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptions)">
            <summary>
            Writes the module to a file on disk. If the file exists, it will be overwritten.
            </summary>
            <param name="filename">Filename</param>
            <param name="options">Writer options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Write(System.IO.Stream)">
            <summary>
            Writes the module to a stream.
            </summary>
            <param name="dest">Destination stream</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Write(System.IO.Stream,Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptions)">
            <summary>
            Writes the module to a stream.
            </summary>
            <param name="dest">Destination stream</param>
            <param name="options">Writer options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResetTypeDefFindCache">
            <summary>
            Resets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> cache which can be enabled by setting
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EnableTypeDefFindCache"/> to <c>true</c>. Use this method if the cache is
            enabled but some of the types have been modified (eg. removed, added, renamed).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.FindWin32ResourceData(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>
            </summary>
            <param name="type">Type</param>
            <param name="name">Name</param>
            <param name="langId">Language ID</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.CreatePdbState(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbFileKind)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState"/>
            </summary>
            <param name="pdbFileKind">PDB file kind</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.SetPdbState(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState)">
            <summary>
            Sets a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState"/>
            </summary>
            <param name="pdbState">New <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetPointerSize">
            <summary>
            Returns the size of a pointer. Assumes it's 32-bit if pointer size is unknown or
            if it can be 32-bit or 64-bit.
            </summary>
            <returns>Size of a pointer (4 or 8)</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetPointerSize(System.Int32)">
            <summary>
            Returns the size of a pointer
            </summary>
            <param name="defaultPointerSize">Default pointer size if it's not known or if it
            can be 32-bit or 64-bit</param>
            <returns>Size of a pointer (4 or 8)</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetPointerSize(System.Int32,System.Int32)">
            <summary>
            Returns the size of a pointer
            </summary>
            <param name="defaultPointerSize">Default pointer size</param>
            <param name="prefer32bitPointerSize">Pointer size if it's prefer-32-bit (should usually be 4)</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Find(System.String,System.Boolean)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>. For speed, enable <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EnableTypeDefFindCache"/>
            if possible (read the documentation first).
            </summary>
            <param name="fullName">Full name of the type (no assembly information)</param>
            <param name="isReflectionName"><c>true</c> if it's a reflection name, and nested
            type names are separated by a <c>+</c> character. If <c>false</c>, nested type names
            are separated by a <c>/</c> character.</param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Find(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>. Its scope (i.e., module or assembly) is ignored when
            looking up the type. For speed, enable <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.EnableTypeDefFindCache"/> if possible
            (read the documentation first).
            </summary>
            <param name="typeRef">The type ref</param>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Find(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="typeRef">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.CreateModuleContext">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext"/> instance. There should normally only be one
            instance shared by all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/>s.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.LoadEverything(Datadog.Trace.Vendors.dnlib.Threading.ICancellationToken)">
            <summary>
            Load everything in this module. All types, fields, asm refs, etc are loaded, all their
            properties are read to make sure everything is cached.
            </summary>
            <param name="cancellationToken">Cancellation token or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResolveToken(Datadog.Trace.Vendors.dnlib.DotNet.MDToken)">
            <summary>
            Resolves a token
            </summary>
            <param name="mdToken">The metadata token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="mdToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResolveToken(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a token
            </summary>
            <param name="mdToken">The metadata token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="mdToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResolveToken(System.Int32)">
            <summary>
            Resolves a token
            </summary>
            <param name="token">The metadata token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResolveToken(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a token
            </summary>
            <param name="token">The metadata token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResolveToken(System.UInt32)">
            <summary>
            Resolves a token
            </summary>
            <param name="token">The metadata token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.ResolveToken(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a token
            </summary>
            <param name="token">The metadata token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetAssemblyRefs">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetModuleRefs">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetMemberRefs">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>s. <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>s with generic parameters
            aren't cached and a new copy is always returned.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetMemberRefs(Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>s. <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>s with generic parameters
            aren't cached and a new copy is always returned.
            </summary>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetTypeRefs">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.GetAssemblyRef(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds an assembly reference by name. If there's more than one, pick the one with
            the greatest version number.
            </summary>
            <param name="simpleName">Simple name of assembly (eg. "mscorlib")</param>
            <returns>The found <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> or <c>null</c> if there's no such
            assembly reference.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.IsGreaterAssemblyRefVersion(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef)">
            <summary>
            Compare asm refs' version
            </summary>
            <param name="found">First asm ref</param>
            <param name="newOne">New asm ref</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefUser">
            <summary>
            A Module row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <remarks><see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef.Mvid"/> is initialized to a random <see cref="T:System.Guid"/></remarks>
            <param name="name">Module nam</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Nullable{System.Guid})">
            <summary>
            Constructor
            </summary>
            <param name="name">Module name</param>
            <param name="mvid">Module version ID</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Nullable{System.Guid},Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef)">
            <summary>
            Constructor
            </summary>
            <param name="name">Module name</param>
            <param name="mvid">Module version ID</param>
            <param name="corLibAssemblyRef">Corlib assembly ref or <c>null</c></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2">
            <summary>
            Created from a row in the Module table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2.GetNativeEntryPoint_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2.GetManagedEntryPoint_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>Module</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD2.InitializeFromRawRow">
            <summary>
            Initialize fields from the raw <c>Module</c> row
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD">
            <summary>
            Created from a row in the Module table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.metadata">
            <summary>The file that contains all .NET metadata</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.MethodDecrypter">
            <summary>
            Gets/sets the method decrypter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.StringDecrypter">
            <summary>
            Gets/sets the string decrypter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Metadata">
            <summary>
            Returns the .NET metadata interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.TablesStream">
            <summary>
            Returns the #~ or #- tables stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.StringsStream">
            <summary>
            Returns the #Strings stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.BlobStream">
            <summary>
            Returns the #Blob stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GuidStream">
            <summary>
            Returns the #GUID stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.USStream">
            <summary>
            Returns the #US stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.InitializeTypes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.InitializeExportedTypes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.InitializeResources">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetWin32Resources_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetVTableFixups_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.String,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a file
            </summary>
            <param name="fileName">File name of an existing .NET module/assembly</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.String,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a file
            </summary>
            <param name="fileName">File name of an existing .NET module/assembly</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a byte[]
            </summary>
            <param name="data">Contents of a .NET module/assembly</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a byte[]
            </summary>
            <param name="data">Contents of a .NET module/assembly</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Reflection.Module)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a reflection module
            </summary>
            <param name="mod">An existing reflection module</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Reflection.Module,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a reflection module
            </summary>
            <param name="mod">An existing reflection module</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Reflection.Module,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a reflection module
            </summary>
            <param name="mod">An existing reflection module</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Reflection.Module,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext,Datadog.Trace.Vendors.dnlib.PE.ImageLayout)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a reflection module
            </summary>
            <param name="mod">An existing reflection module</param>
            <param name="context">Module context or <c>null</c></param>
            <param name="imageLayout">Image layout of the module in memory</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Reflection.Module,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions,Datadog.Trace.Vendors.dnlib.PE.ImageLayout)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a reflection module
            </summary>
            <param name="mod">An existing reflection module</param>
            <param name="options">Module creation options or <c>null</c></param>
            <param name="imageLayout">Image layout of the module in memory</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.IntPtr)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a memory location
            </summary>
            <param name="addr">Address of a .NET module/assembly</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.IntPtr,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a memory location
            </summary>
            <param name="addr">Address of a .NET module/assembly</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.IntPtr,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a memory location
            </summary>
            <param name="addr">Address of a .NET module/assembly</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(Datadog.Trace.Vendors.dnlib.PE.IPEImage)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance
            </summary>
            <param name="peImage">PE image</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance
            </summary>
            <param name="peImage">PE image</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance
            </summary>
            <param name="peImage">PE image</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.IntPtr,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext,Datadog.Trace.Vendors.dnlib.PE.ImageLayout)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a memory location
            </summary>
            <param name="addr">Address of a .NET module/assembly</param>
            <param name="context">Module context or <c>null</c></param>
            <param name="imageLayout">Image layout of the file in memory</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.IntPtr,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions,Datadog.Trace.Vendors.dnlib.PE.ImageLayout)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a memory location
            </summary>
            <param name="addr">Address of a .NET module/assembly</param>
            <param name="options">Module creation options or <c>null</c></param>
            <param name="imageLayout">Image layout of the file in memory</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a stream
            </summary>
            <remarks>This will read all bytes from the stream and call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)"/>.
            It's better to use one of the other Load() methods.</remarks>
            <param name="stream">The stream (owned by caller)</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.IO.Stream,Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a stream
            </summary>
            <remarks>This will read all bytes from the stream and call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)"/>.
            It's better to use one of the other Load() methods.</remarks>
            <param name="stream">The stream (owned by caller)</param>
            <param name="context">Module context or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.IO.Stream,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a stream
            </summary>
            <remarks>This will read all bytes from the stream and call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ModuleContext)"/>.
            It's better to use one of the other Load() methods.</remarks>
            <param name="stream">The stream (owned by caller)</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Load(Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance from a <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Metadata"/>
            </summary>
            <param name="metadata">The metadata</param>
            <param name="options">Module creation options or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance that now owns <paramref name="metadata"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.MetadataBase,Datadog.Trace.Vendors.dnlib.DotNet.ModuleCreationOptions)">
            <summary>
            Constructor
            </summary>
            <param name="metadata">The metadata</param>
            <param name="options">Module creation options or <c>null</c></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="metadata"/> is <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader)">
            <summary>
            Loads symbols using <paramref name="symbolReader"/>
            </summary>
            <param name="symbolReader">PDB symbol reader</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb(System.String)">
            <summary>
            Loads symbols from a PDB file
            </summary>
            <param name="pdbFileName">PDB file name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions,System.String)">
            <summary>
            Loads symbols from a PDB file
            </summary>
            <param name="options">PDB reader options</param>
            <param name="pdbFileName">PDB file name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb(System.Byte[])">
            <summary>
            Loads symbols from a byte array
            </summary>
            <param name="pdbData">PDB data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions,System.Byte[])">
            <summary>
            Loads symbols from a byte array
            </summary>
            <param name="options">PDB reader options</param>
            <param name="pdbData">PDB data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory)">
            <summary>
            Loads symbols from a stream
            </summary>
            <param name="pdbStream">PDB file stream which is now owned by us</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions,Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory)">
            <summary>
            Loads symbols from a stream
            </summary>
            <param name="options">PDB reader options</param>
            <param name="pdbStream">PDB file stream which is now owned by us</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb">
            <summary>
            Loads symbols if a PDB file is available
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.LoadPdb(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions)">
            <summary>
            Loads symbols if a PDB file is available
            </summary>
            <param name="options">PDB reader options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.FindCorLibAssemblyRef">
            <summary>
            Finds a mscorlib <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/>
            </summary>
            <returns>An existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> instance or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.CreateDefaultCorLibAssemblyRef">
            <summary>
            Called when no corlib assembly reference was found
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveToken(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a token
            </summary>
            <param name="token">The metadata token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMDTokenProvider"/> or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveModule(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveTypeRef(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveTypeDef(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveField(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMethod(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveParam(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveInterfaceImpl(System.UInt32)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveInterfaceImpl(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl"/>
            </summary>
            <param name="rid">The row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMemberRef(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMemberRef(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
            <param name="rid">The row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveConstant(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Constant"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Constant"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveDeclSecurity(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveClassLayout(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassLayout"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveStandAloneSig(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveStandAloneSig(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig"/>
            </summary>
            <param name="rid">The row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveEvent(System.UInt32)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveProperty(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveModuleRef(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveTypeSpec(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveTypeSpec(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>
            </summary>
            <param name="rid">The row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveImplMap(System.UInt32)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ImplMap"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveAssembly(System.UInt32)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveAssemblyRef(System.UInt32)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveFile(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FileDef"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FileDef"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveExportedType(System.UInt32)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveManifestResource(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResource"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveGenericParam(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMethodSpec(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMethodSpec(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>
            </summary>
            <param name="rid">The row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveGenericParamConstraint(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint"/>
            </summary>
            <param name="rid">The row ID</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveGenericParamConstraint(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint"/>
            </summary>
            <param name="rid">The row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint"/> instance or <c>null</c> if <paramref name="rid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveTypeDefOrRef(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="codedToken">A <c>TypeDefOrRef</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveTypeDefOrRef(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="codedToken">A <c>TypeDefOrRef</c> coded token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveHasConstant(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasConstant"/>
            </summary>
            <param name="codedToken">A <c>HasConstant</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasConstant"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveHasCustomAttribute(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute"/>
            </summary>
            <param name="codedToken">A <c>HasCustomAttribute</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveHasCustomAttribute(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute"/>
            </summary>
            <param name="codedToken">A <c>HasCustomAttribute</c> coded token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveHasFieldMarshal(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal"/>
            </summary>
            <param name="codedToken">A <c>HasFieldMarshal</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveHasDeclSecurity(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasDeclSecurity"/>
            </summary>
            <param name="codedToken">A <c>HasDeclSecurity</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasDeclSecurity"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMemberRefParent(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent"/>
            </summary>
            <param name="codedToken">A <c>MemberRefParent</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMemberRefParent(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent"/>
            </summary>
            <param name="codedToken">A <c>MemberRefParent</c> coded token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveHasSemantic(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasSemantic"/>
            </summary>
            <param name="codedToken">A <c>HasSemantic</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasSemantic"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMethodDefOrRef(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef"/>
            </summary>
            <param name="codedToken">A <c>MethodDefOrRef</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMethodDefOrRef(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef"/>
            </summary>
            <param name="codedToken">A <c>MethodDefOrRef</c> coded token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveMemberForwarded(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded"/>
            </summary>
            <param name="codedToken">A <c>MemberForwarded</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveImplementation(System.UInt32)">
            <summary>
            Resolves an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IImplementation"/>
            </summary>
            <param name="codedToken">An <c>Implementation</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IImplementation"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveCustomAttributeType(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType"/>
            </summary>
            <param name="codedToken">A <c>CustomAttributeType</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveCustomAttributeType(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType"/>
            </summary>
            <param name="codedToken">A <c>CustomAttributeType</c> coded token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveResolutionScope(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IResolutionScope"/>
            </summary>
            <param name="codedToken">A <c>ResolutionScope</c> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IResolutionScope"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ResolveTypeOrMethodDef(System.UInt32)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeOrMethodDef"/>
            </summary>
            <param name="codedToken">A <c>TypeOrMethodDef</c>> coded token</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeOrMethodDef"/> or <c>null</c> if <paramref name="codedToken"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadSignature(System.UInt32)">
            <summary>
            Reads a signature from the #Blob stream
            </summary>
            <param name="sig">#Blob stream offset of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadSignature(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a signature from the #Blob stream
            </summary>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadTypeSignature(System.UInt32)">
            <summary>
            Reads a type signature from the #Blob stream
            </summary>
            <param name="sig">#Blob stream offset of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadTypeSignature(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a type signature from the #Blob stream
            </summary>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadTypeSignature(System.UInt32,System.Byte[]@)">
            <summary>
            Reads a type signature from the #Blob stream
            </summary>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="extraData">If there's any extra data after the signature, it's saved
            here, else this will be <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadTypeSignature(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,System.Byte[]@)">
            <summary>
            Reads a type signature from the #Blob stream
            </summary>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="extraData">If there's any extra data after the signature, it's saved
            here, else this will be <c>null</c></param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadMarshalType(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> from the blob
            </summary>
            <param name="table">Table of owner</param>
            <param name="rid">Row ID of owner</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MarshalType"/> instance or <c>null</c> if there's no field
            marshal for this owner.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadCilBody(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Reads a CIL method body
            </summary>
            <param name="parameters">Method parameters</param>
            <param name="rva">RVA</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody"/> instance. It's empty if RVA is invalid (eg. 0 or
            it doesn't point to a CIL method body)</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadCilBody(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Parameter},Datadog.Trace.Vendors.dnlib.PE.RVA,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a CIL method body
            </summary>
            <param name="parameters">Method parameters</param>
            <param name="rva">RVA</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody"/> instance. It's empty if RVA is invalid (eg. 0 or
            it doesn't point to a CIL method body)</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetOwnerType(Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD)">
            <summary>
            Returns the owner type of a field
            </summary>
            <param name="field">The field</param>
            <returns>The owner type or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetOwnerType(Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD)">
            <summary>
            Returns the owner type of a method
            </summary>
            <param name="method">The method</param>
            <returns>The owner type or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetOwnerType(Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD)">
            <summary>
            Returns the owner type of an event
            </summary>
            <param name="evt">The event</param>
            <returns>The owner type or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetOwnerType(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD)">
            <summary>
            Returns the owner type of a property
            </summary>
            <param name="property">The property</param>
            <returns>The owner type or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetOwner(Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD)">
            <summary>
            Returns the owner type/method of a generic param
            </summary>
            <param name="gp">The generic param</param>
            <returns>The owner type/method or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetOwner(Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD)">
            <summary>
            Returns the owner generic param of a generic param constraint
            </summary>
            <param name="gpc">The generic param constraint</param>
            <returns>The owner generic param or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetOwner(Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD)">
            <summary>
            Returns the owner method of a param
            </summary>
            <param name="pd">The param</param>
            <returns>The owner method or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadModule(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)">
            <summary>
            Reads a module
            </summary>
            <param name="fileRid">File rid</param>
            <param name="owner">The assembly owning the module we should read</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD"/> instance or <c>null</c> if <paramref name="fileRid"/>
            is invalid or if it's not a .NET module.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetModuleRidList">
            <summary>
            Gets a list of all <c>File</c> rids that are .NET modules. Call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadModule(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)"/>
            to read one of these modules.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.RidList"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetValidFilename(System.String,System.String)">
            <summary>
            Concatenates the inputs and returns the result if it's a valid path
            </summary>
            <param name="baseDir">Base dir</param>
            <param name="name">File name</param>
            <returns>Full path to the file or <c>null</c> if one of the inputs is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetBaseDirectoryOfImage">
            <summary>
            Gets the base directory where this .NET module is located on disk
            </summary>
            <returns>Base directory or <c>null</c> if unknown or if an error occurred</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.CreateResource(System.UInt32)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resource"/> instance
            </summary>
            <param name="rid"><c>ManifestResource</c> rid</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resource"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadCustomAttribute(System.UInt32)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>
            </summary>
            <param name="caRid">Custom attribute rid</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance or <c>null</c> if
            <paramref name="caRid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadCustomAttribute(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>
            </summary>
            <param name="caRid">Custom attribute rid</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/> instance or <c>null</c> if
            <paramref name="caRid"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadDataAt(Datadog.Trace.Vendors.dnlib.PE.RVA,System.Int32)">
            <summary>
            Reads data somewhere in the address space of the image
            </summary>
            <param name="rva">RVA of data</param>
            <param name="size">Size of data</param>
            <returns>All the data or <c>null</c> if <paramref name="rva"/> or <paramref name="size"/>
            is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetNativeEntryPoint">
            <summary>
            Gets the native entry point or 0 if none
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.GetManagedEntryPoint">
            <summary>
            Gets the managed entry point (a Method or a File) or null if none
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadField(System.UInt32)">
            <summary>
            Reads a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD"/> instance. This one is not cached.
            </summary>
            <param name="rid">Row ID</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadMethod(System.UInt32)">
            <summary>
            Reads a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD"/> instance. This one is not cached.
            </summary>
            <param name="rid">Row ID</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadEvent(System.UInt32)">
            <summary>
            Reads a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD"/> instance. This one is not cached.
            </summary>
            <param name="rid">Row ID</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadProperty(System.UInt32)">
            <summary>
            Reads a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD"/> instance. This one is not cached.
            </summary>
            <param name="rid">Row ID</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadParam(System.UInt32)">
            <summary>
            Reads a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD"/> instance. This one is not cached.
            </summary>
            <param name="rid">Row ID</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadGenericParam(System.UInt32)">
            <summary>
            Reads a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD"/> instance. This one is not cached.
            </summary>
            <param name="rid">Row ID</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadGenericParamConstraint(System.UInt32)">
            <summary>
            Reads a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD"/> instance. This one is not cached.
            </summary>
            <param name="rid">Row ID</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadGenericParamConstraint(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD"/> instance. This one is not cached.
            </summary>
            <param name="rid">Row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraintMD"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadMethodBody(Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD,Datadog.Trace.Vendors.dnlib.PE.RVA,Datadog.Trace.Vendors.dnlib.DotNet.MethodImplAttributes,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a method body
            </summary>
            <param name="method">Method</param>
            <param name="rva">Method RVA</param>
            <param name="implAttrs">Method impl attrs</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodBody"/> or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.InitializeBodyFromPdb(Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD,Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody)">
            <summary>
            Updates <paramref name="body"/> with the PDB info (if any)
            </summary>
            <param name="method">Owner method</param>
            <param name="body">Method body</param>
            <returns>Returns originak <paramref name="body"/> value</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadUserString(System.UInt32)">
            <summary>
            Reads a string from the #US heap
            </summary>
            <param name="token">String token</param>
            <returns>A non-null string</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.NativeWrite(System.String)">
            <summary>
            Writes the mixed-mode module to a file on disk. If the file exists, it will be overwritten.
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.NativeWrite(System.String,Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions)">
            <summary>
            Writes the mixed-mode module to a file on disk. If the file exists, it will be overwritten.
            </summary>
            <param name="filename">Filename</param>
            <param name="options">Writer options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.NativeWrite(System.IO.Stream)">
            <summary>
            Writes the mixed-mode module to a stream.
            </summary>
            <param name="dest">Destination stream</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.NativeWrite(System.IO.Stream,Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions)">
            <summary>
            Writes the mixed-mode module to a stream.
            </summary>
            <param name="dest">Destination stream</param>
            <param name="options">Writer options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD.ReadBlob(System.UInt32)">
            <summary>
            Reads data from the #Blob. The following columns are returned:
            Field.Signature
            Method.Signature
            MemberRef.Signature
            Constant.Value
            CustomAttribute.Value
            FieldMarshal.NativeType
            DeclSecurity.PermissionSet
            StandAloneSig.Signature
            Property.Type
            TypeSpec.Signature
            Assembly.PublicKey
            AssemblyRef.PublicKeyOrToken
            File.HashValue
            MethodSpec.Instantiation
            </summary>
            <param name="token">A token</param>
            <returns>The value in the #Blob or <c>null</c> if <paramref name="token"/> is invalid</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleKind">
            <summary>
            Module kind
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleKind.Console">
            <summary>
            Console UI module
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleKind.Windows">
            <summary>
            Windows GUI module
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleKind.Dll">
            <summary>
            DLL module
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleKind.NetModule">
            <summary>
            Netmodule (it has no assembly manifest)
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef">
            <summary>
            A high-level representation of a row in the ModuleRef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.module">
            <summary>
            The owner module
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.MemberRefParentTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.ResolutionScopeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.ScopeType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.ScopeName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.Name">
            <summary>
            From column ModuleRef.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.DefinitionModule">
            <summary>
            Gets the definition module, i.e., the module which it references, or <c>null</c>
            if the module can't be found.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.DefinitionAssembly">
            <summary>
            Gets the definition assembly, i.e., the assembly of the module it references, or
            <c>null</c> if the assembly can't be found.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.FullName">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefUser">
            <summary>
            A ModuleRef row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="name">Module name</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefMD">
            <summary>
            Created from a row in the ModuleRef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>ModuleRef</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.NativeType">
            <summary>
            Native types used by field marshals. See CorHdr.h/CorNativeType
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.End">
            <summary>Deprecated</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Void">
            <summary>void</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Boolean">
            <summary>bool</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.I1">
            <summary>int8</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.U1">
            <summary>unsigned int8</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.I2">
            <summary>int16</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.U2">
            <summary>unsigned int16</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.I4">
            <summary>int32</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.U4">
            <summary>unsigned int32</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.I8">
            <summary>int64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.U8">
            <summary>unsigned int64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.R4">
            <summary>float32</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.R8">
            <summary>float64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.SysChar">
            <summary>syschar</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Variant">
            <summary>variant</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Currency">
            <summary>currency</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Ptr">
            <summary>ptr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Decimal">
            <summary>decimal</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Date">
            <summary>date</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.BStr">
            <summary>bstr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.LPStr">
            <summary>lpstr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.LPWStr">
            <summary>lpwstr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.LPTStr">
            <summary>lptstr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.FixedSysString">
            <summary>fixed sysstring</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.ObjectRef">
            <summary>objectref</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.IUnknown">
            <summary>iunknown</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.IDispatch">
            <summary>idispatch</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Struct">
            <summary>struct</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.IntF">
            <summary>interface</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.SafeArray">
            <summary>safearray</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.FixedArray">
            <summary>fixed array</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Int">
            <summary>int</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.UInt">
            <summary>uint</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.NestedStruct">
            <summary>nested struct</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.ByValStr">
            <summary>byvalstr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.ANSIBStr">
            <summary>ansi bstr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.TBStr">
            <summary>tbstr</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.VariantBool">
            <summary>variant bool</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Func">
            <summary>func</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.ASAny">
            <summary>as any</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Array">
            <summary>array</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.LPStruct">
            <summary>lpstruct</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.CustomMarshaler">
            <summary>custom marshaler</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Error">
            <summary>error</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.IInspectable">
            <summary>iinspectable</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.HString">
            <summary>hstring</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.LPUTF8Str">
            <summary>UTF-8 encoded string</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.Max">
            <summary>first invalid element type</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.NotInitialized">
            <summary>Value wasn't present in the blob</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NativeType.RawBlob">
            <summary>Raw marshal blob type</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.NullResolver">
            <summary>
            A resolver that always fails
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.NullResolver.Instance">
            <summary>
            The one and only instance of this type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.NullResolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.NullResolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.NullResolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes">
            <summary>
            Parameter flags. See CorHdr.h/CorParamAttr
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.In">
            <summary>Param is [In]</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.Out">
            <summary>Param is [out]</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.Lcid">
            <summary>Param is a locale identifier</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.Retval">
            <summary>Param is a return value</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.Optional">
            <summary>Param is optional</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.HasDefault">
            <summary>Param has default value.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.HasFieldMarshal">
            <summary>Param has FieldMarshal.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef">
            <summary>
            A high-level representation of a row in the Param table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasConstantTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasFieldMarshalTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.DeclaringMethod">
            <summary>
            Gets the declaring method
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.declaringMethod">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.Attributes">
            <summary>
            From column Param.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.Sequence">
            <summary>
            From column Param.Sequence
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.sequence">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.Name">
            <summary>
            From column Param.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.MarshalType">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.marshalType">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.marshalType_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.GetMarshalType_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.marshalType"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.ResetMarshalType">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.MarshalType"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.Constant">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.constant">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.constant_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.GetConstant_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.constant"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.ResetConstant">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.Constant"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasConstant">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.Constant"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.ElementType">
            <summary>
            Gets the constant element type or <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.End"/> if there's no constant
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasMarshalType">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.MarshalType"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.FullName">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.IsIn">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.In"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.IsOut">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.Out"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.IsLcid">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.Lcid"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.IsRetval">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.Retval"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.IsOptional">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.Optional"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasDefault">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.HasDefault"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef.HasFieldMarshal">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes.HasFieldMarshal"/> bit
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefUser">
            <summary>
            A Param row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="sequence">Sequence</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.UInt16,Datadog.Trace.Vendors.dnlib.DotNet.ParamAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="sequence">Sequence</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD">
            <summary>
            Created from a row in the Param table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD.GetMarshalType_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD.GetConstant_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParamDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>Param</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList">
            <summary>
            A list of all method parameters
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.Method">
            <summary>
            Gets the owner method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.Count">
            <summary>
            Gets the number of parameters, including a possible hidden 'this' parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.MethodSigIndexBase">
            <summary>
            Gets the index of the first parameter that is present in the method signature.
            If this is a static method, the value is 0, else it's an instance method so the
            index is 1 since the first parameter is the hidden 'this' parameter.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.Item(System.Int32)">
            <summary>
            Gets the N'th parameter
            </summary>
            <param name="index">The parameter index</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.ReturnParameter">
            <summary>
            Gets the method return parameter
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Constructor
            </summary>
            <param name="method">The method with all parameters</param>
            <param name="declaringType"><paramref name="method"/>'s declaring type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.UpdateThisParameterType(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Should be called when the method's declaring type has changed
            </summary>
            <param name="methodDeclaringType">Method declaring type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.UpdateParameterTypes">
            <summary>
            Should be called when the method sig has changed
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.IndexOf(Datadog.Trace.Vendors.dnlib.DotNet.Parameter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.Enumerator">
            <summary>
            Enumerator
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.Enumerator.Current">
            <summary>
            Gets the current value
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.Enumerator.MoveNext">
            <summary>
            Moves to the next element in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.Enumerator.Dispose">
            <summary>
            Disposes the enumerator
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ParameterList.GetEnumerator">
            <summary>
            Gets the list enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Parameter">
            <summary>
            A method parameter
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.HIDDEN_THIS_METHOD_SIG_INDEX">
            <summary>
            The hidden 'this' parameter's <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.MethodSigIndex"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.RETURN_TYPE_METHOD_SIG_INDEX">
            <summary>
            The return type parameter's <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.MethodSigIndex"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.Index">
            <summary>
            Gets the parameter index. If the method has a hidden 'this' parameter, that parameter
            has index 0 and the remaining parameters in the method signature start from index 1.
            The method return parameter has index <c>-1</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.MethodSigIndex">
            <summary>
            Gets the index of the parameter in the method signature. See also
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.HIDDEN_THIS_METHOD_SIG_INDEX"/> and <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.RETURN_TYPE_METHOD_SIG_INDEX"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.IsNormalMethodParameter">
            <summary>
            <c>true</c> if it's a normal visible method parameter, i.e., it's not the hidden
            'this' parameter and it's not the method return type parameter.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.IsHiddenThisParameter">
            <summary>
            <c>true</c> if it's the hidden 'this' parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.IsReturnTypeParameter">
            <summary>
            <c>true</c> if it's the method return type parameter
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.Type">
            <summary>
            Gets the parameter type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.Method">
            <summary>
            Gets the owner method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.ParamDef">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef"/> or <c>null</c> if not present
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.HasParamDef">
            <summary>
            <c>true</c> if it has a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.Name">
            <summary>
            Gets the name from <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.ParamDef"/>. If <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.ParamDef"/> is <c>null</c>,
            an empty string is returned.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="paramIndex">Parameter index</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.#ctor(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="paramIndex">Parameter index</param>
            <param name="type">Parameter type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="paramIndex">Parameter index (0 is hidden this param if it exists)</param>
            <param name="methodSigIndex">Index in method signature</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.#ctor(System.Int32,System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="paramIndex">Parameter index (0 is hidden this param if it exists)</param>
            <param name="methodSigIndex">Index in method signature</param>
            <param name="type">Parameter type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.CreateParamDef">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef"/> if it doesn't already exist
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Parameter.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids">
            <summary>
            Custom debug info guids
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream">
            <summary>
            Implements <see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/> and uses a <see cref="T:System.IO.Stream"/> as the underlying
            stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Source stream</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Source stream</param>
            <param name="name">Name of original file or <c>null</c> if unknown.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.Commit(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.LockRegion(System.Int64,System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.Read(System.Byte[],System.Int32,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.Revert">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.Seek(System.Int64,System.Int32,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.SetSize(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Dss.StreamIStream.Write(System.Byte[],System.Int32,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.IMAGE_DEBUG_DIRECTORY">
            <summary>
            IMAGE_DEBUG_DIRECTORY
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress">
            <summary>
            An address in the image
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.Section">
            <summary>
            Section
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.Offset">
            <summary>
            Offset in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.Section"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.#ctor(System.UInt16,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="section">Section</param>
            <param name="offset">Offset in <paramref name="section"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.#ctor(System.UInt16,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="section">Section</param>
            <param name="offset">Offset in <paramref name="section"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.op_LessThanOrEqual(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress)">
            <summary>
            Returns <c>true</c> if <paramref name="a"/> is less than or equal to <paramref name="b"/>
            </summary>
            <param name="a">First <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <param name="b">Second <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.op_LessThan(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress)">
            <summary>
            Returns <c>true</c> if <paramref name="a"/> is less than <paramref name="b"/>
            </summary>
            <param name="a">First <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <param name="b">Second <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.op_GreaterThanOrEqual(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress)">
            <summary>
            Returns <c>true</c> if <paramref name="a"/> is greater than or equal to <paramref name="b"/>
            </summary>
            <param name="a">First <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <param name="b">Second <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.op_GreaterThan(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress)">
            <summary>
            Returns <c>true</c> if <paramref name="a"/> is greater than <paramref name="b"/>
            </summary>
            <param name="a">First <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <param name="b">Second <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.op_Equality(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress)">
            <summary>
            Returns <c>true</c> if <paramref name="a"/> is equal to <paramref name="b"/>
            </summary>
            <param name="a">First <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <param name="b">Second <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.op_Inequality(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress)">
            <summary>
            Returns <c>true</c> if <paramref name="a"/> is not equal to <paramref name="b"/>
            </summary>
            <param name="a">First <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <param name="b">Second <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.CompareTo(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress)">
            <summary>
            Compares this instance with <paramref name="other"/> and returns less than 0 if it's
            less than <paramref name="other"/>, 0 if it's equal to <paramref name="other"/> and
            greater than 0 if it's greater than <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.Equals(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress)">
            <summary>
            Compares this to another instance
            </summary>
            <param name="other">The other one</param>
            <returns><c>true</c> if they're equal</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.Equals(System.Object)">
            <summary>
            Compares this to another instance
            </summary>
            <param name="obj">The other one</param>
            <returns><c>true</c> if they're equal</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.ToString">
            <summary>
            ToString() override
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress.ReadAddress(Datadog.Trace.Vendors.dnlib.IO.DataReader@)">
            <summary>
            Reads a 32-bit offset followed by a 16-bit section and creates a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbAddress"/>
            </summary>
            <param name="reader">Reader</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbException">
            <summary>
            Exception that is thrown when <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbReader"/> encounters an error.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbException.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbReader">
            <summary>
            A managed PDB reader implementation for .NET modules.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.PdbReader.Read(Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Read the PDB in the specified stream.
            </summary>
            <param name="reader">PDB file data reader</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.SymbolReaderFactory">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader"/> instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Managed.SymbolReaderFactory.Create(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderContext,Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader"/> instance
            </summary>
            <param name="pdbContext">PDB context</param>
            <param name="pdbStream">PDB file stream which is now owned by this method</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader"/> instance or <c>null</c>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant">
            <summary>
            A constant in a method scope, eg. "const int SomeConstant = 123;"
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.Name">
            <summary>
            Gets/sets the name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.Type">
            <summary>
            Gets/sets the type of the constant
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.Value">
            <summary>
            Gets/sets the value of the constant
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.#ctor(System.String,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of constant</param>
            <param name="type">Type of constant</param>
            <param name="value">Constant value</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind">
            <summary>
            Custom debug info kind
            </summary>
            <remarks>See <c>CustomDebugInfoKind</c> in Roslyn source code</remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.UsingGroups">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUsingGroupsCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.ForwardMethodInfo">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardMethodInfoCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.ForwardModuleInfo">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardModuleInfoCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineHoistedLocalScopesCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.StateMachineTypeName">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineTypeNameCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.DynamicLocals">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalsCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLocalSlotMapCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.EditAndContinueLambdaMap">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLambdaMapCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.TupleElementNames">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNamesCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.TupleElementNames_PortablePdb">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PortablePdbTupleElementNamesCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.DefaultNamespace">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDefaultNamespaceCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.DynamicLocalVariables">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalVariablesCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.EmbeddedSource">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEmbeddedSourceCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.SourceLink">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceLinkCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.SourceServer">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceServerCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.AsyncMethod">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.IteratorMethod">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbIteratorMethodCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.CompilationMetadataReferences">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferencesCustomDebugInfo"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.CompilationOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationOptionsCustomDebugInfo"/>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfo">
            <summary>
            Base class of custom debug info added to the PDB file by the compiler
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfo.Kind">
            <summary>
            Gets the custom debug info kind
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUnknownCustomDebugInfo">
            <summary>
            Unknown custom debug info. If you see an instance of this class, you're using an old dnlib version or
            dnlib hasn't been updated to support this new custom debug info kind.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUnknownCustomDebugInfo.Kind">
            <summary>
            Gets the custom debug info kind
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUnknownCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUnknownCustomDebugInfo.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUnknownCustomDebugInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="kind">Custom debug info kind</param>
            <param name="data">Raw custom debug info data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUnknownCustomDebugInfo.#ctor(System.Guid,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="guid">Custom debug info guid</param>
            <param name="data">Raw custom debug info data</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUsingGroupsCustomDebugInfo">
            <summary>
            Contains sizes of using groups
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUsingGroupsCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.UsingGroups"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUsingGroupsCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUsingGroupsCustomDebugInfo.UsingCounts">
            <summary>
            Gets the using counts
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUsingGroupsCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUsingGroupsCustomDebugInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">Initial capacity of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbUsingGroupsCustomDebugInfo.UsingCounts"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardMethodInfoCustomDebugInfo">
            <summary>
            Contains a reference to another method that contains the import strings
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardMethodInfoCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.ForwardMethodInfo"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardMethodInfoCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardMethodInfoCustomDebugInfo.Method">
            <summary>
            Gets/sets the referenced method
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardMethodInfoCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardMethodInfoCustomDebugInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="method">The referenced method</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardModuleInfoCustomDebugInfo">
            <summary>
            Contains a reference to another method that contains the per-module debug info (assembly reference aliases)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardModuleInfoCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.ForwardModuleInfo"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardModuleInfoCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardModuleInfoCustomDebugInfo.Method">
            <summary>
            Gets/sets the referenced method
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardModuleInfoCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbForwardModuleInfoCustomDebugInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="method">The referenced method</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope">
            <summary>
            State machine hosted local scope info
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope.IsSynthesizedLocal">
            <summary>
            true if it's a syntesized local (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope.Start"/> and <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope.End"/> are both null)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope.Start">
            <summary>
            The instruction of the first operation in the scope. Can be null if it's a synthesized local
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope.End">
            <summary>
            The instruction of the first operation outside of the scope or null if it ends at the last instruction in the body.
            Can also be null if it's a synthesized local (in which case <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope.Start"/> is also null, see <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope.IsSynthesizedLocal"/>)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.StateMachineHoistedLocalScope.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start of the scope</param>
            <param name="end">First instruction after the end of the scope</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineHoistedLocalScopesCustomDebugInfo">
            <summary>
            Contains local scopes for state machine hoisted local variables.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineHoistedLocalScopesCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineHoistedLocalScopesCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineHoistedLocalScopesCustomDebugInfo.Scopes">
            <summary>
            Gets the scopes
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineHoistedLocalScopesCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineHoistedLocalScopesCustomDebugInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">Initial capacity of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineHoistedLocalScopesCustomDebugInfo.Scopes"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineTypeNameCustomDebugInfo">
            <summary>
            Contains the state machine type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineTypeNameCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.StateMachineTypeName"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineTypeNameCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineTypeNameCustomDebugInfo.Type">
            <summary>
            Gets/sets the state machine type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineTypeNameCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbStateMachineTypeNameCustomDebugInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Constructor
            </summary>
            <param name="type">State machine type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalsCustomDebugInfo">
            <summary>
            Contains dynamic flags for local variables and constants
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalsCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.DynamicLocals"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalsCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalsCustomDebugInfo.Locals">
            <summary>
            Gets the dynamic locals
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalsCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalsCustomDebugInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">Initial capacity of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalsCustomDebugInfo.Locals"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal">
            <summary>
            Dynamic local info
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.Flags">
            <summary>
            Gets the dynamic flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.Name">
            <summary>
            Gets/sets the name of the local. The name must have at most 64 characters and no char can be NUL (0x0000).
            If null is written, <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.Name"/> is returned instead.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.IsConstant">
            <summary>
            true if it's a constant and not a variable (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.Local"/> is null)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.IsVariable">
            <summary>
            true if it's a variable (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.Local"/> is not null)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.Local">
            <summary>
            Gets/sets the local. Could be null if there's no local (it's a 'const' local).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">Initial capacity of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocal.Flags"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLocalSlotMapCustomDebugInfo">
            <summary>
            Contains the EnC local variable slot map
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLocalSlotMapCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLocalSlotMapCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLocalSlotMapCustomDebugInfo.Data">
            <summary>
            Gets the data. Spec: https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PortablePdb-Metadata.md#EditAndContinueLocalSlotMap
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLocalSlotMapCustomDebugInfo.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Raw custom debug info data</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLambdaMapCustomDebugInfo">
            <summary>
            Contains the EnC lambda map
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLambdaMapCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.EditAndContinueLambdaMap"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLambdaMapCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLambdaMapCustomDebugInfo.Data">
            <summary>
            Gets the data. Spec: https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PortablePdb-Metadata.md#EditAndContinueLambdaAndClosureMap
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEditAndContinueLambdaMapCustomDebugInfo.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Raw custom debug info data</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNamesCustomDebugInfo">
            <summary>
            Contains tuple element names for local variables and constants
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNamesCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.TupleElementNames"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNamesCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNamesCustomDebugInfo.Names">
            <summary>
            Gets the tuple element names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNamesCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNamesCustomDebugInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">Initial capacity of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNamesCustomDebugInfo.Names"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames">
            <summary>
            Tuple element name info
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.Name">
            <summary>
            Gets/sets the name of the local. If null is written, <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local.Name"/> is returned instead.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.Local">
            <summary>
            Gets/sets the local. It's null if it's a constant, and non-null if it's a variable
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.IsConstant">
            <summary>
            true if it's a constant. Constants have a scope (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.ScopeStart"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.ScopeEnd"/>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.IsVariable">
            <summary>
            true if it's a variable. Variables don't have a scope (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.ScopeStart"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.ScopeEnd"/>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.ScopeStart">
            <summary>
            Gets/sets the start of the scope or null. Only constants have a scope.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.ScopeEnd">
            <summary>
            Gets/sets the end of the scope or null if it has no scope or if the scope ends at the end of the body. Only constants have a scope.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.TupleElementNames">
            <summary>
            Gets the tuple element names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">Initial capacity of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbTupleElementNames.TupleElementNames"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PortablePdbTupleElementNamesCustomDebugInfo">
            <summary>
            Contains tuple element names for local variables and constants
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PortablePdbTupleElementNamesCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.TupleElementNames_PortablePdb"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PortablePdbTupleElementNamesCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PortablePdbTupleElementNamesCustomDebugInfo.Names">
            <summary>
            Gets the tuple element names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PortablePdbTupleElementNamesCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PortablePdbTupleElementNamesCustomDebugInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">Initial capacity of <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PortablePdbTupleElementNamesCustomDebugInfo.Names"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodSteppingInformationCustomDebugInfo">
            <summary>
            Async method stepping info
            
            It's internal and translated to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodSteppingInformationCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.Unknown"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodSteppingInformationCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodSteppingInformationCustomDebugInfo.CatchHandler">
            <summary>
            Gets the catch handler instruction or null
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodSteppingInformationCustomDebugInfo.AsyncStepInfos">
            <summary>
            Gets all async step infos
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodSteppingInformationCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDefaultNamespaceCustomDebugInfo">
            <summary>
            Default namespace
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDefaultNamespaceCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.DefaultNamespace"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDefaultNamespaceCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDefaultNamespaceCustomDebugInfo.Namespace">
            <summary>
            Gets the default namespace
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDefaultNamespaceCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDefaultNamespaceCustomDebugInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="defaultNamespace">Default namespace</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalVariablesCustomDebugInfo">
            <summary>
            Dynamic flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalVariablesCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.DynamicLocalVariables"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalVariablesCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalVariablesCustomDebugInfo.Flags">
            <summary>
            Gets/sets the dynamic flags
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalVariablesCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDynamicLocalVariablesCustomDebugInfo.#ctor(System.Boolean[])">
            <summary>
            Constructor
            </summary>
            <param name="flags">Dynamic flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEmbeddedSourceCustomDebugInfo">
            <summary>
            Contains the source code
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEmbeddedSourceCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.EmbeddedSource"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEmbeddedSourceCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEmbeddedSourceCustomDebugInfo.SourceCodeBlob">
            <summary>
            Gets the source code blob.
            
            It's not decompressed and converted to a string because the encoding isn't specified.
            
            https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PortablePdb-Metadata.md#embedded-source-c-and-vb-compilers
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEmbeddedSourceCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbEmbeddedSourceCustomDebugInfo.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="sourceCodeBlob">Source code blob</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceLinkCustomDebugInfo">
            <summary>
            Contains the source link file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceLinkCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.SourceLink"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceLinkCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceLinkCustomDebugInfo.FileBlob">
            <summary>
            Gets the source link file contents
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceLinkCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceLinkCustomDebugInfo.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="fileBlob">Source link file contents</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceServerCustomDebugInfo">
            <summary>
            Contains the source server file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceServerCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.SourceServer"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceServerCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceServerCustomDebugInfo.FileBlob">
            <summary>
            Gets the source server file contents
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceServerCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbSourceServerCustomDebugInfo.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="fileBlob">Source server file contents</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo">
            <summary>
            Async method info
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.AsyncMethod"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo.KickoffMethod">
            <summary>
            Gets/sets the starting method that initiates the async operation
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo.CatchHandlerInstruction">
            <summary>
            Gets/sets the instruction for the compiler generated catch handler that wraps an async method.
            This can be null.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo.StepInfos">
            <summary>
            Gets all step infos used by the debugger
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="stepInfosCapacity">Default capacity for <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo.StepInfos"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncStepInfo">
            <summary>
            Async step info used by debuggers
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncStepInfo.YieldInstruction">
            <summary>
            The yield instruction
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncStepInfo.BreakpointMethod">
            <summary>
            Resume method
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncStepInfo.BreakpointInstruction">
            <summary>
            Resume instruction (where the debugger puts a breakpoint)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncStepInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Constructor
            </summary>
            <param name="yieldInstruction">The yield instruction</param>
            <param name="breakpointMethod">Resume method</param>
            <param name="breakpointInstruction">Resume instruction (where the debugger puts a breakpoint)</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbIteratorMethodCustomDebugInfo">
            <summary>
            Iterator method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbIteratorMethodCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.IteratorMethod"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbIteratorMethodCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbIteratorMethodCustomDebugInfo.KickoffMethod">
            <summary>
            Gets the kickoff method
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbIteratorMethodCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbIteratorMethodCustomDebugInfo.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Constructor
            </summary>
            <param name="kickoffMethod">Kickoff method</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferencesCustomDebugInfo">
            <summary>
            Compilation metadata references
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferencesCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.CompilationMetadataReferences"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferencesCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferencesCustomDebugInfo.References">
            <summary>
            Gets all references
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferencesCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferenceFlags">
            <summary>
            Compilation metadata reference flags, see https://github.com/dotnet/roslyn/blob/master/docs/features/pdb-compilation-options.md
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferenceFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferenceFlags.Assembly">
            <summary>
            Set if it's an assembly reference, clear if it's a module reference
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferenceFlags.EmbedInteropTypes">
            <summary>
            EmbedInteropTypes was enabled
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference">
            <summary>
            A compilation metadata reference
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference.Name">
            <summary>
            Name of the reference (eg. filename)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference.Aliases">
            <summary>
            Aliases (or an empty string), separated with commas
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference.Timestamp">
            <summary>
            Gets the timestamp stored in the PE header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference.SizeOfImage">
            <summary>
            Gets SizeOfImage stored in the PE header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference.Mvid">
            <summary>
            Gets the MVID stored in the .NET metadata
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReference.#ctor(System.String,System.String,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationMetadataReferenceFlags,System.UInt32,System.UInt32,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of reference</param>
            <param name="aliases">Aliases (or an empty string), separated with commas</param>
            <param name="flags">Reference flags</param>
            <param name="timestamp">Timestamp in PE header</param>
            <param name="sizeOfImage">SizeOfImage in PE header</param>
            <param name="mvid">MVID stored in the .NET metadata</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationOptionsCustomDebugInfo">
            <summary>
            Compilation options
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationOptionsCustomDebugInfo.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfoKind.CompilationOptions"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationOptionsCustomDebugInfo.Guid">
            <summary>
            Gets the custom debug info guid, see <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.CustomDebugInfoGuids"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationOptionsCustomDebugInfo.Options">
            <summary>
            Gets all compilation options, see https://github.com/dotnet/roslyn/blob/master/docs/features/pdb-compilation-options.md .
            Option names (key): see roslyn/src/Compilers/Core/Portable/PEWriter/CompilationOptionNames.cs
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCompilationOptionsCustomDebugInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument">
            <summary>
            A PDB document
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.Url">
            <summary>
            Gets/sets the document URL
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.Language">
            <summary>
            Gets/sets the language GUID. See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.LanguageVendor">
            <summary>
            Gets/sets the language vendor GUID. See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.DocumentType">
            <summary>
            Gets/sets the document type GUID. See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.CheckSumAlgorithmId">
            <summary>
            Gets/sets the checksum algorithm ID. See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.CheckSum">
            <summary>
            Gets/sets the checksum
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument)">
            <summary>
            Constructor
            </summary>
            <param name="symDoc">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument"/> instance</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.#ctor(System.String,System.Guid,System.Guid,System.Guid,System.Guid,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="url">Document URL</param>
            <param name="language">Language. See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants"/></param>
            <param name="languageVendor">Language vendor. See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants"/></param>
            <param name="documentType">Document type. See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants"/></param>
            <param name="checkSumAlgorithmId">Checksum algorithm ID. See <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants"/></param>
            <param name="checkSum">Checksum</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocumentConstants">
            <summary>
            PDB document constants
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbFileKind">
            <summary>
            PDB file kind
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbFileKind.WindowsPDB">
            <summary>
            Windows PDB
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbFileKind.PortablePDB">
            <summary>
            Portable PDB
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbFileKind.EmbeddedPortablePDB">
            <summary>
            Embedded portable PDB
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope">
            <summary>
            Import scope
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope.Parent">
            <summary>
            Gets/sets the parent import scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope.Imports">
            <summary>
            Gets all imports
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope.HasImports">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope.Imports"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind">
            <summary>
            Import kind
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImport">
            <summary>
            PDB import base class
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImport.Kind">
            <summary>
            Gets the import kind
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportNamespace">
            <summary>
            Import namespace
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportNamespace.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.ImportNamespace"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportNamespace.TargetNamespace">
            <summary>
            Gets the target namespace
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportNamespace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportNamespace.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="targetNamespace"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyNamespace">
            <summary>
            Import assembly, namespace
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyNamespace.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.ImportAssemblyNamespace"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyNamespace.TargetAssembly">
            <summary>
            Gets the target assembly
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyNamespace.TargetNamespace">
            <summary>
            Gets the target namespace
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyNamespace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyNamespace.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="targetAssembly"></param>
            <param name="targetNamespace"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportType">
            <summary>
            Import type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportType.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.ImportType"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportType.TargetType">
            <summary>
            Gets the target type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportType.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="targetType"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportXmlNamespace">
            <summary>
            Import xml namespace
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportXmlNamespace.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.ImportXmlNamespace"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportXmlNamespace.Alias">
            <summary>
            Gets the alias
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportXmlNamespace.TargetNamespace">
            <summary>
            Gets the target namespace
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportXmlNamespace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportXmlNamespace.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="alias"></param>
            <param name="targetNamespace"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyReferenceAlias">
            <summary>
            Import assembly reference alias
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyReferenceAlias.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.ImportAssemblyReferenceAlias"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyReferenceAlias.Alias">
            <summary>
            Gets the alias
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyReferenceAlias.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportAssemblyReferenceAlias.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="alias"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyReference">
            <summary>
            Alias assembly reference
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyReference.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.AliasAssemblyReference"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyReference.Alias">
            <summary>
            Gets the alias
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyReference.TargetAssembly">
            <summary>
            Gets the target assembly
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyReference.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyReference.#ctor(System.String,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef)">
            <summary>
            Constructor
            </summary>
            <param name="alias"></param>
            <param name="targetAssembly"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasNamespace">
            <summary>
            Alias namespace
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasNamespace.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.AliasNamespace"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasNamespace.Alias">
            <summary>
            Gets the alias
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasNamespace.TargetNamespace">
            <summary>
            Gets the target namespace
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasNamespace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasNamespace.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="alias"></param>
            <param name="targetNamespace"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyNamespace">
            <summary>
            Alias assembly namespace
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyNamespace.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.AliasAssemblyNamespace"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyNamespace.Alias">
            <summary>
            Gets the alias
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyNamespace.TargetAssembly">
            <summary>
            Gets the target assembly
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyNamespace.TargetNamespace">
            <summary>
            Gets the target namespace
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyNamespace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasAssemblyNamespace.#ctor(System.String,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="alias"></param>
            <param name="targetAssembly"></param>
            <param name="targetNamespace"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasType">
            <summary>
            Alias type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasType.Kind">
            <summary>
            Returns <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportDefinitionKind.AliasType"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasType.Alias">
            <summary>
            Gets the alias
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasType.TargetType">
            <summary>
            Gets the target type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAliasType.#ctor(System.String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="alias"></param>
            <param name="targetType"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal">
            <summary>
            A local variable
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Local,System.String,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocalAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="local"></param>
            <param name="name"></param>
            <param name="attributes"></param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.Local">
            <summary>
            Gets/sets the local
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.Name">
            <summary>
            Gets/sets the name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.Attributes">
            <summary>
            Gets/sets the attributes
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.Index">
            <summary>
            Gets the index of the local
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.IsDebuggerHidden">
            <summary>
            true if it should be hidden in debugger variables windows. Not all compiler generated locals have this flag set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocalAttributes">
            <summary>
            Local attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocalAttributes.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocalAttributes.DebuggerHidden">
            <summary>
            Local should be hidden in debugger variables windows. Not all compiler generated locals have this flag set.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbMethod">
            <summary>
            A PDB method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbMethod.Scope">
            <summary>
            Gets/sets the root scope. It contains all scopes of the method, using namespaces, variables and constants
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbMethod.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions">
            <summary>
            PDB reader options
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions.MicrosoftComReader">
            <summary>
            Use the COM Windows PDB reader instead of the managed Windows PDB reader.
            
            This is NOT recommended since the COM reader can only be called on the same
            thread it was created on. It also requires a Windows OS.
            
            If this is not set, the managed PDB reader will be used.
            
            This option is only used if it's a Windows PDB file, not if it's a Portable PDB file.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions.NoDiaSymReader">
            <summary>
            Don't use Microsoft.DiaSymReader.Native. This is a NuGet package with an updated Windows PDB reader/writer implementation,
            and if it's available at runtime, dnlib will try to use it. If this option is set, dnlib won't use it.
            You have to add a reference to the NuGet package if you want to use it, dnlib has no reference to the NuGet package.
            
            Only used if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions.MicrosoftComReader"/> is set and if it's a Windows PDB file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions.NoOldDiaSymReader">
            <summary>
            Don't use diasymreader.dll's PDB reader that is shipped with .NET Framework.
            
            Only used if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbReaderOptions.MicrosoftComReader"/> is set and if it's a Windows PDB file
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope">
            <summary>
            A PDB scope
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Start">
            <summary>
            Gets/sets the first instruction
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.End">
            <summary>
            Gets/sets the last instruction. It's <c>null</c> if it ends at the end of the method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Scopes">
            <summary>
            Gets all child scopes
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.HasScopes">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Scopes"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Variables">
            <summary>
            Gets all locals in this scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.HasVariables">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Variables"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Namespaces">
            <summary>
            Gets all namespaces (Windows PDBs). Portable PDBs use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.ImportScope"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.HasNamespaces">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Namespaces"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.ImportScope">
            <summary>
            Gets/sets the import scope (Portable PDBs). Windows PDBs use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Namespaces"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Constants">
            <summary>
            Gets all constants
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.HasConstants">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.Constants"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState">
            <summary>
            PDB state for a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.PdbFileKind">
            <summary>
            Gets/sets the PDB file kind. You can change it from portable PDB to embedded portable PDB
            and vice versa. Converting a Windows PDB to a portable PDB isn't supported.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.UserEntryPoint">
            <summary>
            Gets/sets the user entry point method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.Documents">
            <summary>
            Gets all PDB documents
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.HasDocuments">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.Documents"/> is not empty
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbFileKind)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
            <param name="pdbFileKind">PDB file kind</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD)">
            <summary>
            Constructor
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader"/> instance</param>
            <param name="module">Owner module</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.Add(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument)">
            <summary>
            Adds <paramref name="doc"/>
            </summary>
            <param name="doc">New document</param>
            <returns><paramref name="doc"/> if it wasn't inserted, or the already existing document
            if it was already inserted.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.Remove(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument)">
            <summary>
            Removes <paramref name="doc"/>
            </summary>
            <param name="doc">Document</param>
            <returns><c>true</c> if it was removed, <c>false</c> if it wasn't inserted.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.GetExisting(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument)">
            <summary>
            Returns an inserted <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument"/> instance or <c>null</c> if it's not been
            inserted yet.
            </summary>
            <param name="doc">A PDB document</param>
            <returns>The existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument"/> or <c>null</c> if it doesn't exist.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.RemoveAllDocuments">
            <summary>
            Removes all documents
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbState.RemoveAllDocuments(System.Boolean)">
            <summary>
            Removes all documents and optionally returns them
            </summary>
            <param name="returnDocs"><c>true</c> if all the original <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument"/>s
            should be returned.</param>
            <returns>All <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument"/>s if <paramref name="returnDocs"/> is <c>true</c>
            or <c>null</c> if <paramref name="returnDocs"/> is <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Portable.ImportScopeBlobReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module that resolves assembly and type references</param>
            <param name="blobStream">Portable PDB blob stream</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.SequencePoint">
            <summary>
            PDB sequence point
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.SequencePoint.Document">
            <summary>
            PDB document
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.SequencePoint.StartLine">
            <summary>
            Start line
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.SequencePoint.StartColumn">
            <summary>
            Start column
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.SequencePoint.EndLine">
            <summary>
            End line
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.SequencePoint.EndColumn">
            <summary>
            End column
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.SequencePoint.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns>A new cloned instance</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolAsyncStepInfo">
            <summary>
            Async step info
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolAsyncStepInfo.YieldOffset">
            <summary>
            Yield offset
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolAsyncStepInfo.BreakpointOffset">
            <summary>
            Breakpoint offset
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolAsyncStepInfo.BreakpointMethod">
            <summary>
            Breakpoint method token
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolAsyncStepInfo.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="yieldOffset">Yield offset</param>
            <param name="breakpointOffset">Breakpoint offset</param>
            <param name="breakpointMethod">Breakpoint method token</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument">
            <summary>
            A document
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument.URL">
            <summary>
            Gets the URL
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument.LanguageVendor">
            <summary>
            Gets the language vendor
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument.DocumentType">
            <summary>
            Gets the document type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument.CheckSumAlgorithmId">
            <summary>
            Gets the checksum algorithm id
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument.CheckSum">
            <summary>
            Gets the checksum
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolDocument.CustomDebugInfos">
            <summary>
            Gets the custom debug infos
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolMethod">
            <summary>
            A method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolMethod.Token">
            <summary>
            Gets the method token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolMethod.RootScope">
            <summary>
            Gets the root scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolMethod.SequencePoints">
            <summary>
            Gets all sequence points
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolMethod.GetCustomDebugInfos(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfo})">
            <summary>
            Reads custom debug info
            </summary>
            <param name="method">Method</param>
            <param name="body">Method body</param>
            <param name="result">Updated with custom debug info</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolNamespace">
            <summary>
            A namespace
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolNamespace.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader">
            <summary>
            Reads symbols from a PDB file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader.Initialize(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Called by the owner module before any other methods and properties are called
            </summary>
            <param name="module">Owner module</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader.PdbFileKind">
            <summary>
            Gets the PDB file kind
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader.UserEntryPoint">
            <summary>
            Gets the user entry point token or 0 if none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader.Documents">
            <summary>
            Gets all documents
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader.GetMethod(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,System.Int32)">
            <summary>
            Gets a method or returns null if the method doesn't exist in the PDB file
            </summary>
            <param name="method">Method</param>
            <param name="version">Edit and continue version. The first version is 1</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader.GetCustomDebugInfos(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfo})">
            <summary>
            Reads custom debug info
            </summary>
            <param name="token">Token of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomDebugInformation"/> instance</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="result">Updated with custom debug info</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolReader.Dispose">
            <summary>
            Cleans up resources
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope">
            <summary>
            A scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.Method">
            <summary>
            Gets the method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.Parent">
            <summary>
            Gets the parent scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.StartOffset">
            <summary>
            Gets the start offset of the scope in the method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.EndOffset">
            <summary>
            Gets the end offset of the scope in the method
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.Children">
            <summary>
            Gets all child scopes
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.Locals">
            <summary>
            Gets all locals defined in this scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.Namespaces">
            <summary>
            Gets all namespaces in this scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.ImportScope">
            <summary>
            Gets the import scope or null if none
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolScope.GetConstants(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Gets all the constants
            </summary>
            <param name="module">Owner module if a signature must be read from the #Blob</param>
            <param name="gpContext">Generic parameter context</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolSequencePoint">
            <summary>
            Sequence point
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolSequencePoint.Offset">
            <summary>
            IL offset
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolSequencePoint.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolSequencePoint.Line">
            <summary>
            Start line
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolSequencePoint.Column">
            <summary>
            Start column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolSequencePoint.EndLine">
            <summary>
            End line
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolSequencePoint.EndColumn">
            <summary>
            End column
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolVariable">
            <summary>
            A variable
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolVariable.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolVariable.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolVariable.Index">
            <summary>
            Gets the index of the variable
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.Symbols.SymbolVariable.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.WindowsPdb.PdbCustomDebugInfoReader">
            <summary>
            Reads custom debug infos produced by the C# and Visual Basic compilers. They're stored in PDB files
            as PDB method custom attributes with the name "MD2".
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.WindowsPdb.PdbCustomDebugInfoReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfo},System.Byte[])">
            <summary>
            Reads custom debug info
            </summary>
            <param name="method">Method</param>
            <param name="body">The method's body. Needs to be provided by the caller since we're called from
            PDB-init code when the Body property hasn't been initialized yet</param>
            <param name="result">Place all custom debug info in this list</param>
            <param name="data">Custom debug info from the PDB file</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.WindowsPdb.PdbCustomDebugInfoWriter">
            <summary>
            Writes custom debug infos produced by the C# and Visual Basic compilers. They're stored in PDB files
            as PDB method custom attributes with the name "MD2".
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.WindowsPdb.PdbCustomDebugInfoWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.Pdb.WindowsPdb.PdbCustomDebugInfoWriterContext,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfo})">
            <summary>
            Returns the raw custom debug info or null if there was an error
            </summary>
            <param name="metadata">Metadata</param>
            <param name="context">Writer context</param>
            <param name="method">Method</param>
            <param name="customDebugInfos">Custom debug infos to write</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Pdb.WindowsPdb.WindowsPdbWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes">
            <summary>
            P/Invoke attributes, see CorHdr.h/CorPinvokeMap
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.NoMangle">
            <summary>Pinvoke is to use the member name as specified.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetMask">
            <summary>Use this mask to retrieve the CharSet information.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetNotSpec">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetAnsi">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetUnicode">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CharSetAuto">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.BestFitUseAssem">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.BestFitEnabled">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.BestFitDisabled">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.BestFitMask">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.ThrowOnUnmappableCharUseAssem">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.ThrowOnUnmappableCharEnabled">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.ThrowOnUnmappableCharDisabled">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.ThrowOnUnmappableCharMask">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.SupportsLastError">
            <summary>Information about target function. Not relevant for fields.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvMask">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvWinapi">
            <summary>Pinvoke will use native callconv appropriate to target windows platform.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvCdecl">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvStdcall">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvStdCall">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvThiscall">
            <summary>In M9, pinvoke will raise exception.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PInvokeAttributes.CallConvFastcall">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes">
            <summary>
            Property attributes, see CorHdr.h/CorPropertyAttr
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes.SpecialName">
            <summary>property is special.  Name describes how.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes.RTSpecialName">
            <summary>Runtime(metadata internal APIs) should check name encoding.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes.HasDefault">
            <summary>Property has default</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef">
            <summary>
            A high-level representation of a row in the Property table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasConstantTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasSemanticTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Attributes">
            <summary>
            From column Property.PropFlags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Name">
            <summary>
            From column Property.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Type">
            <summary>
            From column Property.Type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.type">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Constant">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.constant">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.constant_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.GetConstant_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.constant"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.ResetConstant">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Constant"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.GetMethod">
            <summary>
            Gets/sets the first getter method. Writing <c>null</c> will clear all get methods.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.SetMethod">
            <summary>
            Gets/sets the first setter method. Writing <c>null</c> will clear all set methods.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.GetMethods">
            <summary>
            Gets all getter methods
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.SetMethods">
            <summary>
            Gets all setter methods
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.OtherMethods">
            <summary>
            Gets the other methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.InitializePropertyMethods_NoLock">
            <summary>
            Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.otherMethods"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.getMethods"/>,
            and <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.setMethods"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.getMethods">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.setMethods">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.otherMethods">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.ResetMethods">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.GetMethods"/>, <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.SetMethods"/>, <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.OtherMethods"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.IsEmpty">
            <summary>
            <c>true</c> if there are no methods attached to this property
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasOtherMethods">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.OtherMethods"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasConstant">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Constant"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.ElementType">
            <summary>
            Gets the constant element type or <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.End"/> if there's no constant
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.PropertySig">
            <summary>
            Gets/sets the property sig
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.DeclaringType">
            <summary>
            Gets/sets the declaring type (owner type)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Datadog#Trace#Vendors#dnlib#DotNet#IMemberRef#DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.DeclaringType2">
            <summary>
            Called by <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.DeclaringType"/> and should normally not be called by any user
            code. Use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.DeclaringType"/> instead. Only call this if you must set the
            declaring type without inserting it in the declaring type's method list.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.declaringType2">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.FullName">
            <summary>
            Gets the full name of the property
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.IsSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes.SpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.IsRuntimeSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes.RTSpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.HasDefault">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes.HasDefault"/> bit
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefUser">
            <summary>
            A Property row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.PropertySig)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="sig">Property signature</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.PropertySig,Datadog.Trace.Vendors.dnlib.DotNet.PropertyAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="sig">Property signature</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD">
            <summary>
            Created from a row in the Property table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD.GetConstant_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>Property</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD.InitializePropertyMethods_NoLock">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey">
            <summary>
            Represents a public key
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey.Token">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey.Data">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Public key data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="hexString">Public key data as a hex string or the string <c>"null"</c>
            to set public key data to <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase">
            <summary>
            Public key / public key token base class
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.data">
            <summary>
            The key data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.IsNullOrEmpty">
            <summary>
            Returns <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.Data"/> is <c>null</c> or empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.IsNull">
            <summary>
            Returns <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.Data"/> is <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.Data">
            <summary>
            Gets/sets key data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.Token">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Key data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="hexString">Key data as a hex string or the string <c>"null"</c>
            to set key data to <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.IsNullOrEmpty2(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase)">
            <summary>
            Checks whether a public key or token is null or empty
            </summary>
            <param name="a">Public key or token instance</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.ToPublicKeyToken(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase)">
            <summary>
            Returns a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/>
            </summary>
            <param name="pkb">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/> instance</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.TokenCompareTo(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase,Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase)">
            <summary>
            Compares two <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase"/>s as <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/>s
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.TokenEquals(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase,Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase)">
            <summary>
            Checks whether two public key tokens are equal
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.TokenCompareTo(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken,Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken)">
            <summary>
            Compares two <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/>s
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.TokenEquals(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken,Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken)">
            <summary>
            Checks whether two public key tokens are equal
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.GetHashCodeToken(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase)">
            <summary>
            Gets the public key token hash code
            </summary>
            <param name="a">Public key or token</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken)">
            <summary>
            Gets the public key token hash code
            </summary>
            <param name="a">Public key token</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.CreatePublicKey(System.Byte[])">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey"/>
            </summary>
            <param name="data">Public key data or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKey"/> instance or <c>null</c> if <paramref name="data"/>
            was <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.CreatePublicKeyToken(System.Byte[])">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/>
            </summary>
            <param name="data">Public key token data or <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/> instance or <c>null</c> if <paramref name="data"/>
            was <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.GetRawData(Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase)">
            <summary>
            Gets the raw public key / public key token byte array
            </summary>
            <param name="pkb">The instance or <c>null</c></param>
            <returns>Raw public key / public key token data or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken">
            <summary>
            Represents a public key token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken.Token">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken.#ctor(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyToken.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter">
            <summary>
            Recursion counter
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter.MAX_RECURSION_COUNT">
            <summary>
            Max recursion count. If this is reached, we won't continue, and will use a default value.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter.Counter">
            <summary>
            Gets the recursion counter
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter.Increment">
            <summary>
            Increments <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter.counter"/> if it's not too high. <c>ALL</c> instance methods
            that can be called recursively must call this method and <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter.Decrement"/>
            (if this method returns <c>true</c>)
            </summary>
            <returns><c>true</c> if it was incremented and caller can continue, <c>false</c> if
            it was <c>not</c> incremented and the caller must return to its caller.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter.Decrement">
            <summary>
            Must be called before returning to caller if <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter.Increment"/>
            returned <c>true</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.RecursionCounter.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionExtensions">
            <summary>
            Extension methods for reflection types, methods, fields
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionExtensions.IsSZArray(System.Type)">
            <summary>
            Checks whether it's a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.SZArray"/>
            </summary>
            <param name="self">The type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionExtensions.GetElementType2(System.Type)">
            <summary>
            Gets a <see cref="T:System.Type"/>'s <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ElementType"/>
            </summary>
            <param name="a">The type</param>
            <returns>The type's element type</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionExtensions.IsGenericButNotGenericMethodDefinition(System.Reflection.MethodBase)">
            <summary>
            Returns <c>true</c> if <paramref name="mb"/> is a generic method, but
            not a generic method definition, i.e., a MethodSpec.
            </summary>
            <param name="mb">The method</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionExtensions.MustTreatTypeAsGenericInstType(System.Type,System.Type)">
            <summary>
            Checks whether a parameter/prop/event type should be treated as if it is really a
            generic instance type and not a generic type definition. In the .NET metadata (method
            sig), the parameter is a generic instance type, but the CLR treats it as if it's just
            a generic type def. This seems to happen only if the parameter type is exactly the same
            type as the declaring type, eg. a method similar to: <c>MyType&lt;!0&gt; MyType::SomeMethod()</c>.
            </summary>
            <param name="declaringType">Declaring type of method/event/property</param>
            <param name="t">Parameter/property/event type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionExtensions.IsTypeDef(System.Type)">
            <summary>
            Checks whether <paramref name="type"/> is a type definition and not a type spec
            (eg. pointer or generic type instantiation)
            </summary>
            <param name="type">this</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ResolveException">
            <summary>
            Resolve exception base class
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResolveException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResolveException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResolveException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResolveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolveException">
            <summary>
            Thrown if an assembly couldn't be resolved
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolveException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolveException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolveException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyResolveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">
            <summary>
            Thrown if a type couldn't be resolved
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException">
            <summary>
            Thrown if a method/field couldn't be resolved
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MemberRefResolveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resolver">
            <summary>
            Resolves types, methods, fields
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resolver.ProjectWinMDRefs">
            <summary>
            <c>true</c> to project WinMD types to CLR types, eg. <c>Windows.UI.Xaml.Interop.TypeName</c>
            gets converted to <c>System.Type</c> before trying to resolve the type. This is enabled
            by default.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resolver.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyResolver)">
            <summary>
            Constructor
            </summary>
            <param name="assemblyResolver">The assembly resolver</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resolver.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ResourceType">
            <summary>
            Type of resource
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ResourceType.Embedded">
            <summary>
            It's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ResourceType.AssemblyLinked">
            <summary>
            It's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResource"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ResourceType.Linked">
            <summary>
            It's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource"/>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resource">
            <summary>
            Resource base class
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.Offset">
            <summary>
            Gets/sets the offset of the resource
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.Name">
            <summary>
            Gets/sets the name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.Attributes">
            <summary>
            Gets/sets the flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.ResourceType">
            <summary>
            Gets the type of resource
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.Visibility">
            <summary>
            Gets/sets the visibility
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.IsPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes.Public"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.IsPrivate">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes.Private"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resource.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resource.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Resource.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resource.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resource.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Resource.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resource.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resource.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="flags">flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource">
            <summary>
            A resource that is embedded in a .NET module. This is the most common type of resource.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource.Length">
            <summary>
            Gets the length of the data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource.ResourceType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of resource</param>
            <param name="data">Resource data</param>
            <param name="flags">Resource flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of resource</param>
            <param name="dataReaderFactory">Data reader factory</param>
            <param name="offset">Offset of resource data</param>
            <param name="length">Length of resource data</param>
            <param name="flags">Resource flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource.CreateReader">
            <summary>
            Gets a data reader that can access the resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource.ToString">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResourceMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResourceMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResourceMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResourceMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResource">
            <summary>
            A reference to a resource in another assembly
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResource.ResourceType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResource.Assembly">
            <summary>
            Gets/sets the assembly reference
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResource.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef,Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of resource</param>
            <param name="asmRef">Assembly reference</param>
            <param name="flags">Resource flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResource.ToString">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResourceMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResourceMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResourceMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResourceMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource">
            <summary>
            A resource that is stored in a file on disk
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource.ResourceType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource.File">
            <summary>
            Gets/sets the file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource.Hash">
            <summary>
            Gets/sets the hash
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource.FileName">
            <summary>
            Gets/sets the file name
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FileDef,Datadog.Trace.Vendors.dnlib.DotNet.ManifestResourceAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of resource</param>
            <param name="file">The file</param>
            <param name="flags">Resource flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource.ToString">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResourceMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResourceMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResourceMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResourceMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection">
            <summary>
            A collection of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resource"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.#ctor(Datadog.Trace.Vendors.dnlib.Utils.IListListener{Datadog.Trace.Vendors.dnlib.DotNet.Resource})">
            <summary>
            Constructor
            </summary>
            <param name="listener">List listener</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.#ctor(System.Int32,System.Object,System.Func{System.Object,System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.Resource})">
            <summary>
            Constructor
            </summary>
            <param name="length">Initial length of the list</param>
            <param name="context">Context passed to <paramref name="readOriginalValue"/></param>
            <param name="readOriginalValue">Delegate instance that returns original values</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.IndexOf(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds the index of a resource
            </summary>
            <param name="name">Name of resource</param>
            <returns>The index of the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resource"/> or <c>-1</c> if none was found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.IndexOfEmbeddedResource(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds the index of an embedded resource
            </summary>
            <param name="name">Name of resource</param>
            <returns>The index of the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource"/> or <c>-1</c> if none was found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.IndexOfAssemblyLinkedResource(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds the index of an assembly linked resource
            </summary>
            <param name="name">Name of resource</param>
            <returns>The index of the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResource"/> or <c>-1</c> if none was found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.IndexOfLinkedResource(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds the index of a linked resource
            </summary>
            <param name="name">Name of resource</param>
            <returns>The index of the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource"/> or <c>-1</c> if none was found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.Find(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a resource
            </summary>
            <param name="name">Name of resource</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resource"/> or <c>null</c> if none was found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.FindEmbeddedResource(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds an embedded resource
            </summary>
            <param name="name">Name of resource</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource"/> or <c>null</c> if none was found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.FindAssemblyLinkedResource(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds an assembly linked resource
            </summary>
            <param name="name">Name of resource</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyLinkedResource"/> or <c>null</c> if none was found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ResourceCollection.FindLinkedResource(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a linked resource
            </summary>
            <param name="name">Name of resource</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.LinkedResource"/> or <c>null</c> if none was found</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BuiltInResourceData">
            <summary>
            Built-in resource data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BuiltInResourceData.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BuiltInResourceData.Code">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BuiltInResourceData.StartOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BuiltInResourceData.EndOffset">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BuiltInResourceData.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="code">Type of data</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BuiltInResourceData.WriteData(System.IO.BinaryWriter,System.Runtime.Serialization.IFormatter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BuiltInResourceData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.IResourceData">
            <summary>
            Implemented by all resource data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.IResourceData.Code">
            <summary>
            Gets the type of data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.IResourceData.StartOffset">
            <summary>
            Start offset of the section in the file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.IResourceData.EndOffset">
            <summary>
            End offset of the section in the file. This is one byte after the last
            valid offset in the section.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.IResourceData.WriteData(System.IO.BinaryWriter,System.Runtime.Serialization.IFormatter)">
            <summary>
            Writes the data
            </summary>
            <param name="writer">Writer</param>
            <param name="formatter">Formatter if needed by implementer</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory">
            <summary>
            Creates resource data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Module">
            <summary>
            Gets the owner module
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Count">
            <summary>
            Gets number of user data types
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.CreateNull">
            <summary>
            Create null data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.String)">
            <summary>
            Creates <see cref="T:System.String"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Boolean)">
            <summary>
            Creates <see cref="T:System.Boolean"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Char)">
            <summary>
            Creates <see cref="T:System.Char"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Byte)">
            <summary>
            Creates <see cref="T:System.Byte"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.SByte)">
            <summary>
            Creates <see cref="T:System.SByte"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Int16)">
            <summary>
            Creates <see cref="T:System.Int16"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.UInt16)">
            <summary>
            Creates <see cref="T:System.UInt16"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Int32)">
            <summary>
            Creates <see cref="T:System.Int32"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.UInt32)">
            <summary>
            Creates <see cref="T:System.UInt32"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Int64)">
            <summary>
            Creates <see cref="T:System.Int64"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.UInt64)">
            <summary>
            Creates <see cref="T:System.UInt64"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Single)">
            <summary>
            Creates <see cref="T:System.Single"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Double)">
            <summary>
            Creates <see cref="T:System.Double"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Decimal)">
            <summary>
            Creates <see cref="T:System.Decimal"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.DateTime)">
            <summary>
            Creates <see cref="T:System.DateTime"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.TimeSpan)">
            <summary>
            Creates <see cref="T:System.TimeSpan"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.Create(System.Byte[])">
            <summary>
            Creates <see cref="T:System.Byte"/> array data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.CreateStream(System.Byte[])">
            <summary>
            Creates <see cref="T:System.IO.Stream"/> data
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.CreateSerialized(System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType)">
            <summary>
            Creates serialized data
            </summary>
            <param name="value">Serialized data</param>
            <param name="type">Type of serialized data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.CreateSerialized(System.Byte[])">
            <summary>
            Creates serialized data
            </summary>
            <param name="value">Serialized data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.CreateUserResourceType(System.String)">
            <summary>
            Creates a user type. If the type already exists, the existing value is returned.
            </summary>
            <param name="fullName">Full name of type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.CreateUserResourceType(System.String,System.Boolean)">
            <summary>
            Creates a user type. If the type already exists, the existing value is returned.
            </summary>
            <param name="fullName">Full name of type</param>
            <param name="useFullName">Use <paramref name="fullName"/> without converting it to a
            type in an existing assembly reference</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.GetAssemblyFullName(System.String)">
            <summary>
            Converts an assembly simple name (eg. mscorlib) to the full name of the assembly,
            which includes the version, public key token, etc. Returns <c>null</c> if it's
            unknown.
            </summary>
            <param name="simpleName">Simple name of assembly</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceDataFactory.GetSortedTypes">
            <summary>
            Gets all types sorted by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElement">
            <summary>
            Resource element
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElement.Name">
            <summary>
            Name of resource
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElement.ResourceData">
            <summary>
            Data of resource
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElement.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElementSet">
            <summary>
            Resource element set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElementSet.Count">
            <summary>
            Gets the number of elements in the set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElementSet.ResourceElements">
            <summary>
            Gets all resource elements
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElementSet.Add(Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Adds a new resource to the set, overwriting any existing resource
            </summary>
            <param name="elem"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReaderException">
            <summary>
            Thrown by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReader"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReaderException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReaderException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.CreateResourceDataDelegate">
            <summary>
            Gets called to create a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.IResourceData"/> from serialized data. Returns <c>null</c>
            if a default <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.IResourceData"/> instance should be created.
            </summary>
            <param name="resourceDataFactory">ResourceDataFactory</param>
            <param name="type">Serialized type</param>
            <param name="serializedData">Serialized data</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReader">
            <summary>
            Reads .NET resources
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReader.CouldBeResourcesFile(Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Returns true if it's possibly resources file data
            </summary>
            <param name="reader">Reader</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Reads a .NET resource
            </summary>
            <param name="module">Owner module</param>
            <param name="reader">Data of resource</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceReader.Read(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.Resources.CreateResourceDataDelegate)">
            <summary>
            Reads a .NET resource
            </summary>
            <param name="module">Owner module</param>
            <param name="reader">Data of resource</param>
            <param name="createResourceDataDelegate">Call back that gets called to create a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.IResourceData"/> instance. Can be null.</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode">
            <summary>
            Type of resource
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Null">
            <summary>
            null
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.String">
            <summary>
            <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Boolean">
            <summary>
            <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Char">
            <summary>
            <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Byte">
            <summary>
            <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.SByte">
            <summary>
            <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Int16">
            <summary>
            <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.UInt16">
            <summary>
            <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Int32">
            <summary>
            <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.UInt32">
            <summary>
            <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Int64">
            <summary>
            <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.UInt64">
            <summary>
            <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Single">
            <summary>
            <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Double">
            <summary>
            <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Decimal">
            <summary>
            <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.DateTime">
            <summary>
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.DateTime"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.TimeSpan">
            <summary>
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.TimeSpan"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.ByteArray">
            <summary>
            <see cref="T:System.Byte"/> array
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Stream">
            <summary>
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.Stream"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode.UserTypes">
            <summary>
            Start of user types
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceWriter">
            <summary>
            Writes .NET resources
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.IO.Stream,Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceElementSet)">
            <summary>
            Write .NET resources
            </summary>
            <param name="module">Owner module</param>
            <param name="stream">Output stream</param>
            <param name="resources">.NET resources</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceData">
            <summary>
            Base class of all user data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceData.TypeName">
            <summary>
            Full name including assembly of type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceData.Code">
            <summary>
            User type code
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceData.StartOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceData.EndOffset">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceData.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType)">
            <summary>
            Constructor
            </summary>
            <param name="type">User resource type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceData.WriteData(System.IO.BinaryWriter,System.Runtime.Serialization.IFormatter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BinaryResourceData">
            <summary>
            Binary data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BinaryResourceData.Data">
            <summary>
            Gets the raw data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BinaryResourceData.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="type">User resource type</param>
            <param name="data">Raw serialized data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BinaryResourceData.WriteData(System.IO.BinaryWriter,System.Runtime.Serialization.IFormatter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.BinaryResourceData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType">
            <summary>
            User resource type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType.Name">
            <summary>
            Full name including assembly of type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType.Code">
            <summary>
            User type code
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType.#ctor(System.String,Datadog.Trace.Vendors.dnlib.DotNet.Resources.ResourceTypeCode)">
            <summary>
            Constructor
            </summary>
            <param name="name">Full name including assembly of type</param>
            <param name="code">User type code</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Resources.UserResourceType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction">
            <summary>
            Security action. See CorHdr.h/CorDeclSecurity
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.ActionMask">
            <summary>Mask allows growth of enum.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.ActionNil">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.Request">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.Demand">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.Assert">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.Deny">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.PermitOnly">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.LinktimeCheck">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.LinkDemand">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.InheritanceCheck">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.InheritDemand">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.RequestMinimum">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.RequestOptional">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.RequestRefuse">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.PrejitGrant">
            <summary>Persisted grant set at prejit time</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.PreJitGrant">
            <summary>Persisted grant set at prejit time</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.PrejitDenied">
            <summary>Persisted denied set at prejit time</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.PreJitDeny">
            <summary>Persisted denied set at prejit time</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.NonCasDemand">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.NonCasLinkDemand">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.NonCasInheritance">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAction.MaximumValue">
            <summary>Maximum legal value</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute">
            <summary>
            A <c>DeclSecurity</c> security attribute
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.AttributeType">
            <summary>
            Gets/sets the attribute type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.TypeFullName">
            <summary>
            Gets the full name of the attribute type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.NamedArguments">
            <summary>
            Gets all named arguments (field and property values)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.HasNamedArguments">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.NamedArguments"/> is not empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.Fields">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/>s that are field arguments
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.Properties">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument"/>s that are property arguments
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.CreateFromXml(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/> from an XML string.
            </summary>
            <param name="module">Owner module</param>
            <param name="xml">XML</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="attrType">Attribute type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument})">
            <summary>
            Constructor
            </summary>
            <param name="attrType">Attribute type</param>
            <param name="namedArguments">Named arguments that will be owned by this instance</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType">
            <summary>
            See CorSerializationType/CorHdr.h
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.Undefined">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.Boolean">
            <summary>System.Boolean</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.Char">
            <summary>System.Char</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.I1">
            <summary>System.SByte</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.U1">
            <summary>System.Byte</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.I2">
            <summary>System.Int16</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.U2">
            <summary>System.UInt16</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.I4">
            <summary>System.Int32</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.U4">
            <summary>System.UInt32</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.I8">
            <summary>System.Int64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.U8">
            <summary>System.UInt64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.R4">
            <summary>System.Single</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.R8">
            <summary>System.Double</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.String">
            <summary>System.String</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.SZArray">
            <summary>Single-dimension, zero lower bound array ([])</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.Type">
            <summary>System.Type</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.TaggedObject">
            <summary>Boxed value type</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.Field">
            <summary>A field</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.Property">
            <summary>A property</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SerializationType.Enum">
            <summary>An enum</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer">
            <summary>
            Compares types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.Instance">
            <summary>
            Default instance
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.CaseInsensitive">
            <summary>
            Case insensitive names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Comparison options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IType,Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer">
            <summary>
            Compares fields
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.CompareDeclaringTypes">
            <summary>
            Compares the declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.DontCompareDeclaringTypes">
            <summary>
            Doesn't compare the declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.CaseInsensitiveCompareDeclaringTypes">
            <summary>
            Compares the declaring types, case insensitive names
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.CaseInsensitiveDontCompareDeclaringTypes">
            <summary>
            Doesn't compare the declaring types, case insensitive names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Comparison options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IField,Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef,Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FieldEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer">
            <summary>
            Compares methods
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.CompareDeclaringTypes">
            <summary>
            Compares the declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.DontCompareDeclaringTypes">
            <summary>
            Doesn't compare the declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.CaseInsensitiveCompareDeclaringTypes">
            <summary>
            Compares the declaring types, case insensitive names
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.CaseInsensitiveDontCompareDeclaringTypes">
            <summary>
            Doesn't compare the declaring types, case insensitive names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Comparison options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IMethod,Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec,Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.MethodEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyEqualityComparer">
            <summary>
            Compares properties
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyEqualityComparer.CompareDeclaringTypes">
            <summary>
            Compares the declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyEqualityComparer.DontCompareDeclaringTypes">
            <summary>
            Doesn't compare the declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyEqualityComparer.CaseInsensitiveCompareDeclaringTypes">
            <summary>
            Compares the declaring types, case insensitive names
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.PropertyEqualityComparer.CaseInsensitiveDontCompareDeclaringTypes">
            <summary>
            Doesn't compare the declaring types, case insensitive names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyEqualityComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Comparison options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef,Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PropertyEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.EventEqualityComparer">
            <summary>
            Compares events
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventEqualityComparer.CompareDeclaringTypes">
            <summary>
            Compares the declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventEqualityComparer.DontCompareDeclaringTypes">
            <summary>
            Doesn't compare the declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventEqualityComparer.CaseInsensitiveCompareDeclaringTypes">
            <summary>
            Compares the declaring types, case insensitive names
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.EventEqualityComparer.CaseInsensitiveDontCompareDeclaringTypes">
            <summary>
            Doesn't compare the declaring types, case insensitive names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventEqualityComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Comparison options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.EventDef,Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.EventEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer">
            <summary>
            Compares calling convention signatures
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.Instance">
            <summary>
            Default instance
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.CaseInsensitive">
            <summary>
            Case insensitive names
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Comparison options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig,Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig,Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.PropertySig,Datadog.Trace.Vendors.dnlib.DotNet.PropertySig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.PropertySig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.LocalSig,Datadog.Trace.Vendors.dnlib.DotNet.LocalSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.LocalSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig,Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions">
            <summary>
            Decides how to compare types, sigs, etc
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.DontCompareTypeScope">
            <summary>
            Don't compare a type's (assembly/module) scope
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CompareMethodFieldDeclaringType">
            <summary>
            Compares a method/field's declaring type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.ComparePropertyDeclaringType">
            <summary>
            Compares a property's declaring type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CompareEventDeclaringType">
            <summary>
            Compares an event's declaring type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CompareDeclaringTypes">
            <summary>
            Compares method / field / property / event declaring types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CompareSentinelParams">
            <summary>
            Compares parameters after a sentinel in method sigs. Should not be enabled when
            comparing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig"/>s against <see cref="T:System.Reflection.MethodInfo"/>s since it's
            not possible to get those sentinel params from a <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CompareAssemblyPublicKeyToken">
            <summary>
            Compares assembly public key token
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CompareAssemblyVersion">
            <summary>
            Compares assembly version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CompareAssemblyLocale">
            <summary>
            Compares assembly locale
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.TypeRefCanReferenceGlobalType">
            <summary>
            If set, a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> and an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/> can reference the
            global <c>&lt;Module&gt;</c> type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.DontCompareReturnType">
            <summary>
            Don't compare a method/property's return type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CaseInsensitiveTypeNamespaces">
            <summary>
            Type namespaces are case insensitive
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CaseInsensitiveTypeNames">
            <summary>
            Type names (not namespaces) are case insensitive
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CaseInsensitiveTypes">
            <summary>
            Type names and namespaces are case insensitive
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CaseInsensitiveMethodFieldNames">
            <summary>
            Method and field names are case insensitive
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CaseInsensitivePropertyNames">
            <summary>
            Property names are case insensitive
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CaseInsensitiveEventNames">
            <summary>
            Event names are case insensitive
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.CaseInsensitiveAll">
            <summary>
            Type namespaces, type names, method names, field names, property names
            and event names are all case insensitive
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.PrivateScopeFieldIsComparable">
            <summary>
            A field that is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.PrivateScope"/> can compare equal to
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.PrivateScopeMethodIsComparable">
            <summary>
            A method that is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.PrivateScope"/> can compare equal to
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.PrivateScopeIsComparable">
            <summary>
            A field that is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.FieldAttributes.PrivateScope"/> and a method that is
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodAttributes.PrivateScope"/> can compare equal to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.RawSignatureCompare">
            <summary>
            Raw (bit by bit) comparison of signatures. This matches what the CLR does when it
            compares signatures. This means that metadata tokens will be compared.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.IgnoreModifiers">
            <summary>
            Ignore required and optional modifiers when comparing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>s.
            They're already ignored when comparing eg. a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> with a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.MscorlibIsNotSpecial">
            <summary>
            By default, all module and assembly compares when they're both the system library
            (eg. mscorlib or System.Runtime.dll) return true, even if they're really different,
            eg. mscorlib (.NET Framework 2.0) vs mscorlib (Windows CE). If this flag is set, the system
            library is compared just like any other module/assembly.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.DontProjectWinMDRefs">
            <summary>
            Don't project CLR compatible WinMD references back to the original CLR type/method before comparing
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.DontCheckTypeEquivalence">
            <summary>
            Don't check type equivalence when comparing types. Starting with .NET Framework 4.0, two different
            types can be considered equivalent if eg. a TypeIdentifierAttribute is used.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions.IgnoreMultiDimensionalArrayLowerBoundsAndSizes">
            <summary>
            When comparing types, don't compare a multi-dimensional array's lower bounds and sizes
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer">
            <summary>
            Compares types, signatures, methods, fields, properties, events
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Comparison options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="options">Comparison options</param>
            <param name="sourceModule">The module which the comparison take place in.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode_FnPtr_SystemIntPtr">
            <summary>
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.FnPtr"/> is mapped to <see cref="T:System.IntPtr"/>, so use
            the same hash code for both
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef,Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef)">
            <summary>
            Compare members
            </summary>
            <param name="a">Member #1</param>
            <param name="b">Member #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRef)">
            <summary>
            Gets the hash code of a member
            </summary>
            <param name="a">The member</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IType,Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.EqualsResolutionScope(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Compares resolution scopes
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.EqualsImplementation(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Compares implementation
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.EqualsScope(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Compares resolution scope and implementation
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.FileDef,Datadog.Trace.Vendors.dnlib.DotNet.FileDef)">
            <summary>
            Compares files
            </summary>
            <param name="a">File #1</param>
            <param name="b">File #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IModule,Datadog.Trace.Vendors.dnlib.DotNet.FileDef)">
            <summary>
            Compares a module with a file
            </summary>
            <param name="a">Module</param>
            <param name="b">File</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IModule,Datadog.Trace.Vendors.dnlib.DotNet.IModule)">
            <summary>
            Compares modules
            </summary>
            <param name="a">Module #1</param>
            <param name="b">Module #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Compares modules
            </summary>
            <param name="a">Module #1</param>
            <param name="b">Module #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,Datadog.Trace.Vendors.dnlib.DotNet.IAssembly)">
            <summary>
            Compares assemblies
            </summary>
            <param name="a">Assembly #1</param>
            <param name="b">Assembly #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Compares type lists
            </summary>
            <param name="a">Type list #1</param>
            <param name="b">Type list #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Gets the hash code of a type list
            </summary>
            <param name="a">The type list</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig,Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Compares signatures
            </summary>
            <param name="a">Sig #1</param>
            <param name="b">Sig #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Gets the hash code of a sig
            </summary>
            <param name="a">The sig</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig,Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <summary>
            Compares method/property sigs
            </summary>
            <param name="a">Method/property #1</param>
            <param name="b">Method/property #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <summary>
            Gets the hash code of a method/property sig
            </summary>
            <param name="a">The method/property sig</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Compares field sigs
            </summary>
            <param name="a">Field sig #1</param>
            <param name="b">Field sig #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Gets the hash code of a field sig
            </summary>
            <param name="a">The field sig</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.LocalSig,Datadog.Trace.Vendors.dnlib.DotNet.LocalSig)">
            <summary>
            Compares local sigs
            </summary>
            <param name="a">Local sig #1</param>
            <param name="b">Local sig #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.LocalSig)">
            <summary>
            Gets the hash code of a local sig
            </summary>
            <param name="a">The local sig</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig,Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig)">
            <summary>
            Compares generic method instance sigs
            </summary>
            <param name="a">Generic inst method #1</param>
            <param name="b">Generic inst method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig)">
            <summary>
            Gets the hash code of a generic instance method sig
            </summary>
            <param name="a">The generic inst method sig</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IMethod,Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Gets the hash code of a method
            </summary>
            <param name="a">The method</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Gets the hash code of a method
            </summary>
            <param name="a">The method</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Compares <c>MemberRef</c>s
            </summary>
            <param name="a"><c>MemberRef</c> #1</param>
            <param name="b"><c>MemberRef</c> #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Gets the hash code of a <c>MemberRef</c>
            </summary>
            <param name="a">The <c>MemberRef</c></param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec,Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <summary>
            Compares <c>MethodSpec</c>s
            </summary>
            <param name="a"><c>MethodSpec</c> #1</param>
            <param name="b"><c>MethodSpec</c> #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <summary>
            Gets the hash code of a <c>MethodSpec</c>
            </summary>
            <param name="a">The <c>MethodSpec</c></param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent,Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent)">
            <summary>
            Compares <c>MemberRefParent</c>s
            </summary>
            <param name="a"><c>MemberRefParent</c> #1</param>
            <param name="b"><c>MemberRefParent</c> #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent)">
            <summary>
            Gets the hash code of a <c>MemberRefParent</c>
            </summary>
            <param name="a">The <c>MemberRefParent</c></param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IField,Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Gets the hash code of a field
            </summary>
            <param name="a">The field</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef,Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef,Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Gets the hash code of a field
            </summary>
            <param name="a">The field</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef,Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <summary>
            Compares properties
            </summary>
            <param name="a">Property #1</param>
            <param name="b">Property #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <summary>
            Gets the hash code of a property
            </summary>
            <param name="a">The property</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.EventDef,Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <summary>
            Compares events
            </summary>
            <param name="a">Event #1</param>
            <param name="b">Event #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <summary>
            Gets the hash code of an event
            </summary>
            <param name="a">The event</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Type,Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IType,System.Type)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Type,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,System.Type)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Type,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,System.Type)">
            <summary>
            Compares types
            </summary>
            <param name="b">Type #1</param>
            <param name="a">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Type,Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec,System.Type)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Type,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Type)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.IsFnPtrElementType(System.Type)">
            <summary>
            Checks whether it's FnPtr&amp;, FnPtr*, FnPtr[], or FnPtr[...]
            </summary>
            <param name="a">The type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Type,System.Boolean)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <param name="treatAsGenericInst"><c>true</c> if we should treat <paramref name="b"/>
            as a generic instance type</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Type,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Compares types
            </summary>
            <param name="a">Type #1</param>
            <param name="b">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType,System.Type)">
            <summary>
            Compares types
            </summary>
            <param name="b">Type #1</param>
            <param name="a">Type #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Type)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Type,System.Boolean)">
            <summary>
            Gets the hash code of a type
            </summary>
            <param name="a">The type</param>
            <param name="treatAsGenericInst"><c>true</c> if we should treat <paramref name="a"/>
            as a generic instance type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Collections.Generic.IList{System.Type})">
            <summary>
            Gets the hash code of a type list
            </summary>
            <param name="a">The type list</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode_ElementType_MVar(System.Int32)">
            <summary>
            Gets the hash code of a list with only generic method parameters (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.MVar"/>)
            </summary>
            <param name="numGenericParams">Number of generic method parameters</param>
            <returns>Hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode_TypeDef(System.Type)">
            <summary>
            Gets the hash code of a TypeDef type
            </summary>
            <param name="a">The type</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{System.Type})">
            <summary>
            Compares type lists
            </summary>
            <param name="a">Type list #1</param>
            <param name="b">Type list #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Reflection.Module)">
            <summary>
            Compares modules
            </summary>
            <param name="a">Module #1</param>
            <param name="b">Module #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.FileDef,System.Reflection.Module)">
            <summary>
            Compares a file and a module
            </summary>
            <param name="a">File</param>
            <param name="b">Module</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IModule,System.Reflection.Module)">
            <summary>
            Compares modules
            </summary>
            <param name="a">Module #1</param>
            <param name="b">Module #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IAssembly,System.Reflection.Assembly)">
            <summary>
            Compares assemblies
            </summary>
            <param name="a">Assembly #1</param>
            <param name="b">Assembly #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.DeclaringTypeEquals(Datadog.Trace.Vendors.dnlib.DotNet.IMethod,System.Reflection.MethodBase)">
            <summary>
            Compares method declaring types
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Reflection.MethodBase,Datadog.Trace.Vendors.dnlib.DotNet.IMethod)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IMethod,System.Reflection.MethodBase)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Reflection.MethodBase,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,System.Reflection.MethodBase)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Reflection.MethodBase,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Compares method sigs
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,System.Reflection.MethodBase)">
            <summary>
            Compares method sigs
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Reflection.MethodBase,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef,System.Reflection.MethodBase)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GenericMethodArgsEquals(System.Int32,System.Collections.Generic.IList{System.Type})">
            <summary>
            Compares generic method args, making sure <paramref name="methodGenArgs"/> only
            contains <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.MVar"/>s.
            </summary>
            <param name="numMethodArgs">Number of generic method args in method #1</param>
            <param name="methodGenArgs">Generic method args in method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Reflection.MethodBase,Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec,System.Reflection.MethodBase)">
            <summary>
            Compares methods
            </summary>
            <param name="a">Method #1</param>
            <param name="b">Method #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Reflection.MethodBase)">
            <summary>
            Gets the hash code of a <c>MethodBase</c>
            </summary>
            <param name="a">The <c>MethodBase</c></param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Collections.Generic.IList{System.Reflection.ParameterInfo},System.Type)">
            <summary>
            Gets the hash code of a parameter list
            </summary>
            <param name="a">The type list</param>
            <param name="declaringType">Declaring type of method that owns parameter <paramref name="a"/></param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention,System.Reflection.MethodBase)">
            <summary>
            Compares calling conventions
            </summary>
            <param name="a">Calling convention</param>
            <param name="b">Method</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.ReturnTypeEquals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Reflection.MethodBase)">
            <summary>
            Compares return types
            </summary>
            <param name="a">Return type #1</param>
            <param name="b">MethodBase</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.Collections.Generic.IList{System.Reflection.ParameterInfo},System.Type)">
            <summary>
            Compares parameter lists
            </summary>
            <param name="a">Type list #1</param>
            <param name="b">Type list #2</param>
            <param name="declaringType">Declaring type of method that owns parameter <paramref name="b"/></param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Compares parameter types
            </summary>
            <param name="a">Parameter type #1</param>
            <param name="b">Parameter #2</param>
            <param name="declaringType">Declaring type of method that owns parameter <paramref name="b"/></param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Reflection.FieldInfo,Datadog.Trace.Vendors.dnlib.DotNet.IField)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.IField,System.Reflection.FieldInfo)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Reflection.FieldInfo,Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef,System.Reflection.FieldInfo)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(System.Reflection.FieldInfo,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef,System.Reflection.FieldInfo)">
            <summary>
            Compares fields
            </summary>
            <param name="a">Field #1</param>
            <param name="b">Field #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Reflection.FieldInfo)">
            <summary>
            Gets the hash code of a field
            </summary>
            <param name="a">The field</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef,System.Reflection.PropertyInfo)">
            <summary>
            Compares properties
            </summary>
            <param name="a">Property #1</param>
            <param name="b">Property #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Reflection.PropertyInfo)">
            <summary>
            Gets the hash code of a property
            </summary>
            <param name="a">The property</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.EventDef,System.Reflection.EventInfo)">
            <summary>
            Compares events
            </summary>
            <param name="a">Event #1</param>
            <param name="b">Event #2</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.GetHashCode(System.Reflection.EventInfo)">
            <summary>
            Gets the hash code of an event
            </summary>
            <param name="a">The event</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper">
            <summary>
            Helps <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader"/> resolve types
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper.ResolveTypeDefOrRef(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Resolves a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="codedToken">A <c>TypeDefOrRef</c> coded token</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c> if <paramref name="codedToken"/>
            is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper.ConvertRTInternalAddress(System.IntPtr)">
            <summary>
            Converts the address of a <see cref="T:System.Type"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <seealso cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Emit.MethodTableToTypeConverter"/>
            <param name="address">Address of <see cref="T:System.Type"/>. This is also known as the
            method table and has the same value as <see cref="P:System.RuntimeTypeHandle.Value"/></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> or <c>null</c> if not supported</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader">
            <summary>
            Reads signatures from the #Blob stream
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Reads a signature from the #Blob stream
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="sig">#Blob stream offset of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a signature from the #Blob stream
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.Byte[])">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="module">The module where the signature is located in</param>
            <param name="signature">The signature data</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="module">The module where the signature is located in</param>
            <param name="signature">The signature data</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="module">The module where the signature is located in</param>
            <param name="signature">The signature reader</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="module">The module where the signature is located in</param>
            <param name="signature">The signature reader</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,System.Byte[])">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature data</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature data</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature reader</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature reader</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Reads a type signature from the #Blob stream
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="sig">#Blob stream offset of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a type signature from the #Blob stream
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,System.Byte[]@)">
            <summary>
            Reads a type signature from the #Blob stream
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="extraData">If there's any extra data after the signature, it's saved
            here, else this will be <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,System.Byte[]@)">
            <summary>
            Reads a type signature from the #Blob stream
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="extraData">If there's any extra data after the signature, it's saved
            here, else this will be <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="sig"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.Byte[])">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="module">The module where the signature is located in</param>
            <param name="signature">The signature data</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="module">The module where the signature is located in</param>
            <param name="signature">The signature data</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="module">The module where the signature is located in</param>
            <param name="signature">The signature reader</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="module">The module where the signature is located in</param>
            <param name="signature">The signature reader</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,System.Byte[])">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature data</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature data</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature reader</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature reader</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,System.Byte[]@)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature data</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="extraData">If there's any extra data after the signature, it's saved
            here, else this will be <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadTypeSig(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,Datadog.Trace.Vendors.dnlib.IO.DataReader,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,System.Byte[]@)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="signature">The signature reader</param>
            <param name="gpContext">Generic parameter context</param>
            <param name="extraData">If there's any extra data after the signature, it's saved
            here, else this will be <c>null</c></param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if
            <paramref name="signature"/> is invalid.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">Reader module</param>
            <param name="sig">#Blob stream offset of signature</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ISignatureReaderHelper,Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes,Datadog.Trace.Vendors.dnlib.IO.DataReader@,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="helper">Token resolver</param>
            <param name="corLibTypes">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICorLibTypes"/> instance</param>
            <param name="reader">The signature data</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadSig">
            <summary>
            Reads the signature
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> instance or <c>null</c> if invalid signature</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadField(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig"/>
            </summary>
            <param name="callingConvention">First byte of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldSig"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadMethod(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig"/>
            </summary>
            <param name="callingConvention">First byte of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSig"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadProperty(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig"/>
            </summary>
            <param name="callingConvention">First byte of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertySig"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadLocalSig(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig"/>
            </summary>
            <param name="callingConvention">First byte of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.LocalSig"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadGenericInstMethod(Datadog.Trace.Vendors.dnlib.DotNet.CallingConvention)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig"/>
            </summary>
            <param name="callingConvention">First byte of signature</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SignatureReader.ReadType(System.Boolean)">
            <summary>
            Reads the next type
            </summary>
            <param name="allowTypeSpec"><c>true</c> if a <c>TypeSpec</c> is allowed if the next type is a class/value-type</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if invalid element type</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig">
            <summary>
            A high-level representation of a row in the StandAloneSig table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.Signature">
            <summary>
            From column StandAloneSig.Signature
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.signature">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.MethodSig">
            <summary>
            Gets/sets the method sig
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.LocalSig">
            <summary>
            Gets/sets the locals sig
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig.ContainsGenericParameter">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigUser">
            <summary>
            A StandAloneSig row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.LocalSig)">
            <summary>
            Constructor
            </summary>
            <param name="localSig">A locals sig</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Constructor
            </summary>
            <param name="methodSig">A method sig</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigMD">
            <summary>
            Created from a row in the StandAloneSig table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSigMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>StandAloneSig</c> row</param>
            <param name="rid">Row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">
            <summary>
            Thrown if the strong name key or public key is invalid
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Other exception</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SignatureAlgorithm">
            <summary>
            Type of signature algorithm. See WinCrypt.h in the Windows SDK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.SignatureAlgorithm.CALG_RSA_SIGN">
            <summary>
            RSA signature algorithm
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey">
            <summary>
            A public key
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.SignatureAlgorithm">
            <summary>
            Gets/sets the signature algorithm
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.HashAlgorithm">
            <summary>
            Gets/sets the hash algorithm
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.Modulus">
            <summary>
            Gets/sets the modulus
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.PublicExponent">
            <summary>
            Gets/sets the public exponent
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="modulus">Modulus</param>
            <param name="publicExponent">Public exponent</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor(System.Byte[],System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm)">
            <summary>
            Constructor
            </summary>
            <param name="modulus">Modulus</param>
            <param name="publicExponent">Public exponent</param>
            <param name="hashAlgorithm">Hash algorithm</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor(System.Byte[],System.Byte[],Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm,Datadog.Trace.Vendors.dnlib.DotNet.SignatureAlgorithm)">
            <summary>
            Constructor
            </summary>
            <param name="modulus">Modulus</param>
            <param name="publicExponent">Public exponent</param>
            <param name="hashAlgorithm">Hash algorithm</param>
            <param name="signatureAlgorithm">Signature algorithm</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.PublicKey)">
            <summary>
            Constructor
            </summary>
            <param name="pk">Public key</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="pk">Public key data</param>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">Strong name key is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">Public key file</param>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">Strong name key is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Public key stream</param>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">Strong name key is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="reader">Public key reader</param>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">Strong name key is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.CreatePublicKey">
            <summary>
            Creates a public key blob
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey">
            <summary>
            Stores a strong name key pair
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.PublicKey">
            <summary>
            Gets the public key
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.SignatureSize">
            <summary>
            Gets the strong name signature size in bytes
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.HashAlgorithm">
            <summary>
            Gets the public key hash algorithm. It's usually <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm.SHA1"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.PublicExponent">
            <summary>
            Gets the public exponent
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.Modulus">
            <summary>
            Gets the modulus
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.Prime1">
            <summary>
            Gets prime1
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.Prime2">
            <summary>
            Gets prime2
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.Exponent1">
            <summary>
            Gets exponent1
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.Exponent2">
            <summary>
            Gets exponent2
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.Coefficient">
            <summary>
            Gets the coefficient
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.PrivateExponent">
            <summary>
            Gets the private exponent
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="keyData">Strong name key data</param>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">Strong name key is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">Strong name key file</param>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">Strong name key is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Strong name key stream</param>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">Strong name key is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="reader">Strong name key reader</param>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InvalidKeyException">Strong name key is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.WithHashAlgorithm(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm)">
            <summary>
            Creates a strong name key with a new hash algorithm
            </summary>
            <param name="hashAlgorithm">Algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.CreateRSA">
            <summary>
            Creates an <see cref="T:System.Security.Cryptography.RSA"/> instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.CreateStrongName">
            <summary>
            Creates a strong name blob
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.CreateCounterSignatureAsString(Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)">
            <summary>
            Creates a counter signature, just like
            <c>sn -a IdentityPubKey.snk IdentityKey.snk SignaturePubKey.snk</c> can do.
            The public key <c>sn</c> prints is <paramref name="signaturePubKey"/>'s value.
            </summary>
            <param name="identityPubKey">Identity public key</param>
            <param name="identityKey">Identity strong name key pair</param>
            <param name="signaturePubKey">Signature public key</param>
            <returns>The counter signature as a hex string</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey.CreateCounterSignature(Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)">
            <summary>
            Creates a counter signature, just like
            <c>sn -a IdentityPubKey.snk IdentityKey.snk SignaturePubKey.snk</c> can do.
            The public key <c>sn</c> prints is <paramref name="signaturePubKey"/>'s value.
            </summary>
            <param name="identityPubKey">Identity public key</param>
            <param name="identityKey">Identity strong name key pair</param>
            <param name="signaturePubKey">Signature public key</param>
            <returns>The counter signature</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameSigner">
            <summary>
            Strong name signs an assembly. It supports normal strong name signing and the new
            (.NET Framework 4.5) enhanced strong name signing.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameSigner.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">.NET PE file stream</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameSigner.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="stream">.NET PE file stream</param>
            <param name="baseOffset">Offset in <paramref name="stream"/> of the first byte of
            the PE file.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameSigner.WriteSignature(Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,System.Int64)">
            <summary>
            Calculates the strong name signature and writes it to the stream. The signature
            is also returned.
            </summary>
            <param name="snk">Strong name key used for signing</param>
            <param name="snSigOffset">Offset (relative to the start of the PE file) of the strong
            name signature.</param>
            <returns>The strong name signature</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameSigner.CalculateSignature(Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,System.Int64)">
            <summary>
            Calculates and returns the strong name signature
            </summary>
            <param name="snk">Strong name key used for signing</param>
            <param name="snSigOffset">Offset (relative to start of PE file) of the strong
            name signature.</param>
            <returns>The strong name signature</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameSigner.StrongNameHashData(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm,System.Int64,System.UInt32)">
            <summary>
            Strong name hashes the .NET file
            </summary>
            <param name="hashAlg">Hash algorithm</param>
            <param name="snSigOffset">Strong name sig offset (relative to start of .NET PE file)</param>
            <param name="snSigSize">Size of strong name signature</param>
            <returns>The strong name hash of the .NET file</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.StrongNameSigner.GetStrongNameSignature(Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyHashAlgorithm,System.Byte[])">
            <summary>
            Returns the strong name signature
            </summary>
            <param name="snk">Strong name key</param>
            <param name="hashAlg">Hash algorithm</param>
            <param name="hash">Strong name hash of the .NET PE file</param>
            <returns>Strong name signature</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TIAHelper">
            <summary>
            <c>System.Runtime.InteropServices.TypeIdentifierAttribute</c> helper code used by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SigComparer"/>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes">
            <summary>
            TypeDef and ExportedType flags. See CorHdr.h/CorTypeAttr
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.VisibilityMask">
            <summary>Use this mask to retrieve the type visibility information.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NotPublic">
            <summary>Class is not public scope.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Public">
            <summary>Class is public scope.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedPublic">
            <summary>Class is nested with public visibility.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedPrivate">
            <summary>Class is nested with private visibility.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamily">
            <summary>Class is nested with family visibility.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedAssembly">
            <summary>Class is nested with assembly visibility.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamANDAssem">
            <summary>Class is nested with family and assembly visibility.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamORAssem">
            <summary>Class is nested with family or assembly visibility.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.LayoutMask">
            <summary>Use this mask to retrieve class layout information</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AutoLayout">
            <summary>Class fields are auto-laid out</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.SequentialLayout">
            <summary>Class fields are laid out sequentially</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.ExplicitLayout">
            <summary>Layout is supplied explicitly</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.ClassSemanticsMask">
            <summary>Use this mask to retrieve class semantics information.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.ClassSemanticMask">
            <summary>Use this mask to retrieve class semantics information.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Class">
            <summary>Type is a class.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Interface">
            <summary>Type is an interface.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Abstract">
            <summary>Class is abstract</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Sealed">
            <summary>Class is concrete and may not be extended</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.SpecialName">
            <summary>Class name is special.  Name describes how.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Import">
            <summary>Class / interface is imported</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Serializable">
            <summary>The class is Serializable.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.WindowsRuntime">
            <summary>The type is a Windows Runtime type</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.StringFormatMask">
            <summary>Use StringFormatMask to retrieve string information for native interop</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AnsiClass">
            <summary>LPTSTR is interpreted as ANSI in this class</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.UnicodeClass">
            <summary>LPTSTR is interpreted as UNICODE</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AutoClass">
            <summary>LPTSTR is interpreted automatically</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.CustomFormatClass">
            <summary>A non-standard encoding specified by CustomFormatMask</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.CustomFormatMask">
            <summary>Use this mask to retrieve non-standard encoding information for native interop. The meaning of the values of these 2 bits is unspecified.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.BeforeFieldInit">
            <summary>Initialize the class any time before first static field access.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Forwarder">
            <summary>This ExportedType is a type forwarder.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.ReservedMask">
            <summary>Flags reserved for runtime use.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.RTSpecialName">
            <summary>Runtime should check name encoding.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.HasSecurity">
            <summary>Class has security associate with it.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef">
            <summary>
            A high-level representation of a row in the TypeDef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.TypeDefOrRefTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasDeclSecurityTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.MemberRefParentTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.TypeOrMethodDefTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#DotNet#IGenericParameterProvider#NumberOfGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#DotNet#IType#TypeName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ReflectionName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#DotNet#IType#Namespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ReflectionNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ReflectionFullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.AssemblyQualifiedName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.DefinitionAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Scope">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ScopeType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ContainsGenericParameter">
            <summary>
            Always returns <c>false</c> since a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> does not contain any
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Module2">
            <summary>
            Gets/sets the owner module
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.module2">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.module2_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GetModule2_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.module2"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Attributes">
            <summary>
            From column TypeDef.Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.attributes">
            <summary>Attributes</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Name">
            <summary>
            From column TypeDef.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Namespace">
            <summary>
            From column TypeDef.Namespace
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.namespace">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.BaseType">
            <summary>
            From column TypeDef.Extends
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.baseType">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.baseType_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GetBaseType_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.baseType"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ResetBaseType">
            <summary>Reset <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.BaseType"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Fields">
            <summary>
            From column TypeDef.FieldList
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.fields">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeFields">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.fields"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Methods">
            <summary>
            From column TypeDef.MethodList
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.methods">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeMethods">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.methods"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GenericParameters">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.genericParameters">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeGenericParameters">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.genericParameters"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Interfaces">
            <summary>
            Gets the interfaces
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.interfaces">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeInterfaces">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.interfaces"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.DeclSecurities">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.declSecurities">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeDeclSecurities">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.declSecurities"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ClassLayout">
            <summary>
            Gets/sets the class layout
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.classLayout">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.classLayout_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GetClassLayout_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.classLayout"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasDeclSecurities">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.DeclaringType">
            <summary>
            Gets/sets the enclosing type. It's <c>null</c> if this isn't a nested class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#DotNet#IMemberRef#DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.DeclaringType2">
            <summary>
            Called by <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.DeclaringType"/> and should normally not be called by any user
            code. Use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.DeclaringType"/> instead. Only call this if you must set the
            declaring type without inserting it in the declaring type's method list.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.declaringType2">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.declaringType2_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GetDeclaringType2_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.declaringType2"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.NestedTypes">
            <summary>
            Gets all the nested types
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.nestedTypes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeNestedTypes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.nestedTypes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Events">
            <summary>
            Gets all events
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.events">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeEvents">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.events"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Properties">
            <summary>
            Gets all properties
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.properties">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeProperties">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.properties"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasFields">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Fields"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasMethods">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Methods"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasGenericParameters">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GenericParameters"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasEvents">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Events"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasProperties">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Properties"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasNestedTypes">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.NestedTypes"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasInterfaces">
            <summary>
            <c>true</c> if there's at least one <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl"/> in <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Interfaces"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasClassLayout">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ClassLayout"/> is not <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.PackingSize">
            <summary>
            Gets/sets the packing size. If you write to this property but <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ClassLayout"/>
            is <c>null</c>, it will be created. The value <see cref="F:System.UInt16.MaxValue"/> is returned
            if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ClassLayout"/> is <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ClassSize">
            <summary>
            Gets/sets the class size. If you write to this property but <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ClassLayout"/>
            is <c>null</c>, it will be created. The value <see cref="F:System.UInt32.MaxValue"/> is returned
            if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ClassLayout"/> is <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsValueType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsEnum">
            <summary>
            <c>true</c> if it's an enum
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsDelegate">
            <summary>
            <c>true</c> if it's a delegate (it derives from <see cref="T:System.MulticastDelegate"/>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsNested">
            <summary>
            <c>true</c> if this is a nested type (it has a declaring type)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsPrimitive">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsEquivalent">
            <summary>
            Checks whether this type has opted into equivalence
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ModifyAttributes(Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes,Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes)">
            <summary>
            Modify <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.attributes"/> property: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.attributes"/> =
            (<see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.attributes"/> &amp; <paramref name="andMask"/>) | <paramref name="orMask"/>.
            </summary>
            <param name="andMask">Value to <c>AND</c></param>
            <param name="orMask">Value to OR</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ModifyAttributes(System.Boolean,Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes)">
            <summary>
            Set or clear flags in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.attributes"/>
            </summary>
            <param name="set"><c>true</c> if flags should be set, <c>false</c> if flags should
            be cleared</param>
            <param name="flags">Flags to set or clear</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Visibility">
            <summary>
            Gets/sets the visibility
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsNotPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NotPublic"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Public"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsNestedPublic">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedPublic"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsNestedPrivate">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedPrivate"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsNestedFamily">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamily"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsNestedAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedAssembly"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsNestedFamilyAndAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamANDAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsNestedFamilyOrAssembly">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.NestedFamORAssem"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Layout">
            <summary>
            Gets/sets the layout
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsAutoLayout">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AutoLayout"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsSequentialLayout">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.SequentialLayout"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsExplicitLayout">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.ExplicitLayout"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsInterface">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Interface"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsClass">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Class"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsAbstract">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Abstract"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsSealed">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Sealed"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.SpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsImport">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Import"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsSerializable">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Serializable"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsWindowsRuntime">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.WindowsRuntime"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.StringFormat">
            <summary>
            Gets/sets the string format
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsAnsiClass">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AnsiClass"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsUnicodeClass">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.UnicodeClass"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsAutoClass">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.AutoClass"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsCustomFormatClass">
            <summary>
            <c>true</c> if <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.CustomFormatClass"/> is set
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsBeforeFieldInit">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.BeforeFieldInit"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsForwarder">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.Forwarder"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsRuntimeSpecialName">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.RTSpecialName"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.HasSecurity">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeAttributes.HasSecurity"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.IsGlobalModuleType">
            <summary>
            <c>true</c> if this is the global (aka. &lt;Module&gt;) type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GetTypes">
            <summary>
            Gets a list of all nested types and all their nested types
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GetEnumUnderlyingType">
            <summary>
            Gets an enum's underlying type or <c>null</c> if none. Should only be called
            if this is an enum.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Resolves a method or a field. <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Class"/> (owner type) is ignored when
            resolving the method/field. Private scope methods/fields are not returned.
            </summary>
            <param name="memberRef">A method/field reference</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance or <c>null</c>
            if it couldn't be resolved.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Resolves a method or a field. <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef.Class"/> (owner type) is ignored when
            resolving the method/field.
            </summary>
            <param name="memberRef">A method/field reference</param>
            <param name="options">Method/field signature comparison options</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> instance or <c>null</c>
            if it couldn't be resolved.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethod(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Finds a method. Private scope methods are not returned.
            </summary>
            <param name="name">Method name</param>
            <param name="sig">Method signature</param>
            <returns>The first method that matches or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethod(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds a method
            </summary>
            <param name="name">Method name</param>
            <param name="sig">Method signature</param>
            <param name="options">Method signature comparison options</param>
            <returns>The first method that matches or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethod(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds a method
            </summary>
            <param name="name">Method name</param>
            <param name="sig">Method signature</param>
            <param name="options">Method signature comparison options</param>
            <param name="sourceModule">The module that needs to find the method or <c>null</c></param>
            <returns>The first method that matches or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethod(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a method by name
            </summary>
            <param name="name">Name of method</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethods(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds all methods by name
            </summary>
            <param name="name">Name of method</param>
            <returns>All methods with that name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindStaticConstructor">
            <summary>
            Finds the class constructor (aka type initializer). It's the method named .cctor
            </summary>
            <returns>The class constructor or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindOrCreateStaticConstructor">
            <summary>
            Finds the class constructor (aka type initializer). It's the method named .cctor.
            If it doesn't exist, it is created, inserted into <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Methods"/> and returned.
            The created .cctor will have just one RET instruction.
            </summary>
            <returns>The class constructor</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindInstanceConstructors">
            <summary>
            Finds all instance constructors (not class constructors)
            </summary>
            <returns>All instance constructors</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindConstructors">
            <summary>
            Finds all static and instance constructors
            </summary>
            <returns>All static and instance constructors</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindDefaultConstructor">
            <summary>
            Finds the default instance constructor (the one with no arguments)
            </summary>
            <returns>The default instance constructor or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindField(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Finds a field. Private scope fields are not returned.
            </summary>
            <param name="name">Field name</param>
            <param name="sig">Field signature</param>
            <returns>The first field that matches or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindField(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds a field
            </summary>
            <param name="name">Field name</param>
            <param name="sig">Field signature</param>
            <param name="options">Field signature comparison options</param>
            <returns>The first field that matches or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindField(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds a field
            </summary>
            <param name="name">Field name</param>
            <param name="sig">Field signature</param>
            <param name="options">Field signature comparison options</param>
            <param name="sourceModule">The module that needs to find the field or <c>null</c></param>
            <returns>The first field that matches or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindField(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a field by name
            </summary>
            <param name="name">Name of field</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindFields(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds all fields by name
            </summary>
            <param name="name">Name of field</param>
            <returns>All fields with that name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindEvent(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Finds an event
            </summary>
            <param name="name">Name of event</param>
            <param name="type">Type of event</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindEvent(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.IType,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds an event
            </summary>
            <param name="name">Name of event</param>
            <param name="type">Type of event</param>
            <param name="options">Event type comparison options</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindEvent(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.IType,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds an event
            </summary>
            <param name="name">Name of event</param>
            <param name="type">Type of event</param>
            <param name="options">Event type comparison options</param>
            <param name="sourceModule">The module that needs to find the event or <c>null</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindEvent(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds an event by name
            </summary>
            <param name="name">Name of event</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindEvents(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds all events by name
            </summary>
            <param name="name">Name of event</param>
            <returns>All events with that name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindProperty(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Finds a property
            </summary>
            <param name="name">Name of property</param>
            <param name="propSig">Property signature</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindProperty(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds a property
            </summary>
            <param name="name">Name of property</param>
            <param name="propSig">Property signature</param>
            <param name="options">Property signature comparison options</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindProperty(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds a property
            </summary>
            <param name="name">Name of property</param>
            <param name="propSig">Property signature</param>
            <param name="options">Property signature comparison options</param>
            <param name="sourceModule">The module that needs to find the property or <c>null</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindProperty(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a prop by name
            </summary>
            <param name="name">Name of prop</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/> or <c>null</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindProperties(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds all props by name
            </summary>
            <param name="name">Name of prop</param>
            <returns>All props with that name</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethodCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig)">
            <summary>
            Finds a method by checking this type or any of its base types
            </summary>
            <param name="name">Method name</param>
            <param name="sig">Method signature</param>
            <returns>The method or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethodCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds a method by checking this type or any of its base types
            </summary>
            <param name="name">Method name</param>
            <param name="sig">Method signature</param>
            <param name="options">Method signature comparison options</param>
            <returns>The method or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethodCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds a method by checking this type or any of its base types
            </summary>
            <param name="name">Method name</param>
            <param name="sig">Method signature</param>
            <param name="options">Method signature comparison options</param>
            <param name="sourceModule">The module that needs to find the method or <c>null</c></param>
            <returns>The method or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethodCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a method by checking this type or any of its base types
            </summary>
            <param name="name">Method name</param>
            <returns>The method or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindFieldCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Finds a field by checking this type or any of its base types
            </summary>
            <param name="name">Field name</param>
            <param name="sig">Field signature</param>
            <returns>The field or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindFieldCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds a field by checking this type or any of its base types
            </summary>
            <param name="name">Field name</param>
            <param name="sig">Field signature</param>
            <param name="options">Field signature comparison options</param>
            <returns>The field or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindFieldCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds a field by checking this type or any of its base types
            </summary>
            <param name="name">Field name</param>
            <param name="sig">Field signature</param>
            <param name="options">Field signature comparison options</param>
            <param name="sourceModule">The module that needs to find the field or <c>null</c></param>
            <returns>The field or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindFieldCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a field by checking this type or any of its base types
            </summary>
            <param name="name">Field name</param>
            <returns>The field or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindEventCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Finds an event by checking this type or any of its base types
            </summary>
            <param name="name">Event name</param>
            <param name="eventType">Event type</param>
            <returns>The event or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindEventCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds an event by checking this type or any of its base types
            </summary>
            <param name="name">Event name</param>
            <returns>The event or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindPropertyCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.PropertySig)">
            <summary>
            Finds a property by checking this type or any of its base types
            </summary>
            <param name="name">Property name</param>
            <param name="sig">Property signature</param>
            <returns>The property or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindPropertyCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.PropertySig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions)">
            <summary>
            Finds a property by checking this type or any of its base types
            </summary>
            <param name="name">Property name</param>
            <param name="sig">Property signature</param>
            <param name="options">Property signature comparison options</param>
            <returns>The property or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindPropertyCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.PropertySig,Datadog.Trace.Vendors.dnlib.DotNet.SigComparerOptions,Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Finds a property by checking this type or any of its base types
            </summary>
            <param name="name">Property name</param>
            <param name="sig">Property signature</param>
            <param name="options">Property signature comparison options</param>
            <param name="sourceModule">The module that needs to find the property or <c>null</c></param>
            <returns>The property or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindPropertyCheckBaseType(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Finds a property by checking this type or any of its base types
            </summary>
            <param name="name">Property name</param>
            <returns>The property or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Remove(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Removes a method from this type. It also removes it from any properties and events.
            </summary>
            <param name="method">The method to remove</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Remove(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,System.Boolean)">
            <summary>
            Removes a method from this type. It also removes it from any properties and events.
            </summary>
            <param name="method">The method to remove</param>
            <param name="removeEmptyPropertiesEvents"><c>true</c> if we should remove all
            empty properties and events.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#FieldDef}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.FieldDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#FieldDef}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#FieldDef}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#FieldDef}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#FieldDef}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#MethodDef}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#MethodDef}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#MethodDef}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#MethodDef}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#MethodDef}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#TypeDef}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#EventDef}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.EventDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#EventDef}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#EventDef}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#EventDef}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#EventDef}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#PropertyDef}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#PropertyDef}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#PropertyDef}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#PropertyDef}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#PropertyDef}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnLazyAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnAdd(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnRemove(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnResize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.Datadog#Trace#Vendors#dnlib#Utils#IListListener{Datadog#Trace#Vendors#dnlib#DotNet#GenericParam}#OnClear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GetFields(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Gets all fields named <paramref name="name"/>
            </summary>
            <param name="name">Field name</param>
            <returns>A list of 0 or more fields with name <paramref name="name"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.GetField(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Gets the first field named <paramref name="name"/>
            </summary>
            <param name="name">Field name</param>
            <returns>The field or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.FindMethodImplMethod(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef)">
            <summary>
            FInd a method implementation method
            </summary>
            <param name="mdr">Method</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefUser">
            <summary>
            A TypeDef row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="namespace">Namespace</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="baseType">Base class or <c>null</c> if it's an interface</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="namespace">Namespace</param>
            <param name="name">Name</param>
            <param name="baseType">Base class or <c>null</c> if it's an interface</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD">
            <summary>
            Created from a row in the TypeDef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.GetBaseType_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeFields">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeMethods">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeGenericParameters">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeInterfaces">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeDeclSecurities">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.GetClassLayout_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.GetDeclaringType2_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeProperties">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeNestedTypes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.GetModule2_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>TypeDef</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.GetMethodOverrides(Datadog.Trace.Vendors.dnlib.DotNet.MethodDefMD,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Gets all methods <paramref name="method"/> overrides
            </summary>
            <param name="method">The method</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A list (possibly empty) of all methods <paramref name="method"/> overrides</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeMethodSemanticsAttributes">
            <summary>
            Initializes all <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef.semAttrs"/>. Only those <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>s
            that are property or event handlers get updated.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeProperty(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDefMD,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.MethodDef}@,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.MethodDef}@,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.MethodDef}@)">
            <summary>
            Initializes a property's special methods
            </summary>
            <param name="prop">The property</param>
            <param name="getMethods">Updated with a list of all get methods</param>
            <param name="setMethods">Updated with a list of all set methods</param>
            <param name="otherMethods">Updated with a list of all other methods</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.InitializeEvent(Datadog.Trace.Vendors.dnlib.DotNet.EventDefMD,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef@,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef@,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef@,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.MethodDef}@)">
            <summary>
            Initializes an event's special methods
            </summary>
            <param name="evt">The event</param>
            <param name="addMethod">Updated with the addOn method or <c>null</c> if none</param>
            <param name="invokeMethod">Updated with the fire method or <c>null</c> if none</param>
            <param name="removeMethod">Updated with the removeOn method or <c>null</c> if none</param>
            <param name="otherMethods">Updated with a list of all other methods</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.OnLazyAdd2(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.FieldDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.OnLazyAdd2(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.OnLazyAdd2(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.EventDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.OnLazyAdd2(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefMD.OnLazyAdd2(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam@)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder">
            <summary>
            Finds <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>s
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.IsCacheEnabled">
            <summary>
            <c>true</c> if the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> cache is enabled. <c>false</c> if the cache
            is disabled and a slower <c>O(n)</c> lookup is performed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.#ctor(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.TypeDef})">
            <summary>
            Constructor
            </summary>
            <param name="rootTypes">All root types. All their nested types are also included.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rootTypes"/> is <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.#ctor(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.TypeDef},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="rootTypes">All root types</param>
            <param name="includeNestedTypes"><c>true</c> if all nested types that are reachable
            from <paramref name="rootTypes"/> should also be included.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rootTypes"/> is <c>null</c></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.ResetCache">
            <summary>
            Resets the cache (clears all cached elements). Use this method if the cache is
            enabled but some of the types have been modified (eg. removed, added, renamed).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.Find(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.Find(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.GetNextTypeDef">
            <summary>
            Gets the next <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if there are no more left
            </summary>
            <returns>The next <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.GetNextTypeDefCache">
            <summary>
            Gets the next <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if there are no more left.
            The cache is updated with the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> before the method
            returns.
            </summary>
            <returns>The next <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if none</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefFinder.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper">
            <summary>
            Various helper methods for <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/> classes to prevent infinite recursion
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Checks whether <paramref name="callConv"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="callConv">Calling convention signature</param>
            <returns><c>true</c> if <paramref name="callConv"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/>
            or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig)">
            <summary>
            Checks whether <paramref name="fieldSig"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="fieldSig">Field signature</param>
            <returns><c>true</c> if <paramref name="fieldSig"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/>
            or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.MethodBaseSig)">
            <summary>
            Checks whether <paramref name="methodSig"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="methodSig">Method or property signature</param>
            <returns><c>true</c> if <paramref name="methodSig"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/>
            or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.LocalSig)">
            <summary>
            Checks whether <paramref name="localSig"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="localSig">Local signature</param>
            <returns><c>true</c> if <paramref name="localSig"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/>
            or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.GenericInstMethodSig)">
            <summary>
            Checks whether <paramref name="gim"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="gim">Generic method signature</param>
            <returns><c>true</c> if <paramref name="gim"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/>
            or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <summary>
            Checks whether <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="type">Type</param>
            <returns><c>true</c> if <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Checks whether <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="type">Type</param>
            <returns><c>true</c> if <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Checks whether <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="type">Type</param>
            <returns><c>true</c> if <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Checks whether <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="type">Type</param>
            <returns><c>true</c> if <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Checks whether <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="type">Type</param>
            <returns><c>true</c> if <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeHelper.ContainsGenericParameter(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Checks whether <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
            <param name="type">Type</param>
            <returns><c>true</c> if <paramref name="type"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException">
            <summary>
            Thrown by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser"/> when it fails to parse a type name
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception or <c>null</c> if none</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder">
            <summary>
            Helps <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser"/> create types
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder.FindAssemblyRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>'s <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> when the original assembly
            info is missing from the full type name.
            </summary>
            <param name="nonNestedTypeRef">A non-nested <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/></param>
            <returns><paramref name="nonNestedTypeRef"/>'s <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> or <c>null</c></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser">
            <summary>
            Parses a type name and creates an <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ownerModule">
            <summary>Owner module</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseReflectionThrow(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder)">
            <summary>
            Parses a Reflection type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException">If parsing failed</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseReflectionThrow(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Parses a Reflection type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException">If parsing failed</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseReflection(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder)">
            <summary>
            Parses a Reflection type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> instance or <c>null</c> if parsing failed</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseReflection(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Parses a Reflection type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/> instance or <c>null</c> if parsing failed</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseAsTypeSigReflectionThrow(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder)">
            <summary>
            Parses a Reflection type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException">If parsing failed</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseAsTypeSigReflectionThrow(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Parses a Reflection type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException">If parsing failed</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseAsTypeSigReflection(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder)">
            <summary>
            Parses a Reflection type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if parsing failed</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseAsTypeSigReflection(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Parses a Reflection type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance or <c>null</c> if parsing failed</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder)">
            <summary>
            Constructor
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.Parse">
            <summary>
            Parses a type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/>
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException">If parsing failed</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ParseAsTypeSig">
            <summary>
            Parses a type name and creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/>
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException">If parsing failed</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.RecursionIncrement">
            <summary>
            Increment recursion counter
            </summary>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParserException">If this method has been called too many times</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.RecursionDecrement">
            <summary>
            Decrement recursion counter
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing"><c>true</c> if called by <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.Dispose"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ReadTypeRefAndNestedNoAssembly(System.Char)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> including any possible nested <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>s.
            </summary>
            <param name="nestedChar">Character separating nested types</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> instance, which could be nested.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ReadTypeRefNoAssembly">
            <summary>
            Reads a namespace and name and creates a TypeRef. Does not read any nested types.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.PeekChar">
            <summary>
            Peeks the next char. -1 if no more chars.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.ReadChar">
            <summary>
            Gets the next char or -1 if no more chars
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeNameParser.GetIdChar(System.Boolean,System.Boolean)">
            <summary>
            Gets the next ID char or <c>-1</c> if no more ID chars
            </summary>
            <param name="ignoreWhiteSpace"><c>true</c> if white space should be ignored</param>
            <param name="ignoreEqualSign"><c>true</c> if equal sign '=' should be ignored</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionTypeNameParser">
            <summary>
            Parses reflection type names. Grammar http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionTypeNameParser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder)">
            <summary>
            Constructor
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionTypeNameParser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.String,Datadog.Trace.Vendors.dnlib.DotNet.IAssemblyRefFinder,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="ownerModule">Module that will own the returned <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IType"/> or <c>null</c></param>
            <param name="typeFullName">Full name of type</param>
            <param name="typeNameParserHelper">Helper class</param>
            <param name="gpContext">Generic parameter context</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionTypeNameParser.ParseAssemblyRef(System.String)">
            <summary>
            Parses an assembly name
            </summary>
            <param name="asmFullName">Full assembly name</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> instance or <c>null</c> if parsing failed</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionTypeNameParser.ParseAssemblyRef(System.String,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Parses an assembly name
            </summary>
            <param name="asmFullName">Full assembly name</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> instance or <c>null</c> if parsing failed</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ReflectionTypeNameParser.ParseAsTypeSig">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef">
            <summary>
            A high-level representation of a row in the TypeRef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.module">
            <summary>
            The owner module
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.TypeDefOrRefTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.MemberRefParentTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ResolutionScopeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Datadog#Trace#Vendors#dnlib#DotNet#IGenericParameterProvider#NumberOfGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Datadog#Trace#Vendors#dnlib#DotNet#IType#TypeName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ReflectionName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Datadog#Trace#Vendors#dnlib#DotNet#IType#Namespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ReflectionNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ReflectionFullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.AssemblyQualifiedName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.DefinitionAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Scope">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ScopeType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ContainsGenericParameter">
            <summary>
            Always returns <c>false</c> since a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> does not contain any
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ResolutionScope">
            <summary>
            From column TypeRef.ResolutionScope
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.resolutionScope">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.resolutionScope_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.GetResolutionScope_NoLock">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.resolutionScope"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Name">
            <summary>
            From column TypeRef.Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.name">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Namespace">
            <summary>
            From column TypeRef.Namespace
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.namespace">
            <summary>Name</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.customDebugInfos"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.IsNested">
            <summary>
            <c>true</c> if it's nested within another <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.IsValueType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.IsPrimitive">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.DeclaringType">
            <summary>
            Gets the declaring type, if any
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Datadog#Trace#Vendors#dnlib#DotNet#IMemberRef#DeclaringType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Resolve">
            <summary>
            Resolves the type
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance or <c>null</c> if it couldn't be resolved</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.Resolve(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Resolves the type
            </summary>
            <param name="sourceModule">The module that needs to resolve the type or <c>null</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance or <c>null</c> if it couldn't be resolved</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ResolveThrow">
            <summary>
            Resolves the type
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If the type couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ResolveThrow(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Resolves the type
            </summary>
            <param name="sourceModule">The module that needs to resolve the type or <c>null</c></param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> instance</returns>
            <exception cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeResolveException">If the type couldn't be resolved</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.GetNonNestedTypeRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Gets the top-most (non-nested) <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="typeRef">Input</param>
            <returns>The non-nested <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> or <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefUser">
            <summary>
            A TypeRef row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="name">Type name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="namespace">Type namespace</param>
            <param name="name">Type name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.IResolutionScope)">
            <summary>
            Constructor
            </summary>
            <param name="module">Owner module</param>
            <param name="namespace">Type namespace</param>
            <param name="name">Type name</param>
            <param name="resolutionScope">Resolution scope (a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef"/>,
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef"/> or <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>)</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefMD">
            <summary>
            Created from a row in the TypeRef table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefMD.GetResolutionScope_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeRefMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>TypeRef</c> row</param>
            <param name="rid">Row ID</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig">
            <summary>
            Type sig base class
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Next">
            <summary>
            Returns the wrapped element type. Can only be <c>null</c> if it was an invalid sig or
            if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.LeafSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.ElementType">
            <summary>
            Gets the element type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Datadog#Trace#Vendors#dnlib#DotNet#IIsTypeOrMethod#IsMethod">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Datadog#Trace#Vendors#dnlib#DotNet#IIsTypeOrMethod#IsType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Datadog#Trace#Vendors#dnlib#DotNet#IGenericParameterProvider#NumberOfGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsValueType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsPrimitive">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.TypeName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Datadog#Trace#Vendors#dnlib#DotNet#IFullName#Name">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.ReflectionName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Namespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.ReflectionNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.ReflectionFullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.AssemblyQualifiedName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.DefinitionAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Scope">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.ScopeType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsTypeDefOrRef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsCorLibType">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsClassSig">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsValueTypeSig">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsGenericParameter">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsGenericTypeParameter">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsGenericMethodParameter">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsSentinel">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SentinelSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsFunctionPointer">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FnPtrSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsGenericInstanceType">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsPointer">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsByRef">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsSingleOrMultiDimensionalArray">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/> or a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsArray">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsSZArray">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsModifier">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModifierSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsRequiredModifier">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CModReqdSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsOptionalModifier">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CModOptSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsPinned">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PinnedSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsValueArray">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueArraySig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.IsModuleSig">
            <summary>
            <c>true</c> if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.ContainsGenericParameter">
            <summary>
            <c>true</c> if this <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> contains a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.LeafSig">
            <summary>
            Base class for element types that are last in a type sig, ie.,
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SentinelSig"/>,
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FnPtrSig"/>, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.LeafSig.Next">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig">
            <summary>
            Wraps a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeDefOrRef">
            <summary>
            Gets the the <c>TypeDefOrRef</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.IsTypeRef">
            <summary>
            Returns <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeRef"/> != <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.IsTypeDef">
            <summary>
            Returns <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeDef"/> != <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.IsTypeSpec">
            <summary>
            Returns <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeSpec"/> != <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeRef">
            <summary>
            Gets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeRef"/> or <c>null</c> if it's not a <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeRef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeDef">
            <summary>
            Gets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeDef"/> or <c>null</c> if it's not a <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeSpec">
            <summary>
            Gets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeSpec"/> or <c>null</c> if it's not a <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeSpec"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="typeDefOrRef">A <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeRef"/>, <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeDef"/> or
            a <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeDefOrRefSig.TypeSpec"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig">
            <summary>
            A core library type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig.ElementType">
            <summary>
            Gets the element type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CorLibTypeSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.ElementType)">
            <summary>
            Constructor
            </summary>
            <param name="corType">The type which must be a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> or a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>. <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/> and <c>null</c> are not allowed.</param>
            <param name="elementType">The type's element type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig">
            <summary>
            Base class for class/valuetype element types
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="typeDefOrRef">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.ValueType"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ValueTypeSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="typeDefOrRef">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Class"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ClassSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Constructor
            </summary>
            <param name="typeDefOrRef">A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig">
            <summary>
            Generic method/type var base class
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.HasOwner">
            <summary>
            <c>true</c> if it has an owner <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.HasOwnerType">
            <summary>
            <c>true</c> if it has an owner <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.OwnerType"/> is
            not <c>null</c>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.HasOwnerMethod">
            <summary>
            <c>true</c> if it has an owner <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> (<see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.OwnerMethod"/> is
            not <c>null</c>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.OwnerType">
            <summary>
            Gets the owner type or <c>null</c> if the owner is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/> or if it
            has no owner.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.OwnerMethod">
            <summary>
            Gets the owner method or <c>null</c> if the owner is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or if it
            has no owner.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.Number">
            <summary>
            Gets the generic param number
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.GenericParam">
            <summary>
            Gets the corresponding <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericParam"/> or <c>null</c> if none exists.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.#ctor(System.Boolean,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="isTypeVar"><c>true</c> if it's a <c>Var</c>, <c>false</c> if it's a <c>MVar</c></param>
            <param name="number">Generic param number</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.#ctor(System.Boolean,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.ITypeOrMethodDef)">
            <summary>
            Constructor
            </summary>
            <param name="isTypeVar"><c>true</c> if it's a <c>Var</c>, <c>false</c> if it's a <c>MVar</c></param>
            <param name="number">Generic param number</param>
            <param name="genericParamProvider">Owner method/type or <c>null</c></param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.IsMethodVar">
            <summary>
            Returns <c>true</c> if it's a <c>MVar</c> element type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericSig.IsTypeVar">
            <summary>
            Returns <c>true</c> if it's a <c>Var</c> element type
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Var"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar.#ctor(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar.#ctor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar.#ctor(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Constructor
            </summary>
            <param name="number">Generic parameter number</param>
            <param name="genericParamProvider">Owner type or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericVar.#ctor(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Constructor
            </summary>
            <param name="number">Generic parameter number</param>
            <param name="genericParamProvider">Owner type or <c>null</c></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.MVar"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar.#ctor(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar.#ctor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar.#ctor(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Constructor
            </summary>
            <param name="number">Generic parameter number</param>
            <param name="genericParamProvider">Owner method or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericMVar.#ctor(System.Int32,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Constructor
            </summary>
            <param name="number">Generic parameter number</param>
            <param name="genericParamProvider">Owner method or <c>null</c></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SentinelSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Sentinel"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SentinelSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.FnPtrSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.FnPtr"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FnPtrSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FnPtrSig.Signature">
            <summary>
            Gets the signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.FnPtrSig.MethodSig">
            <summary>
            Gets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.FnPtrSig.MethodSig"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.FnPtrSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Constructor
            </summary>
            <param name="signature">The method signature</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.GenericInst"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.GenericType">
            <summary>
            Gets the generic type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.GenericArguments">
            <summary>
            Gets the generic arguments (it's never <c>null</c>)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="genericType">The generic type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="genericType">The generic type</param>
            <param name="genArgCount">Number of generic arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="genericType">The generic type</param>
            <param name="genArgCount">Number of generic arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="genericType">The generic type</param>
            <param name="genArg1">Generic argument #1</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="genericType">The generic type</param>
            <param name="genArg1">Generic argument #1</param>
            <param name="genArg2">Generic argument #2</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="genericType">The generic type</param>
            <param name="genArg1">Generic argument #1</param>
            <param name="genArg2">Generic argument #2</param>
            <param name="genArg3">Generic argument #3</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig[])">
            <summary>
            Constructor
            </summary>
            <param name="genericType">The generic type</param>
            <param name="genArgs">Generic arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.GenericInstSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ClassOrValueTypeSig,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig})">
            <summary>
            Constructor
            </summary>
            <param name="genericType">The generic type</param>
            <param name="genArgs">Generic arguments</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.NonLeafSig">
            <summary>
            Base class of non-leaf element types
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.NonLeafSig.Next">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.NonLeafSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="nextSig">Next sig</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Ptr"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PtrSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="nextSig">The next element type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.ByRef"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ByRefSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="nextSig">The next element type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase">
            <summary>
            Array base class
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="arrayType">Array type</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.IsMultiDimensional">
            <summary>
            <c>true</c> if it's a multi-dimensional array (i.e., <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/>),
            and <c>false</c> if it's a single-dimensional array (i.e., <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>)
            </summary>
            <seealso cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.IsSingleDimensional"/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.IsSingleDimensional">
            <summary>
            <c>true</c> if it's a single-dimensional array (i.e., <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>),
            and <c>false</c> if it's a multi-dimensional array (i.e., <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/>)
            </summary>
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.IsMultiDimensional"/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.Rank">
            <summary>
            Gets/sets the rank (number of dimensions). This can only be set if
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.IsMultiDimensional"/> is <c>true</c>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.GetSizes">
            <summary>
            Gets all sizes. If it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>, then it will be an empty temporary
            list that is re-created every time this method is called.
            </summary>
            <returns>A list of sizes</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySigBase.GetLowerBounds">
            <summary>
            Gets all lower bounds. If it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>, then it will be an empty
            temporary list that is re-created every time this method is called.
            </summary>
            <returns>A list of lower bounds</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Array"/>
            </summary>
            <seealso cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig"/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.Rank">
            <summary>
            Gets/sets the rank (max value is <c>0x1FFFFFFF</c>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.Sizes">
            <summary>
            Gets all sizes (max elements is <c>0x1FFFFFFF</c>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.LowerBounds">
            <summary>
            Gets all lower bounds (max elements is <c>0x1FFFFFFF</c>)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="arrayType">Array type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="arrayType">Array type</param>
            <param name="rank">Array rank</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="arrayType">Array type</param>
            <param name="rank">Array rank</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.UInt32,System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="arrayType">Array type</param>
            <param name="rank">Array rank</param>
            <param name="sizes">Sizes list. <c>This instance will be the owner of this list.</c></param>
            <param name="lowerBounds">Lower bounds list. <c>This instance will be the owner of this list.</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Int32,System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="arrayType">Array type</param>
            <param name="rank">Array rank</param>
            <param name="sizes">Sizes list. <c>This instance will be the owner of this list.</c></param>
            <param name="lowerBounds">Lower bounds list. <c>This instance will be the owner of this list.</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.UInt32,System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="arrayType">Array type</param>
            <param name="rank">Array rank</param>
            <param name="sizes">Sizes list. <c>This instance will be the owner of this list.</c></param>
            <param name="lowerBounds">Lower bounds list. <c>This instance will be the owner of this list.</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.GetSizes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig.GetLowerBounds">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.SZArray"/> (single dimension, zero lower bound array)
            </summary>
            <seealso cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ArraySig"/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig.Rank">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="nextSig">The next element type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig.GetSizes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.SZArraySig.GetLowerBounds">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModifierSig">
            <summary>
            Base class for modifier type sigs
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModifierSig.Modifier">
            <summary>
            Returns the modifier type
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModifierSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="modifier">Modifier type</param>
            <param name="nextSig">The next element type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CModReqdSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.CModReqd"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CModReqdSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CModReqdSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.CModOptSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.CModOpt"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.CModOptSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.CModOptSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.PinnedSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Pinned"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.PinnedSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.PinnedSig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="nextSig">The next element type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ValueArraySig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.ValueArray"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ValueArraySig.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ValueArraySig.Size">
            <summary>
            Gets/sets the size
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ValueArraySig.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="nextSig">The next element type</param>
            <param name="size">Size of the array</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ModuleSig">
            <summary>
            Represents a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.ElementType.Module"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleSig.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.ModuleSig.Index">
            <summary>
            Gets/sets the index
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ModuleSig.#ctor(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index</param>
            <param name="nextSig">The next element type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec">
            <summary>
            A high-level representation of a row in the TypeSpec table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.rid">
            <summary>
            The row id in its table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.MDToken">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.Rid">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.TypeDefOrRefTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.HasCustomAttributeTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.MemberRefParentTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.Datadog#Trace#Vendors#dnlib#DotNet#IGenericParameterProvider#NumberOfGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.Datadog#Trace#Vendors#dnlib#DotNet#IFullName#Name">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.Datadog#Trace#Vendors#dnlib#DotNet#IMemberRef#DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.IsValueType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.IsPrimitive">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.TypeName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.ReflectionName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.Datadog#Trace#Vendors#dnlib#DotNet#IType#Namespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.ReflectionNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.ReflectionFullName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.AssemblyQualifiedName">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.DefinitionAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.Scope">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.ScopeType">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.ContainsGenericParameter">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.TypeSig">
            <summary>
            From column TypeSpec.Signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.ExtraData">
            <summary>
            Gets/sets the extra data that was found after the signature
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.typeSig">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.extraData">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.typeSigAndExtraData_isInitialized">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.GetTypeSigAndExtraData_NoLock(System.Byte[]@)">
            <summary>Called to initialize <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.typeSig"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.CustomAttributes">
            <summary>
            Gets all custom attributes
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.customAttributes">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.InitializeCustomAttributes">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.customAttributes"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.HasCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.HasCustomDebugInformationTag">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.HasCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.CustomDebugInfos">
            <summary>
            Gets all custom debug infos
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.customDebugInfos">
            <summary/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.InitializeCustomDebugInfos">
            <summary>Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.customDebugInfos"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecUser">
            <summary>
            A TypeSpec row created by the user and not present in the original .NET file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecUser.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Constructor
            </summary>
            <param name="typeSig">A type sig</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecMD">
            <summary>
            Created from a row in the TypeSpec table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecMD.readerModule">
            <summary>The module where this instance is located</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecMD.OrigRid">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecMD.GetTypeSigAndExtraData_NoLock(System.Byte[]@)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecMD.InitializeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecMD.InitializeCustomDebugInfos">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpecMD.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Constructor
            </summary>
            <param name="readerModule">The module which contains this <c>TypeSpec</c> row</param>
            <param name="rid">Row ID</param>
            <param name="gpContext">Generic parameter context</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="readerModule"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rid"/> is invalid</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8StringEqualityComparer">
            <summary>
            Compares <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/>s
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.UTF8StringEqualityComparer.Instance">
            <summary>
            The default instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8StringEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8StringEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String">
            <summary>
            A UTF-8 encoded string where the original data is kept in memory to avoid conversions
            when the data is not really valid UTF-8 encoded data
            </summary>
            <remarks>When comparing strings, a byte compare is performed. The reason is that this
            is what the CLR does when comparing strings in the #Strings stream.</remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Empty">
            <summary>
            An empty <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.String">
            <summary>
            Gets the value as a UTF8 decoded string. Only use it for display purposes,
            not for serialization.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Data">
            <summary>
            Gets the original encoded data. Don't modify this data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Length">
            <summary>
            Gets the length of the this as a <see cref="T:System.String"/>. I.e., it's the same as
            <c>String.Length</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.DataLength"/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.DataLength">
            <summary>
            Gets the length of the raw data. It's the same as <c>Data.Length</c>
            </summary>
            <seealso cref="P:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Length"/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IsNull(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Checks whether <paramref name="utf8"/> is <c>null</c> or if its data is <c>null</c>.
            </summary>
            <param name="utf8">The instance to check</param>
            <returns><c>true</c> if <c>null</c> or empty, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IsNullOrEmpty(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Checks whether <paramref name="utf8"/> is <c>null</c> or if its data is <c>null</c> or the
            data is zero length.
            </summary>
            <param name="utf8">The instance to check</param>
            <returns><c>true</c> if <c>null</c> or empty, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_Implicit(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)~System.String">
            <summary>Implicit conversion from <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/> to <see cref="T:System.String"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_Implicit(System.String)~Datadog.Trace.Vendors.dnlib.DotNet.UTF8String">
            <summary>Implicit conversion from <see cref="T:System.String"/> to <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToSystemString(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Converts it to a <see cref="T:System.String"/>
            </summary>
            <param name="utf8">The UTF-8 string instace or <c>null</c></param>
            <returns>A <see cref="T:System.String"/> or <c>null</c> if <paramref name="utf8"/> is <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToSystemStringOrEmpty(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Converts it to a <see cref="T:System.String"/> or an empty string if <paramref name="utf8"/> is <c>null</c>
            </summary>
            <param name="utf8">The UTF-8 string instace or <c>null</c></param>
            <returns>A <see cref="T:System.String"/> (never <c>null</c>)</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Gets the hash code of a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/>
            </summary>
            <param name="utf8">Input</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.CompareTo(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.CompareTo(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Compares two <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/> instances (case sensitive)
            </summary>
            <param name="a">Instance #1 or <c>null</c></param>
            <param name="b">Instance #2 or <c>null</c></param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.CaseInsensitiveCompareTo(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Compares two <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/> instances (case insensitive)
            </summary>
            <param name="a">Instance #1 or <c>null</c></param>
            <param name="b">Instance #2 or <c>null</c></param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.CaseInsensitiveEquals(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Compares two <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String"/> instances (case insensitive)
            </summary>
            <param name="a">Instance #1 or <c>null</c></param>
            <param name="b">Instance #2 or <c>null</c></param>
            <returns><c>true</c> if equals, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_Equality(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_Equality(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_Equality(System.String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_Inequality(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_Inequality(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_Inequality(System.String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_GreaterThan(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_LessThan(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_GreaterThanOrEqual(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.op_LessThanOrEqual(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">UTF-8 data that this instance now owns</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="s">The string</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Equals(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Compares two instances
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns><c>true</c> if equals, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Equals(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Contains(System.String)">
            <summary>
            Checks whether <paramref name="value"/> exists in this string
            </summary>
            <param name="value">Value to find</param>
            <returns><c>true</c> if <paramref name="value"/> exists in string or is the
            empty string, else <c>false</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.EndsWith(System.String)">
            <summary>
            Checks whether <paramref name="value"/> matches the end of this string
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Checks whether <paramref name="value"/> matches the end of this string
            </summary>
            <param name="value">Value</param>
            <param name="ignoreCase"><c>true</c> to ignore case</param>
            <param name="culture">Culture info</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.EndsWith(System.String,System.StringComparison)">
            <summary>
            Checks whether <paramref name="value"/> matches the end of this string
            </summary>
            <param name="value">Value</param>
            <param name="comparisonType">Comparison type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.StartsWith(System.String)">
            <summary>
            Checks whether <paramref name="value"/> matches the beginning of this string
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Checks whether <paramref name="value"/> matches the beginning of this string
            </summary>
            <param name="value">Value</param>
            <param name="ignoreCase"><c>true</c> to ignore case</param>
            <param name="culture">Culture info</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.StartsWith(System.String,System.StringComparison)">
            <summary>
            Checks whether <paramref name="value"/> matches the beginning of this string
            </summary>
            <param name="value">Value</param>
            <param name="comparisonType">Comparison type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.CompareTo(System.String)">
            <summary>
            Compares this instance with <paramref name="strB"/>
            </summary>
            <param name="strB">Other string</param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.Char)">
            <summary>
            Returns the index of the first character <paramref name="value"/> in this string
            </summary>
            <param name="value">Character</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.Char,System.Int32)">
            <summary>
            Returns the index of the first character <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/>
            </summary>
            <param name="value">Character</param>
            <param name="startIndex">Start index</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Returns the index of the first character <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/> for max <paramref name="count"/>
            characters.
            </summary>
            <param name="value">Character</param>
            <param name="startIndex">Start index</param>
            <param name="count">Max number of chars to scan</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.String)">
            <summary>
            Returns the index of the first sub string <paramref name="value"/> in this string
            </summary>
            <param name="value">String</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.String,System.Int32)">
            <summary>
            Returns the index of the first sub string <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/>
            </summary>
            <param name="value">String</param>
            <param name="startIndex">Start index</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the index of the first sub string <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/> for max <paramref name="count"/>
            characters.
            </summary>
            <param name="value">String</param>
            <param name="startIndex">Start index</param>
            <param name="count">Max number of chars to scan</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Returns the index of the first sub string <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/> for max <paramref name="count"/>
            characters.
            </summary>
            <param name="value">String</param>
            <param name="startIndex">Start index</param>
            <param name="count">Max number of chars to scan</param>
            <param name="comparisonType">Comparison type</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns the index of the first sub string <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/>
            </summary>
            <param name="value">String</param>
            <param name="startIndex">Start index</param>
            <param name="comparisonType">Comparison type</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.IndexOf(System.String,System.StringComparison)">
            <summary>
            Returns the index of the first sub string <paramref name="value"/> in this string
            </summary>
            <param name="value">String</param>
            <param name="comparisonType">Comparison type</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.Char)">
            <summary>
            Returns the index of the last character <paramref name="value"/> in this string
            </summary>
            <param name="value">Character</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.Char,System.Int32)">
            <summary>
            Returns the index of the last character <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/>
            </summary>
            <param name="value">Character</param>
            <param name="startIndex">Start index</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Returns the index of the last character <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/> for max <paramref name="count"/>
            characters.
            </summary>
            <param name="value">Character</param>
            <param name="startIndex">Start index</param>
            <param name="count">Max number of chars to scan</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.String)">
            <summary>
            Returns the index of the last sub string <paramref name="value"/> in this string
            </summary>
            <param name="value">String</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.String,System.Int32)">
            <summary>
            Returns the index of the last sub string <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/>
            </summary>
            <param name="value">String</param>
            <param name="startIndex">Start index</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the index of the last sub string <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/> for max <paramref name="count"/>
            characters.
            </summary>
            <param name="value">String</param>
            <param name="startIndex">Start index</param>
            <param name="count">Max number of chars to scan</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Returns the index of the last sub string <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/> for max <paramref name="count"/>
            characters.
            </summary>
            <param name="value">String</param>
            <param name="startIndex">Start index</param>
            <param name="count">Max number of chars to scan</param>
            <param name="comparisonType">Comparison type</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns the index of the last sub string <paramref name="value"/> in this string
            starting from index <paramref name="startIndex"/>
            </summary>
            <param name="value">String</param>
            <param name="startIndex">Start index</param>
            <param name="comparisonType">Comparison type</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.LastIndexOf(System.String,System.StringComparison)">
            <summary>
            Returns the index of the last sub string <paramref name="value"/> in this string
            </summary>
            <param name="value">String</param>
            <param name="comparisonType">Comparison type</param>
            <returns>The index of <paramref name="value"/> or <c>-1</c> if not found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Insert(System.Int32,System.String)">
            <summary>
            Inserts string <paramref name="value"/> at a index <paramref name="startIndex"/>
            </summary>
            <param name="startIndex">Start index</param>
            <param name="value">Value to insert</param>
            <returns>A new instance with the <paramref name="value"/> inserted at position
            <paramref name="startIndex"/></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Remove(System.Int32)">
            <summary>
            Removes all characters starting from position <paramref name="startIndex"/>
            </summary>
            <param name="startIndex">Start index</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Remove(System.Int32,System.Int32)">
            <summary>
            Removes <paramref name="count"/> characters starting from position
            <paramref name="startIndex"/>
            </summary>
            <param name="startIndex">Start index</param>
            <param name="count">Number of characters to remove</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Replace(System.Char,System.Char)">
            <summary>
            Replaces all characters <paramref name="oldChar"/> with <paramref name="newChar"/>
            </summary>
            <param name="oldChar">Character to find</param>
            <param name="newChar">Character to replace all <paramref name="oldChar"/></param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Replace(System.String,System.String)">
            <summary>
            Replaces all sub strings <paramref name="oldValue"/> with <paramref name="newValue"/>
            </summary>
            <param name="oldValue">Sub string to find</param>
            <param name="newValue">Sub string to replace all <paramref name="oldValue"/></param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Substring(System.Int32)">
            <summary>
            Returns a sub string of this string starting at offset <paramref name="startIndex"/>
            </summary>
            <param name="startIndex">Start index</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Substring(System.Int32,System.Int32)">
            <summary>
            Returns a sub string of this string starting at offset <paramref name="startIndex"/>.
            Length of sub string is <paramref name="length"/>.
            </summary>
            <param name="startIndex">Start index</param>
            <param name="length">Length of sub string</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToLower">
            <summary>
            Returns the lower case version of this string
            </summary>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToLower(System.Globalization.CultureInfo)">
            <summary>
            Returns the lower case version of this string
            </summary>
            <param name="culture">Culture info</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToLowerInvariant">
            <summary>
            Returns the lower case version of this string using the invariant culture
            </summary>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToUpper">
            <summary>
            Returns the upper case version of this string
            </summary>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToUpper(System.Globalization.CultureInfo)">
            <summary>
            Returns the upper case version of this string
            </summary>
            <param name="culture">Culture info</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToUpperInvariant">
            <summary>
            Returns the upper case version of this string using the invariant culture
            </summary>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.Trim">
            <summary>
            Removes all leading and trailing whitespace characters
            </summary>
            <returns>A new instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.UTF8String.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.ByteArrayEqualityComparer">
            <summary>
            Compares byte arrays
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.ByteArrayEqualityComparer.Instance">
            <summary>
            Default instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ByteArrayEqualityComparer.Equals(System.Byte[],System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.ByteArrayEqualityComparer.GetHashCode(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.GetAssemblyNameString(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.Version,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.PublicKeyBase,Datadog.Trace.Vendors.dnlib.DotNet.AssemblyAttributes)">
            <summary>
            Returns an assembly name string
            </summary>
            <param name="name">Simple assembly name</param>
            <param name="version">Version or <c>null</c></param>
            <param name="culture">Culture or <c>null</c></param>
            <param name="publicKey">Public key / public key token or <c>null</c></param>
            <param name="attributes">Assembly attributes</param>
            <returns>An assembly name string</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.ToHex(System.Byte[],System.Boolean)">
            <summary>
            Convert a byte[] to a <see cref="T:System.String"/>
            </summary>
            <param name="bytes">All bytes</param>
            <param name="upper"><c>true</c> if output should be in upper case hex</param>
            <returns><paramref name="bytes"/> as a hex string</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.ParseBytes(System.String)">
            <summary>
            Converts a hex string to a byte[]
            </summary>
            <param name="hexString">A string with an even number of hex characters</param>
            <returns><paramref name="hexString"/> converted to a byte[] or <c>null</c>
            if <paramref name="hexString"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.TryParseHexChar(System.Char)">
            <summary>
            Converts a character to a hex digit
            </summary>
            <param name="c">Hex character</param>
            <returns><c>0x00</c>-<c>0x0F</c> if successful, <c>-1</c> if <paramref name="c"/> is not
            a valid hex digit</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.CompareTo(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays
            </summary>
            <param name="a">Byte array #1</param>
            <param name="b">Byte array #2</param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.Equals(System.Byte[],System.Byte[])">
            <summary>
            Checks whether two byte arrays are equal
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.GetHashCode(System.Byte[])">
            <summary>
            Gets the hash code of a byte array
            </summary>
            <param name="a">Byte array</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.CompareTo(System.Version,System.Version)">
            <summary>
            Compares two versions
            </summary>
            <remarks>This differs from <see cref="M:System.Version.CompareTo(System.Version)"/> if the build
            and/or revision numbers haven't been initialized or if one of the args is <c>null</c>.
            </remarks>
            <param name="a">Version #1 or <c>null</c> to be treated as v0.0.0.0</param>
            <param name="b">Version #2 or <c>null</c> to be treated as v0.0.0.0</param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.Equals(System.Version,System.Version)">
            <summary>
            Checks whether two versions are the same
            </summary>
            <remarks>This differs from <see cref="M:System.Version.Equals(System.Version)"/> if the build
            and/or revision numbers haven't been initialized or if one of the args is <c>null</c>.
            </remarks>
            <param name="a">Version #1 or <c>null</c> to be treated as v0.0.0.0</param>
            <param name="b">Version #2 or <c>null</c> to be treated as v0.0.0.0</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.CreateVersionWithNoUndefinedValues(System.Version)">
            <summary>
            Creates a new <see cref="T:System.Version"/> instance with no undefined version values (eg.
            the build and revision values won't be -1).
            </summary>
            <param name="a">A <see cref="T:System.Version"/> instance</param>
            <returns>A new <see cref="T:System.Version"/> instance</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.ParseVersion(System.String)">
            <summary>
            Parses a version string
            </summary>
            <param name="versionString">Version string</param>
            <returns>A new <see cref="T:System.Version"/> or <c>null</c> if <paramref name="versionString"/>
            is an invalid version</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.LocaleCompareTo(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Compares two locales (cultures)
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.LocaleEquals(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Compares two locales (cultures)
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.LocaleCompareTo(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.String)">
            <summary>
            Compares two locales (cultures)
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns>&lt; 0 if a &lt; b, 0 if a == b, &gt; 0 if a &gt; b</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.LocaleEquals(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String,System.String)">
            <summary>
            Compares two locales (cultures)
            </summary>
            <param name="a">First</param>
            <param name="b">Second</param>
            <returns><c>true</c> if same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.GetHashCodeLocale(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Gets the hash code of a locale
            </summary>
            <param name="a">Value</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.AlignUp(System.UInt32,System.UInt32)">
            <summary>
            Align up
            </summary>
            <param name="v">Value</param>
            <param name="alignment">Alignment</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Utils.AlignUp(System.Int32,System.UInt32)">
            <summary>
            Align up
            </summary>
            <param name="v">Value</param>
            <param name="alignment">Alignment</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.VariantType">
            <summary>
            Variant type (<c>VT_XXX</c> in the Windows SDK)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Empty">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.None">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Null">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.I2">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.I4">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.R4">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.R8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.CY">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Date">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.BStr">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Dispatch">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Error">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Bool">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Variant">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Unknown">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Decimal">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.I1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.UI1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.UI2">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.UI4">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.I8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.UI8">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Int">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.UInt">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Void">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.HResult">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Ptr">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.SafeArray">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.CArray">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.UserDefined">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.LPStr">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.LPWStr">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Record">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.IntPtr">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.UIntPtr">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.FileTime">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Blob">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Stream">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Storage">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.StreamedObject">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.StoredObject">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.BlobObject">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.CF">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.CLSID">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.VersionedStream">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.BStrBlob">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Vector">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Array">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.ByRef">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Reserved">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.Illegal">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.IllegalMasked">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.TypeMask">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VariantType.NotInitialized">
            <summary>This wasn't present in the blob</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.VTableFixups">
            <summary>
            All native vtables
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.VTableFixups.RVA">
            <summary>
            Gets/sets the RVA of the vtable fixups
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.VTableFixups.VTables">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.VTable"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTableFixups.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTableFixups.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTableFixups.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTableFixups.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags">
            <summary>
            See COR_VTABLE_XXX in CorHdr.h
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags.Bit32">
            <summary>
            32-bit vtable slots
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags.Bit64">
            <summary>
            64-bit vtable slots
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags.FromUnmanaged">
            <summary>
            Transition from unmanaged code
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags.FromUnmanagedRetainAppDomain">
            <summary>
            Also retain app domain
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags.CallMostDerived">
            <summary>
            Call most derived method
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.VTable">
            <summary>
            One VTable accessed by native code
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.VTable.RVA">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.VTable.RVA"/> of this vtable
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.VTable.Flags">
            <summary>
            Gets/sets the flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.VTable.Is32Bit">
            <summary>
            <c>true</c> if each vtable slot is 32 bits in size
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.VTable.Is64Bit">
            <summary>
            <c>true</c> if each vtable slot is 64 bits in size
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.VTable.Methods">
            <summary>
            Gets the vtable methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTable.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTable.#ctor(Datadog.Trace.Vendors.dnlib.PE.RVA,Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="rva">RVA of this vtable</param>
            <param name="flags">Flgas</param>
            <param name="numSlots">Number of methods in vtable</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTable.#ctor(Datadog.Trace.Vendors.dnlib.PE.RVA,Datadog.Trace.Vendors.dnlib.DotNet.VTableFlags,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.IMethod})">
            <summary>
            Constructor
            </summary>
            <param name="rva">RVA of this vtable</param>
            <param name="flags">Flgas</param>
            <param name="methods">Vtable methods</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTable.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTable.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.VTable.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.WinMDHelpers.ToCLR(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Converts WinMD type <paramref name="td"/> to a CLR type. Returns <c>null</c>
            if it's not a CLR compatible WinMD type.
            </summary>
            <param name="module">Owner module or <c>null</c></param>
            <param name="td">Type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.WinMDHelpers.ToCLR(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,System.Boolean@)">
            <summary>
            Converts WinMD type <paramref name="td"/> to a CLR type. Returns <c>null</c>
            if it's not a CLR compatible WinMD type.
            </summary>
            <param name="module">Owner module or <c>null</c></param>
            <param name="td">Type</param>
            <param name="isClrValueType"><c>true</c> if the returned type is a value type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.WinMDHelpers.ToCLR(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Converts WinMD type <paramref name="tr"/> to a CLR type. Returns <c>null</c>
            if it's not a CLR compatible WinMD type.
            </summary>
            <param name="module">Owner module or <c>null</c></param>
            <param name="tr">Type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.WinMDHelpers.ToCLR(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeRef,System.Boolean@)">
            <summary>
            Converts WinMD type <paramref name="tr"/> to a CLR type. Returns <c>null</c>
            if it's not a CLR compatible WinMD type.
            </summary>
            <param name="module">Owner module or <c>null</c></param>
            <param name="tr">Type</param>
            <param name="isClrValueType"><c>true</c> if the returned type is a value type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.WinMDHelpers.ToCLR(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Converts WinMD type <paramref name="et"/> to a CLR type. Returns <c>null</c>
            if it's not a CLR compatible WinMD type.
            </summary>
            <param name="module">Owner module or <c>null</c></param>
            <param name="et">Type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.WinMDHelpers.ToCLR(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Converts WinMD type <paramref name="ts"/> to a CLR type. Returns <c>null</c>
            if it's not a CLR compatible WinMD type.
            </summary>
            <param name="module">Owner module or <c>null</c></param>
            <param name="ts">Type</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.WinMDHelpers.ToCLR(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Converts WinMD member reference <paramref name="mr"/> to a CLR member reference. Returns
            <c>null</c> if it's not a CLR compatible WinMD member reference.
            </summary>
            <param name="module">Owner module or <c>null</c></param>
            <param name="mr">Member reference</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.WinMDHelpers.ToCLR(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Converts WinMD method <paramref name="md"/> to a CLR member reference. Returns
            <c>null</c> if it's not a CLR compatible WinMD method
            </summary>
            <param name="module">Owner module or <c>null</c></param>
            <param name="md">Method</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.WinMDStatus">
            <summary>
            WinMD status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.WinMDStatus.None">
            <summary>
            This is not a WinMD file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.WinMDStatus.Pure">
            <summary>
            This is a pure WinMD file (not managed)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.WinMDStatus.Managed">
            <summary>
            This is a managed WinMD file (created by eg. winmdexp.exe)
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter">
            <summary>
            Writes data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.Position">
            <summary>
            Gets the current position
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Destination array</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteSByte(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteByte(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteInt32(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteUInt32(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteUInt64(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteSingle(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteDouble(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes bytes
            </summary>
            <param name="source">Bytes</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes
            </summary>
            <param name="source">Bytes</param>
            <param name="index">Source index</param>
            <param name="length">Number of bytes to write</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap">
            <summary>
            #Blob heap
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.Name">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.Populate(Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream)">
            <summary>
            Populates blobs from an existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.BlobStream"/> (eg. to preserve
            blob offsets)
            </summary>
            <param name="blobStream">The #Blob stream with the original content</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.Add(System.Byte[])">
            <summary>
            Adds data to the #Blob heap
            </summary>
            <param name="data">The data</param>
            <returns>The offset of the data in the #Blob heap</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.Create(System.Byte[])">
            <summary>
            Adds data to the #Blob heap, but does not re-use an existing position
            </summary>
            <param name="data">The data</param>
            <returns>The offset of the data in the #Blob heap</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.GetRawLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.WriteToImpl(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.GetRawDataSize(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.SetRawData(System.UInt32,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.BlobHeap.GetAllRawData">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk">
            <summary>
            Stores a byte array
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="array">The data. It will be owned by this instance and can't be modified by
            other code if this instance is inserted as a <c>key</c> in a dictionary (because
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.GetHashCode"/> return value will be different if you modify the array). If
            it's never inserted as a <c>key</c> in a dictionary, then the contents can be modified,
            but shouldn't be resized after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> has been called.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChecksumAlgorithm">
            <summary>
            Checksum algorithm
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChecksumAlgorithm.SHA1">
            <summary>
            SHA-1
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChecksumAlgorithm.SHA256">
            <summary>
            SHA-256
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChecksumAlgorithm.SHA384">
            <summary>
            SHA-384
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChecksumAlgorithm.SHA512">
            <summary>
            SHA-512
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkList`1">
            <summary>
            Contains a list of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkList`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkList`1.Add(`0,System.UInt32)">
            <summary>
            Add a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk"/>
            </summary>
            <param name="chunk">The chunk to add or <c>null</c> if none</param>
            <param name="alignment">Chunk alignment</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkList`1.Remove(`0)">
            <summary>
            Remove a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk"/>
            </summary>
            <param name="chunk">The chunk to remove or <c>null</c> if none</param>
            <returns>Alignment of the chunk, or <c>null</c> if the chunk cannot be removed.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1">
            <summary>
            Base class of chunk list types
            </summary>
            <typeparam name="T">Chunk type</typeparam>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.chunks">
            <summary>All chunks</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.setOffsetCalled">
            <summary><c>true</c> if <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> has been called</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.Elem">
            <summary>
            Helper struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.Elem.chunk">
            <summary>Data</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.Elem.alignment">
            <summary>Alignment</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.Elem.#ctor(`0,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="chunk">Chunk</param>
            <param name="alignment">Alignment</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.ElemEqualityComparer">
            <summary>
            Equality comparer for <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.Elem"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.ElemEqualityComparer.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="chunkComparer">Compares the chunk type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.ElemEqualityComparer.Equals(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase{`0}.Elem,Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase{`0}.Elem)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.ElemEqualityComparer.GetHashCode(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase{`0}.Elem)">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.RVA">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ChunkListBase`1.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ICustomAttributeWriterHelper">
            <summary>
            Helps <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.CustomAttributeWriter"/> write custom attributes
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.CustomAttributeWriter">
            <summary>
            Writes <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.CustomAttributeWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ICustomAttributeWriterHelper,Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute)">
            <summary>
            Writes a custom attribute
            </summary>
            <param name="helper">Helper class</param>
            <param name="ca">The custom attribute</param>
            <returns>Custom attribute blob</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.CustomAttributeWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ICustomAttributeWriterHelper,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.CANamedArgument})">
            <summary>
            Writes custom attribute named arguments
            </summary>
            <param name="helper">Helper class</param>
            <param name="namedArgs">Named arguments</param>
            <returns>The named args blob</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.CustomAttributeWriter.WriteElem(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,Datadog.Trace.Vendors.dnlib.DotNet.CAArgument)">
            <summary>
            Write a value
            </summary>
            <param name="argType">The ctor arg type, field type, or property type</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.CustomAttributeWriter.GetEnumUnderlyingType(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Gets the enum's underlying type
            </summary>
            <param name="type">An enum type</param>
            <returns>The underlying type or <c>null</c> if we couldn't resolve the type ref</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.CustomAttributeWriter.GetTypeDef(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Converts <paramref name="type"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>, possibly resolving
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>
            </summary>
            <param name="type">The type</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/> or <c>null</c> if we couldn't resolve the
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/> or if <paramref name="type"/> is a type spec</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.CustomAttributeWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk">
            <summary>
            A <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> chunk
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.RVA">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Constructor
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="data">The data</param>
            <param name="virtualSize">Virtual size of <paramref name="data"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@)">
            <summary>
            Constructor
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="data">The data</param>
            <param name="virtualSize">Virtual size of <paramref name="data"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.CreateReader">
            <summary>
            Gets the data reader
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.SetData(Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Replaces the old data with new data. The new data must be the same size as the old data if
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> has been called. That method gets called after
            event <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.BeginCalculateRvasAndFileOffsets"/>
            </summary>
            <param name="newData"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderHeap">
            <summary>
            Copies existing data to a new metadata heap
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderHeap.Name">
            <summary>
            Gets the name of the heap
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderHeap.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.DotNetStream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream whose data will be copied to the new metadata file</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderHeap.#ctor(System.String,Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Constructor
            </summary>
            <param name="name">Heap name</param>
            <param name="heapReader">Heap content</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderHeap.GetRawLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderHeap.WriteToImpl(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter">
            <summary>
            Writes data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.Position">
            <summary>
            Gets/sets the position
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Destination stream</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteSByte(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteByte(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteInt32(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteUInt32(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteUInt64(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteSingle(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteDouble(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes bytes
            </summary>
            <param name="source">Bytes to write</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes
            </summary>
            <param name="source">Bytes to write</param>
            <param name="index">Index to start copying from</param>
            <param name="length">Number of bytes to copy</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteCompressedUInt32(System.UInt32)">
            <summary>
            Writes a compressed <see cref="T:System.UInt32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteCompressedInt32(System.Int32)">
            <summary>
            Writes a compressed <see cref="T:System.Int32"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.GetCompressedUInt32Length(System.UInt32)">
            <summary>
            Gets the size of a compressed <see cref="T:System.UInt32"/>, see <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter.WriteCompressedUInt32(System.UInt32)"/>
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectoryEntry">
            <summary>
            Debug directory entry
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectoryEntry.DebugDirectory">
            <summary>
            Gets the header
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectoryEntry.Chunk">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectoryEntry.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk)">
            <summary>
            Constructor
            </summary>
            <param name="chunk">Data</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory">
            <summary>
            Debug directory chunk
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.DEFAULT_DEBUGDIRECTORY_ALIGNMENT">
            <summary>Default debug directory alignment</summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.RVA">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.Add(System.Byte[])">
            <summary>
            Adds data
            </summary>
            <param name="data">Data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.Add(Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk)">
            <summary>
            Adds data
            </summary>
            <param name="chunk">Data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.Add(System.Byte[],Datadog.Trace.Vendors.dnlib.PE.ImageDebugType,System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Adds data
            </summary>
            <param name="data">Data</param>
            <param name="type">Debug type</param>
            <param name="majorVersion">Major version</param>
            <param name="minorVersion">Minor version</param>
            <param name="timeDateStamp">Timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.Add(Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk,Datadog.Trace.Vendors.dnlib.PE.ImageDebugType,System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Adds data
            </summary>
            <param name="chunk">Data</param>
            <param name="type">Debug type</param>
            <param name="majorVersion">Major version</param>
            <param name="minorVersion">Minor version</param>
            <param name="timeDateStamp">Timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugDirectory.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DeclSecurityWriter">
            <summary>
            Writes <c>DeclSecurity</c> blobs
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DeclSecurityWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute},Datadog.Trace.Vendors.dnlib.DotNet.Writer.IWriterError)">
            <summary>
            Creates a <c>DeclSecurity</c> blob from <paramref name="secAttrs"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="secAttrs">List of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/>s</param>
            <param name="helper">Helps this class</param>
            <returns>A <c>DeclSecurity</c> blob</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DeclSecurityWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute},Datadog.Trace.Vendors.dnlib.DotNet.Writer.IWriterError,System.Boolean)">
            <summary>
            Creates a <c>DeclSecurity</c> blob from <paramref name="secAttrs"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="secAttrs">List of <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.SecurityAttribute"/>s</param>
            <param name="helper">Helps this class</param>
            <param name="optimizeCustomAttributeSerializedTypeNames">Optimize serialized type strings in custom attributes.
            For more info, see <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.OptimizeCustomAttributeSerializedTypeNames"/></param>
            <returns>A <c>DeclSecurity</c> blob</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Extensions.WriteZeroes(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,System.Int32)">
            <summary>
            Write zeros
            </summary>
            <param name="writer">this</param>
            <param name="count">Number of zeros</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Extensions.VerifyWriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk,Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <summary>
            Writes all data to <paramref name="writer"/> and verifies that all bytes were written
            </summary>
            <param name="chunk">this</param>
            <param name="writer">Destination</param>
            <exception cref="T:System.IO.IOException">Not all bytes were written</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Extensions.WriteDataDirectory(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk)">
            <summary>
            Writes a data directory
            </summary>
            <param name="writer">Writer</param>
            <param name="chunk">The data</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.GuidHeap">
            <summary>
            #GUID heap
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.GuidHeap.Name">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.GuidHeap.Add(System.Nullable{System.Guid})">
            <summary>
            Adds a guid to the #GUID heap
            </summary>
            <param name="guid">The guid</param>
            <returns>The index of the guid in the #GUID heap</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.GuidHeap.GetRawLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.GuidHeap.WriteToImpl(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.GuidHeap.GetRawDataSize(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.GuidHeap.SetRawData(System.UInt32,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.GuidHeap.GetAllRawData">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase">
            <summary>
            Base class of most heaps
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.isReadOnly">
            <summary>
            <c>true</c> if <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.SetReadOnly"/> has been called
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.IsBig">
            <summary>
            <c>true</c> if offsets require 4 bytes instead of 2 bytes.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.SetReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.GetRawLength">
            <summary>
            Gets the raw length of the heap
            </summary>
            <returns>Raw length of the heap</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.WriteToImpl(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <summary>
            Writes all data to <paramref name="writer"/> at its current location.
            </summary>
            <param name="writer">Destination</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.HeapBase.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk">
            <summary>
            Data that gets written to the file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.FileOffset">
            <summary>
            Gets the file offset. This is valid only after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> has been called.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.RVA">
            <summary>
            Gets the RVA. This is valid only after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> has been called.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Called when the file offset and RVA are known
            </summary>
            <param name="offset">File offset of this chunk</param>
            <param name="rva">RVA of this chunk</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.GetFileLength">
            <summary>
            Gets the raw file length of this chunk. Must only be called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/>
            has been called.
            </summary>
            <returns>Length of this chunk</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.GetVirtualSize">
            <summary>
            Gets the virtual size of this chunk. Must only be called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/>
            has been called.
            </summary>
            <returns>Virtual size of this chunk</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <summary>
            Writes all data to <paramref name="writer"/> at its current location. It's only
            called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> and <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk.GetFileLength"/> have been called.
            You cannot assume that <paramref name="writer"/>'s file position is the same as this
            chunk's file position.
            </summary>
            <param name="writer">Destination</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IReuseChunk">
            <summary>
            Implemented by <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk"/>s that can reuse the old data location in the original PE file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IReuseChunk.CanReuse(Datadog.Trace.Vendors.dnlib.PE.RVA,System.UInt32)">
            <summary>
            Returns true if this chunk fits in the old location
            </summary>
            <param name="origRva">Original RVA of data</param>
            <param name="origSize">Size of the original location</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IHeap">
            <summary>
            .NET Heap interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IHeap.Name">
            <summary>
            Gets the name of the heap
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IHeap.IsEmpty">
            <summary>
            Checks whether the heap is empty
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IHeap.SetReadOnly">
            <summary>
            Called when the heap should be set to read-only mode
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions">
            <summary>
            Options to <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.DEFAULT_MAJOR_RT_VER">
            <summary>
            Default major runtime version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.DEFAULT_MINOR_RT_VER">
            <summary>
            Default minor runtime version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.MajorRuntimeVersion">
            <summary>
            Major runtime version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.MinorRuntimeVersion">
            <summary>
            Minor runtime version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.EntryPoint">
            <summary>
            Entry point or <c>null</c>. Either a Method/File token or an RVA.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.#ctor(System.UInt16,System.UInt16,Datadog.Trace.Vendors.dnlib.DotNet.MD.ComImageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="major">Major runtime version (default is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.DEFAULT_MAJOR_RT_VER"/>)</param>
            <param name="minor">Minor runtime version (default is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions.DEFAULT_MINOR_RT_VER"/>)</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header">
            <summary>
            .NET header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.Metadata">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.Metadata"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.NetResources">
            <summary>
            Gets/sets the .NET resources
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.StrongNameSignature">
            <summary>
            Gets/sets the strong name signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.RVA">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.Cor20HeaderOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable">
            <summary>
            Import address table chunk
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.ImportDirectory">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.ImportDirectory"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.RVA">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="is64bit">true if it's a 64-bit PE file, false if it's a 32-bit PE file</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportAddressTable.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory">
            <summary>
            Import directory chunk
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.ImportAddressTable">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.ImportAddressTable"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.CorXxxMainRVA">
            <summary>
            Gets the RVA of _CorDllMain/_CorExeMain in the import lookup table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.IatCorXxxMainRVA">
            <summary>
            Gets RVA of _CorExeMain/_CorDllMain in the IAT
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.IsExeFile">
            <summary>
            Gets/sets a value indicating whether this is a EXE or a DLL file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.DllToImport">
            <summary>
            Gets/sets the name of the dll which should be imported.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.EntryPointName">
            <summary>
            Gets/sets the name of the entry point of the imported dll.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="is64bit">true if it's a 64-bit PE file, false if it's a 32-bit PE file</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImportDirectory.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IOffsetHeap`1">
            <summary>
            Interface to get and set raw heap data. Implemented by the offset heaps: #Strings,
            #GUID, #Blob, and #US.
            </summary>
            <typeparam name="TValue">Type of cooked data</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IOffsetHeap`1.GetRawDataSize(`0)">
            <summary>
            Gets the size of the data as raw data when written to the heap
            </summary>
            <param name="data">The data</param>
            <returns>Size of the data as raw data when written to the heap</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IOffsetHeap`1.SetRawData(System.UInt32,System.Byte[])">
            <summary>
            Overrides what value should be written to the heap.
            </summary>
            <param name="offset">Offset of value. Must match an offset returned by
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IOffsetHeap`1.GetAllRawData"/></param>
            <param name="rawData">The new raw data. The size must match the raw size exactly.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IOffsetHeap`1.GetAllRawData">
            <summary>
            Gets all inserted raw data and their offsets. The returned <see cref="T:System.Byte"/> array
            is owned by the caller.
            </summary>
            <returns>An enumerable of all raw data and their offsets</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IWriterError">
            <summary>
            Gets notified of errors. The default handler should normally throw since the written data
            will probably be invalid. Any error can be ignored.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IWriterError.Error(System.String)">
            <summary>
            Called when an error is detected (eg. a null pointer or other invalid value). The error
            can be ignored but the written data won't be valid.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IWriterError2">
            <summary>
            Gets notified of errors. The default handler should normally throw since the written data
            will probably be invalid. Any error can be ignored.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IWriterError2.Error(System.String,System.Object[])">
            <summary>
            Called when an error is detected (eg. a null pointer or other invalid value). The error
            can be ignored but the written data won't be valid.
            </summary>
            <param name="message">Error message</param>
            <param name="args">Optional message arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ManagedExportsWriter.WriteSdataBlob(System.UInt32)">
            <summary>
            Writes the .sdata blob. We could write the data in any order, but we write the data in the same order as ILASM
            </summary>
            <param name="timestamp">PE timestamp</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MarshalBlobWriter">
            <summary>
            Writes field marshal blobs
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MarshalBlobWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.MarshalType,Datadog.Trace.Vendors.dnlib.DotNet.Writer.IWriterError)">
            <summary>
            Creates a field marshal blob from <paramref name="marshalType"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="marshalType">Marshal type</param>
            <param name="helper">Helps this class</param>
            <returns>A field marshal blob or <c>null</c> if <paramref name="marshalType"/> is
            <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MarshalBlobWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.MarshalType,Datadog.Trace.Vendors.dnlib.DotNet.Writer.IWriterError,System.Boolean)">
            <summary>
            Creates a field marshal blob from <paramref name="marshalType"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="marshalType">Marshal type</param>
            <param name="helper">Helps this class</param>
            <param name="optimizeCustomAttributeSerializedTypeNames">Optimize serialized type strings in custom attributes.
            For more info, see <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.OptimizeCustomAttributeSerializedTypeNames"/></param>
            <returns>A field marshal blob or <c>null</c> if <paramref name="marshalType"/> is
            <c>null</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MarshalBlobWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MaxStackCalculator">
            <summary>
            Calculates max stack usage by using a simple pass over all instructions. This value
            can be placed in the fat method header's MaxStack field.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MaxStackCalculator.GetMaxStack(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler})">
            <summary>
            Gets max stack value
            </summary>
            <param name="instructions">All instructions</param>
            <param name="exceptionHandlers">All exception handlers</param>
            <returns>Max stack value</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MaxStackCalculator.GetMaxStack(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler},System.UInt32@)">
            <summary>
            Gets max stack value
            </summary>
            <param name="instructions">All instructions</param>
            <param name="exceptionHandlers">All exception handlers</param>
            <param name="maxStack">Updated with max stack value</param>
            <returns><c>true</c> if no errors were detected, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable">
            <summary>
            MD table interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.Table">
            <summary>
            Gets the table type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.IsEmpty">
            <summary>
            <c>true</c> if the table is empty
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.Rows">
            <summary>
            Gets the number of rows in this table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.IsSorted">
            <summary>
            Gets/sets a value indicating whether it's sorted
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.IsReadOnly">
            <summary>
            <c>true</c> if <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.SetReadOnly"/> has been called
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.TableInfo">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.TableInfo"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IMDTable.SetReadOnly">
            <summary>
            Called when the table can't be modified any more
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1">
            <summary>
            Creates rows in a table. Rows can optionally be shared to create a compact table.
            </summary>
            <typeparam name="TRow">The raw row type</typeparam>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.Table">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.Rows">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.IsSorted">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.TableInfo">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.Item(System.UInt32)">
            <summary>
            Gets the value with rid <paramref name="rid"/>
            </summary>
            <param name="rid">The row ID</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="table">The table type</param>
            <param name="equalityComparer">Equality comparer</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.SetReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.Add(`0)">
            <summary>
            Adds a row. If the row already exists, returns a rid to the existing one, else
            it's created and a new rid is returned.
            </summary>
            <param name="row">The row. It's now owned by us and must NOT be modified by the caller.</param>
            <returns>The RID (row ID) of the row</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.Create(`0)">
            <summary>
            Creates a new row even if this row already exists.
            </summary>
            <param name="row">The row. It's now owned by us and must NOT be modified by the caller.</param>
            <returns>The RID (row ID) of the row</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.ReAddRows">
            <summary>
            Re-adds all added rows. Should be called if rows have been modified after being
            inserted.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1.Reset">
            <summary>
            Reset the table.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter">
            <summary>
            Writes <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable`1"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawModuleRow})">
            <summary>
            Writes a <c>Module</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeRefRow})">
            <summary>
            Writes a <c>TypeRef</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeDefRow})">
            <summary>
            Writes a <c>TypeDef</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldPtrRow})">
            <summary>
            Writes a <c>FieldPtr</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldRow})">
            <summary>
            Writes a <c>Field</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodPtrRow})">
            <summary>
            Writes a <c>MethodPtr</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodRow})">
            <summary>
            Writes a <c>Method</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawParamPtrRow})">
            <summary>
            Writes a <c>ParamPtr</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawParamRow})">
            <summary>
            Writes a <c>Param</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawInterfaceImplRow})">
            <summary>
            Writes a <c>InterfaceImpl</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMemberRefRow})">
            <summary>
            Writes a <c>MemberRef</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawConstantRow})">
            <summary>
            Writes a <c>Constant</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawCustomAttributeRow})">
            <summary>
            Writes a <c>CustomAttribute</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldMarshalRow})">
            <summary>
            Writes a <c>FieldMarshal</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawDeclSecurityRow})">
            <summary>
            Writes a <c>DeclSecurity</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawClassLayoutRow})">
            <summary>
            Writes a <c>ClassLayout</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldLayoutRow})">
            <summary>
            Writes a <c>FieldLayout</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawStandAloneSigRow})">
            <summary>
            Writes a <c>StandAloneSig</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventMapRow})">
            <summary>
            Writes a <c>EventMap</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventPtrRow})">
            <summary>
            Writes a <c>EventPtr</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawEventRow})">
            <summary>
            Writes a <c>Event</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyMapRow})">
            <summary>
            Writes a <c>PropertyMap</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyPtrRow})">
            <summary>
            Writes a <c>PropertyPtr</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawPropertyRow})">
            <summary>
            Writes a <c>Property</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodSemanticsRow})">
            <summary>
            Writes a <c>MethodSemantics</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodImplRow})">
            <summary>
            Writes a <c>MethodImpl</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawModuleRefRow})">
            <summary>
            Writes a <c>ModuleRef</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawTypeSpecRow})">
            <summary>
            Writes a <c>TypeSpec</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawImplMapRow})">
            <summary>
            Writes a <c>ImplMap</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFieldRVARow})">
            <summary>
            Writes a <c>FieldRVA</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawENCLogRow})">
            <summary>
            Writes a <c>ENCLog</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawENCMapRow})">
            <summary>
            Writes a <c>ENCMap</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRow})">
            <summary>
            Writes a <c>Assembly</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyProcessorRow})">
            <summary>
            Writes a <c>AssemblyProcessor</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyOSRow})">
            <summary>
            Writes a <c>AssemblyOS</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefRow})">
            <summary>
            Writes a <c>AssemblyRef</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefProcessorRow})">
            <summary>
            Writes a <c>AssemblyRefProcessor</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawAssemblyRefOSRow})">
            <summary>
            Writes a <c>AssemblyRefOS</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawFileRow})">
            <summary>
            Writes a <c>File</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawExportedTypeRow})">
            <summary>
            Writes a <c>ExportedType</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawManifestResourceRow})">
            <summary>
            Writes a <c>ManifestResource</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawNestedClassRow})">
            <summary>
            Writes a <c>NestedClass</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawGenericParamRow})">
            <summary>
            Writes a <c>GenericParam</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodSpecRow})">
            <summary>
            Writes a <c>MethodSpec</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawGenericParamConstraintRow})">
            <summary>
            Writes a <c>GenericParamConstraint</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawDocumentRow})">
            <summary>
            Writes a <c>Document</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawMethodDebugInformationRow})">
            <summary>
            Writes a <c>MethodDebugInformation</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalScopeRow})">
            <summary>
            Writes a <c>LocalScope</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalVariableRow})">
            <summary>
            Writes a <c>LocalVariable</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawLocalConstantRow})">
            <summary>
            Writes a <c>LocalConstant</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawImportScopeRow})">
            <summary>
            Writes a <c>ImportScope</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawStateMachineMethodRow})">
            <summary>
            Writes a <c>StateMachineMethod</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTableWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MDTable{Datadog.Trace.Vendors.dnlib.DotNet.MD.RawCustomDebugInformationRow})">
            <summary>
            Writes a <c>CustomDebugInformation</c> table
            </summary>
            <param name="writer">Writer</param>
            <param name="metadata">Metadata</param>
            <param name="table">Table</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata"/> flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveTypeRefRids">
            <summary>
            Preserves all rids in the <c>TypeRef</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveTypeDefRids">
            <summary>
            Preserves all rids in the <c>TypeDef</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveFieldRids">
            <summary>
            Preserves all rids in the <c>Field</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveMethodRids">
            <summary>
            Preserves all rids in the <c>Method</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveParamRids">
            <summary>
            Preserves all rids in the <c>Param</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveMemberRefRids">
            <summary>
            Preserves all rids in the <c>MemberRef</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveStandAloneSigRids">
            <summary>
            Preserves all rids in the <c>StandAloneSig</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveEventRids">
            <summary>
            Preserves all rids in the <c>Event</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreservePropertyRids">
            <summary>
            Preserves all rids in the <c>Property</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveTypeSpecRids">
            <summary>
            Preserves all rids in the <c>TypeSpec</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveMethodSpecRids">
            <summary>
            Preserves all rids in the <c>MethodSpec</c> table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveAllMethodRids">
            <summary>
            Preserves all method rids, i.e., <c>Method</c>, <c>MemberRef</c> and
            <c>MethodSpec</c> rids.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveRids">
            <summary>
            Preserves all rids in the following tables: <c>TypeRef</c>, <c>TypeDef</c>,
            <c>Field</c>, <c>Method</c>, <c>Param</c>, <c>MemberRef</c>, <c>StandAloneSig</c>,
            <c>Event</c>, <c>Property</c>, <c>TypeSpec</c>, <c>MethodSpec</c>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveStringsOffsets">
            <summary>
            Preserves all offsets in the #Strings heap (the original #Strings heap will be saved
            in the new file). Type names, field names, and other non-user strings are stored
            in the #Strings heap.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveUSOffsets">
            <summary>
            Preserves all offsets in the #US heap (the original #US heap will be saved
            in the new file). User strings (referenced by the ldstr instruction) are stored in
            the #US heap.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveBlobOffsets">
            <summary>
            Preserves all offsets in the #Blob heap (the original #Blob heap will be saved
            in the new file). Custom attributes, signatures and other blobs are stored in the
            #Blob heap.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveExtraSignatureData">
            <summary>
            Preserves the extra data that is present after the original signature in the #Blob
            heap. This extra data shouldn't be present but might be present if an obfuscator
            has added this extra data and is eg. using it to decrypt stuff.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveAll">
            <summary>
            Preserves as much as possible
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.KeepOldMaxStack">
            <summary>
            The original method body's max stack field should be used and a new one should not
            be calculated.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.AlwaysCreateGuidHeap">
            <summary>
            Always create the #GUID heap even if it's empty
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.AlwaysCreateStringsHeap">
            <summary>
            Always create the #Strings heap even if it's empty
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.AlwaysCreateUSHeap">
            <summary>
            Always create the #US heap even if it's empty
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.AlwaysCreateBlobHeap">
            <summary>
            Always create the #Blob heap even if it's empty
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.RoslynSortInterfaceImpl">
            <summary>
            DEPRECATED:
            Sort the InterfaceImpl table the same way Roslyn sorts it. Roslyn doesn't sort it
            according to the ECMA spec, see https://github.com/dotnet/roslyn/issues/3905
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.NoMethodBodies">
            <summary>
            Don't write method bodies
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.NoDotNetResources">
            <summary>
            Don't write .NET resources
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.NoFieldData">
            <summary>
            Don't write field data
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.OptimizeCustomAttributeSerializedTypeNames">
            <summary>
            Serialized type names stored in custom attributes are optimized if the types
            exist in the core library (eg. mscorlib/System.Private.CoreLib).
            Instead of storing type-name + assembly-name, only type-name is stored. This results in
            slightly smaller assemblies.
            <br/>
            <br/>
            If it's a type in the current module, the type name is optimized and no assembly name is stored in the custom attribute.
            <br/>
            <br/>
            This is disabled by default. It's safe to enable if the reference core assembly
            is the same as the runtime core assembly (eg. it's mscorlib.dll and .NET Framework,
            but not .NET Core / .NET Standard).
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeapsAddedEventArgs">
            <summary>
            Metadata heaps event args
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeapsAddedEventArgs.Metadata">
            <summary>
            Gets the metadata writer
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeapsAddedEventArgs.Heaps">
            <summary>
            Gets all heaps
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeapsAddedEventArgs.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,System.Collections.Generic.List{Datadog.Trace.Vendors.dnlib.DotNet.Writer.IHeap})">
            <summary>
            Constructor
            </summary>
            <param name="metadata">Metadata writer</param>
            <param name="heaps">All heaps</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata"/> options
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.MetadataHeaderOptions">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader"/> options. This is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.DebugMetadataHeaderOptions">
            <summary>
            Gets/sets the debug (portable PDB) <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader"/> options. This is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.TablesHeapOptions">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap"/> options. This is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.DebugTablesHeapOptions">
            <summary>
            Gets/sets the debug (portable PDB) <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap"/> options. This is never <c>null</c>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.Flags">
            <summary>
            Various options
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.CustomHeaps">
            <summary>
            Extra heaps to add to the metadata. Also see <see cref="E:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.MetadataHeapsAdded"/> and <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.PreserveHeapOrder(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Boolean)"/>
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.MetadataHeapsAdded">
            <summary>
            Raised after all heaps have been added. The caller can sort the list if needed
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.PreserveHeapOrder(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,System.Boolean)">
            <summary>
            Preserves the original order of heaps, and optionally adds all custom heaps to <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.CustomHeaps"/>.
            </summary>
            <param name="module">Original module with the heaps</param>
            <param name="addCustomHeaps">If true, all custom streams are added to <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.CustomHeaps"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Flags</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions)">
            <summary>
            Constructor
            </summary>
            <param name="mdhOptions">Meta data header options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags)">
            <summary>
            Constructor
            </summary>
            <param name="mdhOptions">Meta data header options</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugMetadataKind">
            <summary>
            Portable PDB metadata kind
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugMetadataKind.None">
            <summary>
            No debugging metadata
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugMetadataKind.Standalone">
            <summary>
            Standalone / embedded portable PDB metadata
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataWriterEventArgs">
            <summary>
            Metadata writer event args
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataWriterEventArgs.Metadata">
            <summary>
            Gets the metadata writer
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataWriterEventArgs.Event">
            <summary>
            Gets the event
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataWriterEventArgs.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent)">
            <summary>
            Constructor
            </summary>
            <param name="metadata">Writer</param>
            <param name="event">Event</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataProgressEventArgs">
            <summary>
            Metadata writer progress event args
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataProgressEventArgs.Metadata">
            <summary>
            Gets the metadata writer
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataProgressEventArgs.Progress">
            <summary>
            Gets the progress, 0.0 - 1.0
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataProgressEventArgs.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="metadata">Writer</param>
            <param name="progress">Progress, 0.0 - 1.0</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata">
            <summary>
            .NET meta data
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.MetadataEvent">
            <summary>
            Raised at various times when writing the metadata
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.ProgressUpdated">
            <summary>
            Raised when the progress is updated
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Logger">
            <summary>
            Gets/sets the logger
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Constants">
            <summary>
            Gets the constants
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.MethodBodyChunks">
            <summary>
            Gets the method body chunks
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.NetResources">
            <summary>
            Gets the .NET resources
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.MetadataHeader">
            <summary>
            Gets the MD header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.TablesHeap">
            <summary>
            Gets the tables heap. Access to this heap is not recommended, but is useful if you
            want to add random table entries.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.StringsHeap">
            <summary>
            Gets the #Strings heap. Access to this heap is not recommended, but is useful if you
            want to add random strings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.USHeap">
            <summary>
            Gets the #US heap. Access to this heap is not recommended, but is useful if
            you want to add random user strings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GuidHeap">
            <summary>
            Gets the #GUID heap. Access to this heap is not recommended, but is useful if you
            want to add random GUIDs.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.BlobHeap">
            <summary>
            Gets the #Blob heap. Access to this heap is not recommended, but is useful if you
            want to add random blobs.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PdbHeap">
            <summary>
            Gets the #Pdb heap. It's only used if it's portable PDB metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.ExportedMethods">
            <summary>
            Gets all exported methods
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AssemblyPublicKey">
            <summary>
            The public key that should be used instead of the one in <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Create(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.Writer.UniqueChunkList{Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk},Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks,Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources,Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataOptions,Datadog.Trace.Vendors.dnlib.DotNet.Writer.DebugMetadataKind)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata"/> instance
            </summary>
            <param name="module">Module</param>
            <param name="constants">Constants list</param>
            <param name="methodBodies">Method bodies list</param>
            <param name="netResources">.NET resources list</param>
            <param name="options">Options</param>
            <param name="debugKind">Debug metadata kind</param>
            <returns>A new <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata"/> instance</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveTypeRefRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveTypeRefRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveTypeDefRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveTypeDefRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveFieldRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveFieldRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveMethodRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveMethodRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveParamRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveParamRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveMemberRefRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveMemberRefRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveStandAloneSigRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveStandAloneSigRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveEventRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveEventRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreservePropertyRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreservePropertyRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveTypeSpecRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveTypeSpecRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveMethodSpecRids">
            <summary>
            Gets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveMethodSpecRids"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveStringsOffsets">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveStringsOffsets"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveUSOffsets">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveUSOffsets"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveBlobOffsets">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveBlobOffsets"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveExtraSignatureData">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.PreserveExtraSignatureData"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.KeepOldMaxStack">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.KeepOldMaxStack"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AlwaysCreateGuidHeap">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.AlwaysCreateGuidHeap"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AlwaysCreateStringsHeap">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.AlwaysCreateStringsHeap"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AlwaysCreateUSHeap">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.AlwaysCreateUSHeap"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AlwaysCreateBlobHeap">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.AlwaysCreateBlobHeap"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.RoslynSortInterfaceImpl">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.RoslynSortInterfaceImpl"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.NoMethodBodies">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.NoMethodBodies"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.NoDotNetResources">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.NoDotNetResources"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.NoFieldData">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.NoFieldData"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.OptimizeCustomAttributeSerializedTypeNames">
            <summary>
            Gets/sets the <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataFlags.OptimizeCustomAttributeSerializedTypeNames"/> bit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.KeepFieldRVA">
            <summary>
            If <c>true</c>, use the original Field RVAs. If it has no RVA, assume it's a new
            field value and create a new Field RVA.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.NumberOfMethods">
            <summary>
            Gets the number of methods that will be written.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="module">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="tr">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="td">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="fd">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="md">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.ParamDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="pd">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl)">
            <summary>
            Gets the new rid
            </summary>
            <param name="ii">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="mr">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetConstantRid(Datadog.Trace.Vendors.dnlib.DotNet.IHasConstant)">
            <summary>
            Gets the new rid
            </summary>
            <param name="hc">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetCustomAttributeRid(Datadog.Trace.Vendors.dnlib.DotNet.CustomAttribute)">
            <summary>
            Gets the new rid
            </summary>
            <param name="ca">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetFieldMarshalRid(Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal)">
            <summary>
            Gets the new rid
            </summary>
            <param name="hfm">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity)">
            <summary>
            Gets the new rid
            </summary>
            <param name="ds">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetClassLayoutRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="td">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetFieldLayoutRid(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="fd">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig)">
            <summary>
            Gets the new rid
            </summary>
            <param name="sas">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetEventMapRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="td">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="ed">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetPropertyMapRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="td">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="pd">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetMethodSemanticsRid(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="md">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="mr">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Gets the new rid
            </summary>
            <param name="ts">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetImplMapRid(Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded)">
            <summary>
            Gets the new rid
            </summary>
            <param name="mf">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetFieldRVARid(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="fd">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="asm">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="asmRef">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.FileDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="fd">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Gets the new rid
            </summary>
            <param name="et">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetManifestResourceRid(Datadog.Trace.Vendors.dnlib.DotNet.Resource)">
            <summary>
            Gets the new rid
            </summary>
            <param name="resource">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetNestedClassRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Gets the new rid
            </summary>
            <param name="td">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.GenericParam)">
            <summary>
            Gets the new rid
            </summary>
            <param name="gp">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <summary>
            Gets the new rid
            </summary>
            <param name="ms">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint)">
            <summary>
            Gets the new rid
            </summary>
            <param name="gpc">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbDocument)">
            <summary>
            Gets the new rid
            </summary>
            <param name="doc">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbScope)">
            <summary>
            Gets the new rid
            </summary>
            <param name="scope">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbLocal)">
            <summary>
            Gets the new rid
            </summary>
            <param name="local">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbConstant)">
            <summary>
            Gets the new rid
            </summary>
            <param name="constant">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbImportScope)">
            <summary>
            Gets the new rid
            </summary>
            <param name="importScope">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetStateMachineMethodRid(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbAsyncMethodCustomDebugInfo)">
            <summary>
            Gets the new rid
            </summary>
            <param name="asyncMethod">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetStateMachineMethodRid(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbIteratorMethodCustomDebugInfo)">
            <summary>
            Gets the new rid
            </summary>
            <param name="iteratorMethod">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetCustomDebugInfoRid(Datadog.Trace.Vendors.dnlib.DotNet.Pdb.PdbCustomDebugInfo)">
            <summary>
            Gets the new rid
            </summary>
            <param name="cdi">Value</param>
            <returns>Its new rid or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetMethodBody(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody"/>
            </summary>
            <param name="md">Method</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody"/> or <c>null</c> if <paramref name="md"/> is
            <c>null</c> or not a method defined in this module.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetLocalVarSigToken(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Gets a method's local variable signature token
            </summary>
            <param name="md">Method</param>
            <returns>Locals sig token or <c>0</c></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetChunk(Datadog.Trace.Vendors.dnlib.DotNet.EmbeddedResource)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk"/> where the resource data will be stored
            </summary>
            <param name="er">Embedded resource</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataReaderChunk"/> instance or <c>null</c> if <paramref name="er"/>
            is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetInitialValueChunk(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk"/> where the initial value is stored
            </summary>
            <param name="fd">Field</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ByteArrayChunk"/> instance or <c>null</c> if <paramref name="fd"/>
            is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Error(System.String,System.Object[])">
            <summary>
            Called when an error is detected
            </summary>
            <param name="message">Error message</param>
            <param name="args">Optional message arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Warning(System.String,System.Object[])">
            <summary>
            Called to warn of something
            </summary>
            <param name="message">Warning message</param>
            <param name="args">Optional message arguments</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.OnMetadataEvent(Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent)">
            <summary>
            Raises <see cref="E:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.MetadataEvent"/>
            </summary>
            <param name="evt">Event</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.RaiseProgress(Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent,System.Double)">
            <summary>
            Raises the progress event
            </summary>
            <param name="evt">Base event</param>
            <param name="subProgress">Sub progress</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.CreateTables">
            <summary>
            Creates the .NET metadata tables
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.UpdateMethodRvas">
            <summary>
            Updates each <c>Method</c> row's <c>RVA</c> column if it has any code
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.UpdateFieldRvas">
            <summary>
            Updates the <c>FieldRVA</c> rows
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.InitializeTypeDefsAndMemberDefs">
            <summary>
            Initializes all <c>TypeDef</c>, <c>Field</c>, <c>Method</c>, <c>Event</c>,
            <c>Property</c> and <c>Param</c> rows. Other tables that are related to these six
            tables are also updated. No custom attributes are written yet, though. Method bodies
            aren't written either.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.WriteTypeDefAndMemberDefCustomAttributesAndCustomDebugInfos">
            <summary>
            Writes <c>TypeDef</c>, <c>Field</c>, <c>Method</c>, <c>Event</c>,
            <c>Property</c> and <c>Param</c> custom attributes and custom debug infos.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.InitializeVTableFixups">
            <summary>
            Adds the tokens of all methods in all vtables, if any
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.InitializeEntryPoint">
            <summary>
            Adds the entry point. It's only needed if it's a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FileDef"/> since if it's
            a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>, it will have already been added.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.SortTables">
            <summary>
            Sorts all unsorted tables except <c>GenericParamConstraint</c> and <c>CustomAttribute</c>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.InitializeGenericParamConstraintTable">
            <summary>
            Initializes the <c>GenericParamConstraint</c> table
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.InitializeCustomAttributeAndCustomDebugInfoTables">
            <summary>
            Inserts all custom attribute / custom debug info rows in the tables and sort them
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.WriteMethodBodies">
            <summary>
            Writes all method bodies
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.IsEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Checks whether a list is empty or whether it contains only <c>null</c>s
            </summary>
            <typeparam name="T">Any type</typeparam>
            <param name="list">The list</param>
            <returns><c>true</c> if the list is empty or if it contains only <c>null</c>s, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetToken(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetToken(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddStandAloneSig(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,System.UInt32)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig"/>
            </summary>
            <param name="methodSig">Method signature</param>
            <param name="origToken">Original <c>StandAloneSig</c> token or 0 if none</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddStandAloneSig(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,System.UInt32)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig"/>
            </summary>
            <param name="fieldSig">FIeld signature</param>
            <param name="origToken">Original <c>StandAloneSig</c> token or 0 if none</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddTypeDefOrRef(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>
            </summary>
            <param name="tdr">Value</param>
            <returns>Its encoded token</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddResolutionScope(Datadog.Trace.Vendors.dnlib.DotNet.IResolutionScope)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IResolutionScope"/>
            </summary>
            <param name="rs">Value</param>
            <returns>Its encoded token</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddMethodDefOrRef(Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMethodDefOrRef"/>
            </summary>
            <param name="mdr">Value</param>
            <returns>Its encoded token</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddMemberRefParent(Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IMemberRefParent"/>
            </summary>
            <param name="parent">Value</param>
            <returns>Its encoded token</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddImplementation(Datadog.Trace.Vendors.dnlib.DotNet.IImplementation)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.IImplementation"/>
            </summary>
            <param name="impl">Value</param>
            <returns>Its encoded token</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddCustomAttributeType(Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ICustomAttributeType"/>
            </summary>
            <param name="cat">Value</param>
            <returns>Its encoded token</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddNestedType(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef,Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Adds a <c>NestedType</c> row
            </summary>
            <param name="nestedType">Nested type</param>
            <param name="declaringType">Declaring type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddModule(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Adds a <c>Module</c> row
            </summary>
            <param name="module">Module</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddModuleRef(Datadog.Trace.Vendors.dnlib.DotNet.ModuleRef)">
            <summary>
            Adds a <c>ModuleRef</c> row
            </summary>
            <param name="modRef">Module ref</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddAssemblyRef(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyRef)">
            <summary>
            Adds an <c>AssemblyRef</c> row
            </summary>
            <param name="asmRef">Assembly ref</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddAssembly(Datadog.Trace.Vendors.dnlib.DotNet.AssemblyDef,System.Byte[])">
            <summary>
            Adds an <c>Assembly</c> row
            </summary>
            <param name="asm">Assembly</param>
            <param name="publicKey">The public key that should be used</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddGenericParams(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.GenericParam})">
            <summary>
            Adds generic parameters
            </summary>
            <param name="token">New token of owner</param>
            <param name="gps">All generic params</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddGenericParam(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.GenericParam)">
            <summary>
            Adds a generic param
            </summary>
            <param name="owner">New token of owner</param>
            <param name="gp">Generic paramater</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddGenericParamConstraints(System.UInt32,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint})">
            <summary>
            Adds generic parameter constraints
            </summary>
            <param name="gpRid">New rid of owner generic param</param>
            <param name="constraints">Its constraints</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddGenericParamConstraint(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamConstraint)">
            <summary>
            Adds a generic parameter constraint
            </summary>
            <param name="gpRid">New rid of owner generic param</param>
            <param name="gpc">Generic parameter constraint</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddInterfaceImpls(System.UInt32,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.InterfaceImpl})">
            <summary>
            Adds a <c>InterfaceImpl</c> row
            </summary>
            <param name="typeDefRid">New rid of owner</param>
            <param name="ifaces">All interfaces</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddFieldLayout(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Adds a <c>FieldLayout</c> row
            </summary>
            <param name="field">Owner field</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddFieldMarshal(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.IHasFieldMarshal)">
            <summary>
            Adds a <c>FieldMarshal</c> row
            </summary>
            <param name="parent">New owner token</param>
            <param name="hfm">Owner</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddFieldRVA(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <summary>
            Adds a <c>FieldRVA</c> row
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddImplMap(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.IMemberForwarded)">
            <summary>
            Adds a <c>ImplMap</c> row
            </summary>
            <param name="parent">New owner token</param>
            <param name="mf">Owner</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddConstant(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,Datadog.Trace.Vendors.dnlib.DotNet.IHasConstant)">
            <summary>
            Adds a <c>Constant</c> row
            </summary>
            <param name="parent">New owner token</param>
            <param name="hc">Owner</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddDeclSecurities(Datadog.Trace.Vendors.dnlib.DotNet.MDToken,System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.DeclSecurity})">
            <summary>
            Adds a <c>DeclSecurity</c> row
            </summary>
            <param name="parent">New owner token</param>
            <param name="declSecurities">All <c>DeclSecurity</c> rows</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddMethodSemantics(Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <summary>
            Adds <c>MethodSemantics</c> rows
            </summary>
            <param name="evt">Event</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddMethodSemantics(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <summary>
            Adds <c>MethodSemantics</c> rows
            </summary>
            <param name="prop">Property</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddClassLayout(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <summary>
            Adds a <c>ClassLayout</c> row
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddFile(Datadog.Trace.Vendors.dnlib.DotNet.FileDef)">
            <summary>
            Adds a <c>File</c> row
            </summary>
            <param name="file">File</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddExportedType(Datadog.Trace.Vendors.dnlib.DotNet.ExportedType)">
            <summary>
            Adds a <c>ExportedType</c> row
            </summary>
            <param name="et">Exported type</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetSignature(Datadog.Trace.Vendors.dnlib.DotNet.TypeSig,System.Byte[])">
            <summary>
            Gets a #Blob offset of a type signature
            </summary>
            <param name="ts">Type sig</param>
            <param name="extraData">Extra data to append the signature if
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.PreserveExtraSignatureData"/> is <c>true</c>.</param>
            <returns>#Blob offset</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetSignature(Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Gets a #Blob offset of a calling convention signature
            </summary>
            <param name="sig">Signature</param>
            <returns>#Blob offset</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddCustomAttributes(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomAttribute)">
            <summary>
            Adds a <c>CustomAttribute</c> row
            </summary>
            <param name="table">Owner table</param>
            <param name="rid">New owner rid</param>
            <param name="hca">Onwer</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddCustomDebugInformationList(Datadog.Trace.Vendors.dnlib.DotNet.MD.Table,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.IHasCustomDebugInformation)">
            <summary>
            Adds a <c>CustomDebugInformation</c> row
            </summary>
            <param name="table">Owner table</param>
            <param name="rid">New owner rid</param>
            <param name="hcdi">Onwer</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.WritePortablePdb(System.IO.Stream,System.UInt32,System.Int64@)">
            <summary>
            Writes the portable PDB to <paramref name="output"/>.
            </summary>
            <param name="output">Output stream</param>
            <param name="entryPointToken">Entry point token</param>
            <param name="pdbIdOffset">Updated with the offset of the 20-byte PDB ID. The caller is responsible for initializing it with the PDB ID</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Datadog#Trace#Vendors#dnlib#DotNet#Writer#ISignatureWriterHelper#ToEncodedToken(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Datadog#Trace#Vendors#dnlib#DotNet#Writer#IWriterError#Error(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Datadog#Trace#Vendors#dnlib#DotNet#Writer#IWriterError2#Error(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Datadog#Trace#Vendors#dnlib#DotNet#IFullNameFactoryHelper#MustUseAssemblyName(Datadog.Trace.Vendors.dnlib.DotNet.IType)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Initialize">
            <summary>
            Called before any other methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetAllTypeDefs">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>s that should be saved in the meta data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AllocateTypeDefRids">
            <summary>
            Initializes <c>TypeDef</c> rids and creates raw rows, but does not initialize
            any columns.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AllocateMemberDefRids">
            <summary>
            Allocates <c>Field</c>, <c>Method</c>, <c>Property</c>, <c>Event</c>, <c>Param</c>:
            rid and raw row, but doesn't initialize the raw row.
            Initializes <c>TypeDef</c> columns: <c>FieldList</c>, <c>MethodList</c>.
            Initializes <c>Method</c> column: <c>ParamList</c>.
            Initializes <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.eventMapInfos"/> and <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.propertyMapInfos"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddTypeRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeRef"/>. Its custom attributes are also added.
            </summary>
            <param name="tr">Type reference</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddTypeSpec(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec"/>. Its custom attributes are also added.
            </summary>
            <param name="ts">Type spec</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddMemberRef(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MemberRef"/>. Its custom attributes are also added.
            </summary>
            <param name="mr">Member ref</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddStandAloneSig(Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig"/>. Its custom attributes are also added.
            </summary>
            <param name="sas">Stand alone sig</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.AddMethodSpec(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec"/>. Its custom attributes are also added.
            </summary>
            <param name="ms">Method spec</param>
            <returns>Its new rid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.BeforeSortingCustomAttributes">
            <summary>
            Called before sorting the <c>CustomAttribute</c> table. This is the last time anything
            can be inserted into this table.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.EverythingInitialized">
            <summary>
            Called after everything has been initialized. The sub class can initialize more
            rows if necessary or do nothing. After this method has been called, nothing else
            can be added.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.OnBeforeSetOffset">
            <summary>
            Should be called before all chunks get an RVA
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata.Sort(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.dnlib.DotNet.ParamDef})">
            <summary>
            Sorts the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef"/>s
            </summary>
            <param name="pds">All <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef"/>s</param>
            <returns>A sorted <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ParamDef"/> list</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent">
            <summary>
            All <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata"/> events
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.BeginCreateTables">
            <summary>
            Creating the tables has just begun
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.AllocateTypeDefRids">
            <summary>
            Before allocating all TypeDef RIDs
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.AllocateMemberDefRids">
            <summary>
            Before allocating all MemberDef RIDs
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.MemberDefRidsAllocated">
            <summary>
            The <c>rid</c>s of types, fields, methods, events, properties and parameters are
            now known.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.MemberDefsInitialized">
            <summary>
            The tables and rows of all types, fields, methods, events, properties and parameters
            have been initialized. Method body RVAs are still not known, and no method has been
            written yet.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.BeforeSortTables">
            <summary>
            Before sorting most tables
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.MostTablesSorted">
            <summary>
            Most of the tables that should be sorted have been sorted. The <c>CustomAttribute</c>
            table is still unsorted since it hasn't been created yet.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.MemberDefCustomAttributesWritten">
            <summary>
            Custom attributes of all types, fields, methods, events, properties and parameters
            have now been written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.BeginAddResources">
            <summary>
            All resources are about to be added to the .NET resources table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.EndAddResources">
            <summary>
            All resources have been added to the .NET resources table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.BeginWriteMethodBodies">
            <summary>
            All method bodies are about to be written
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.EndWriteMethodBodies">
            <summary>
            All method bodies have been written. Their RVAs are still not known.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.OnAllTablesSorted">
            <summary>
            All tables are now sorted, including the <c>CustomAttribute</c> table.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.EndCreateTables">
            <summary>
            All tables have been created and all rows populated. The only columns that haven't
            been initialized yet are the ones that are RVAs.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader"/> options
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.DEFAULT_VERSION_STRING">
            <summary>
            Default version string
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.DEFAULT_SIGNATURE">
            <summary>
            Default header signature
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.Signature">
            <summary>
            MD header signature. Default value is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.DEFAULT_SIGNATURE"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.MajorVersion">
            <summary>
            Major version. Default is 1. MS' CLR supports v0.x (x >= 19) and v1.1, nothing else.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.MinorVersion">
            <summary>
            Minor version. Default is 1.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.Reserved1">
            <summary>
            Reserved and should be 0.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.VersionString">
            <summary>
            Version string. Default is <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.DEFAULT_VERSION_STRING"/>. It's stored as a
            zero-terminated UTF-8 string. Length should be &lt;= 255 bytes.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.StorageFlags">
            <summary>
            Storage flags should be 0
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.Reserved2">
            <summary>
            Reserved and should be 0
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions.CreatePortablePdbV1_0">
            <summary>
            Creates portable PDB v1.0 options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader">
            <summary>
            Meta data header. IMAGE_COR20_HEADER.Metadata points to this header.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.Heaps">
            <summary>
            Gets/sets the heaps
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeaderOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataHeader.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody">
            <summary>
            Method body chunk
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.Code">
            <summary>
            Gets the code
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.ExtraSections">
            <summary>
            Gets the extra sections (exception handlers) or <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.LocalVarSigTok">
            <summary>
            Gets the token of the locals
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.IsFat">
            <summary>
            <c>true</c> if it's a fat body
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.IsTiny">
            <summary>
            <c>true</c> if it's a tiny body
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.HasExtraSections">
            <summary>
            <c>true</c> if there's an extra section
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="code">Code</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="code">Code</param>
            <param name="extraSections">Extra sections or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.#ctor(System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="code">Code</param>
            <param name="extraSections">Extra sections or <c>null</c></param>
            <param name="localVarSigTok">Token of locals</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.GetApproximateSizeOfMethodBody">
            <summary>
            Gets the approximate size of the method body (code + exception handlers)
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks">
            <summary>
            Stores all method body chunks
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.SavedBytes">
            <summary>
            Gets the number of bytes saved by re-using method bodies
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="shareBodies"><c>true</c> if bodies can be shared</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.Add(Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody"/> and returns the one that has been cached
            </summary>
            <param name="methodBody">The method body</param>
            <returns>The cached method body</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.Remove(Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBody)">
            <summary>Removes the specified method body from this chunk</summary>
            <param name="methodBody">The method body</param>
            <returns><see langword="true" /> if the method body is removed</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyChunks.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ITokenProvider">
            <summary>
            Returns tokens of token types, strings and signatures
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ITokenProvider.GetToken(System.Object)">
            <summary>
            Gets the token of <paramref name="o"/>
            </summary>
            <param name="o">A token type or a string or a signature</param>
            <returns>The token</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ITokenProvider.GetToken(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.UInt32)">
            <summary>
            Gets a <c>StandAloneSig</c> token
            </summary>
            <param name="locals">All locals</param>
            <param name="origToken">The original token or <c>0</c> if none</param>
            <returns>A <c>StandAloneSig</c> token or <c>0</c> if <paramref name="locals"/> is
            empty.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter">
            <summary>
            Writes CIL method bodies
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.Code">
            <summary>
            Gets the code as a byte array. This is valid only after calling <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.Write"/>.
            The size of this array is not necessarily a multiple of 4, even if there are exception
            handlers present. See also <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.GetFullMethodBody"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.ExtraSections">
            <summary>
            Gets the extra sections (exception handlers) as a byte array or <c>null</c> if there
            are no exception handlers. This is valid only after calling <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.Write"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.LocalVarSigTok">
            <summary>
            Gets the token of the locals
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ITokenProvider,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <summary>
            Constructor
            </summary>
            <param name="helper">Helps this instance</param>
            <param name="method">The method</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ITokenProvider,Datadog.Trace.Vendors.dnlib.DotNet.MethodDef,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="helper">Helps this instance</param>
            <param name="method">The method</param>
            <param name="keepMaxStack">Keep the original max stack value that has been initialized
            in <paramref name="method"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ITokenProvider,Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody)">
            <summary>
            Constructor
            </summary>
            <param name="helper">Helps this instance</param>
            <param name="cilBody">The CIL method body</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ITokenProvider,Datadog.Trace.Vendors.dnlib.DotNet.Emit.CilBody,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="helper">Helps this instance</param>
            <param name="cilBody">The CIL method body</param>
            <param name="keepMaxStack">Keep the original max stack value that has been initialized
            in <paramref name="cilBody"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.Write">
            <summary>
            Writes the method body
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.GetFullMethodBody">
            <summary>
            Gets the code and (possible) exception handlers in one array. The exception handlers
            are 4-byte aligned.
            </summary>
            <returns>The code and any exception handlers</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.ErrorImpl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.WriteInlineField(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.WriteInlineMethod(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.WriteInlineSig(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.WriteInlineString(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.WriteInlineTok(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriter.WriteInlineType(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase">
            <summary>
            Base class of all CIL method body writers
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.instructions">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.exceptionHandlers">
            <summary/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.ErrorDetected">
            <summary>
            <c>true</c> if there was at least one error
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.#ctor(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction},System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.Emit.ExceptionHandler})">
            <summary>
            Constructor
            </summary>
            <param name="instructions">All instructions</param>
            <param name="exceptionHandlers">All exception handlers</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.Error(System.String)">
            <summary>
            Called when an error is detected (eg. a null pointer). The error can be
            ignored but the method won't be valid.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.ErrorImpl(System.String)">
            <summary>
            Called when an error is detected (eg. a null pointer). The error can be
            ignored but the method won't be valid.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.GetMaxStack">
            <summary>
            Gets max stack value
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.GetOffset(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Gets the offset of an instruction
            </summary>
            <param name="instr">The instruction</param>
            <returns>The offset or <c>0</c> if <paramref name="instr"/> is <c>null</c> or not
            present in the list of all instructions.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.InitializeInstructionOffsets">
            <summary>
            Initializes instruction offsets and returns the total code size
            </summary>
            <returns>Size of code</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.GetSizeOfInstruction(Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Gets the size of an instruction
            </summary>
            <param name="instr">The instruction</param>
            <returns>Size of the instruction in bytes</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInstructions(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@)">
            <summary>
            Writes all instructions to <paramref name="writer"/> at its current offset
            </summary>
            <param name="writer">The instruction writer</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.ToInstructionOffset(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@)">
            <summary>
            Gets the current offset in the instruction stream. This offset is relative to
            the first written instruction.
            </summary>
            <param name="writer">The instruction writer</param>
            <returns>Current offset, relative to the first written instruction</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInstruction(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an instruction
            </summary>
            <param name="writer">The instruction writer</param>
            <param name="instr">The instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteOpCode(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an instruction's opcode
            </summary>
            <param name="writer">The instruction writer</param>
            <param name="instr">The instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteOperand(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an instruction's operand
            </summary>
            <param name="writer">The instruction writer</param>
            <param name="instr">The instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineBrTarget(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineBrTarget"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineField(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineField"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineI(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineI"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineI8(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineI8"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineMethod(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineMethod"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineNone(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineNone"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlinePhi(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlinePhi"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineR(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineR"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineSig(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineSig"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineString(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineString"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineSwitch(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineSwitch"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineTok(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineTok"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineType(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineType"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteInlineVar(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes an <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.InlineVar"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteShortInlineBrTarget(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineBrTarget"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteShortInlineI(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineI"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteShortInlineR(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineR"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MethodBodyWriterBase.WriteShortInlineVar(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ArrayWriter@,Datadog.Trace.Vendors.dnlib.DotNet.Emit.Instruction)">
            <summary>
            Writes a <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Emit.OperandType.ShortInlineVar"/> operand
            </summary>
            <param name="writer">Instruction writer</param>
            <param name="instr">Instruction</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter"/> options
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter">
            <summary>
            Writes a .NET PE file. See also <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.TheOptions">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.Options">
            <summary>
            Gets/sets the writer options. This is never <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.Sections">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection"/>s. The reloc section must be the last section, so use <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.AddSection(Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection)"/> if you need to append a section
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.AddSection(Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection)">
            <summary>
            Adds <paramref name="section"/> to the sections list, but before the reloc section which must be last
            </summary>
            <param name="section">New section to add to the list</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.TextSection">
            <summary>
            Gets the <c>.text</c> section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.SdataSection">
            <summary>
            Gets the <c>.sdata</c> section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.RsrcSection">
            <summary>
            Gets the <c>.rsrc</c> section or null if none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.RelocSection">
            <summary>
            Gets the <c>.reloc</c> section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.PEHeaders">
            <summary>
            Gets the PE headers
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.ImportAddressTable">
            <summary>
            Gets the IAT or <c>null</c> if there's none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.ImageCor20Header">
            <summary>
            Gets the .NET header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.ImportDirectory">
            <summary>
            Gets the import directory or <c>null</c> if there's none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.StartupStub">
            <summary>
            Gets the startup stub or <c>null</c> if there's none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.RelocDirectory">
            <summary>
            Gets the reloc directory or <c>null</c> if there's none
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptions)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module</param>
            <param name="options">Options or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.WriteImpl">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter.GetWin32Resources">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEventArgs">
            <summary>
            Module writer event args
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEventArgs.Writer">
            <summary>
            Gets the writer (<see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter"/> or <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter"/>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEventArgs.Event">
            <summary>
            Gets the event
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEventArgs.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase,Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Writer</param>
            <param name="event">Event</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterProgressEventArgs">
            <summary>
            Module writer progress event args
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterProgressEventArgs.Writer">
            <summary>
            Gets the writer (<see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter"/> or <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter"/>)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterProgressEventArgs.Progress">
            <summary>
            Gets the progress, 0.0 - 1.0
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterProgressEventArgs.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Writer</param>
            <param name="progress">Progress, 0.0 - 1.0</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ContentId">
            <summary>
            Content ID
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ContentId.Guid">
            <summary>
            Gets the GUID
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ContentId.Timestamp">
            <summary>
            Gets the timestamp
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ContentId.#ctor(System.Guid,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid</param>
            <param name="timestamp">Timestamp</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.EventHandler2`1">
            <summary>
            Event handler
            </summary>
            <typeparam name="TEventArgs">Event args type</typeparam>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbWriterOptions">
            <summary>
            PDB writer options
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbWriterOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbWriterOptions.NoDiaSymReader">
             <summary>
             Don't use Microsoft.DiaSymReader.Native. This is a NuGet package with an updated Windows PDB reader/writer implementation,
             and if it's available at runtime, dnlib will try to use it. If this option is set, dnlib won't use it.
             You have to add a reference to the NuGet package if you want to use it, dnlib has no reference to the NuGet package.
            
             This is only used if it's a Windows PDB file.
             </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbWriterOptions.NoOldDiaSymReader">
             <summary>
             Don't use diasymreader.dll's PDB writer that is shipped with .NET Framework.
            
             This is only used if it's a Windows PDB file.
             </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbWriterOptions.Deterministic">
             <summary>
             Create a deterministic PDB file and add a <see cref="F:Datadog.Trace.Vendors.dnlib.PE.ImageDebugType.Reproducible"/> debug directory entry to the PE file.
            
             It's ignored if the PDB writer doesn't support it.
             </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbWriterOptions.PdbChecksum">
             <summary>
             Hash the PDB file and add a PDB checksum debug directory entry to the PE file.
            
             It's ignored if the PDB writer doesn't support it.
             </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase">
            <summary>
            Common module writer options base class
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.WriterEvent">
            <summary>
            Raised at various times when writing the file. The listener has a chance to modify
            the file, eg. add extra metadata, encrypt methods, etc.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.ProgressUpdated">
            <summary>
            Raised when the progress is updated
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.Logger">
            <summary>
            Gets/sets the logger. If this is <c>null</c>, any errors result in a
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterException"/> being thrown. To disable this behavior, either
            create your own logger or use <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.DummyLogger.NoThrowInstance"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.MetadataLogger">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata"/> writer logger. If this is <c>null</c>, use
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.Logger"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.PEHeadersOptions">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders"/> options. This is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.Cor20HeaderOptions">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ImageCor20Header"/> options. This is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.MetadataOptions">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata"/> options. This is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.NoWin32Resources">
            <summary>
            If <c>true</c>, Win32 resources aren't written to the output
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.Win32Resources">
            <summary>
            Gets/sets the Win32 resources. If this is <c>null</c>, use the module's
            Win32 resources if any.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.DelaySign">
            <summary>
            true to delay sign the assembly. Initialize <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNamePublicKey"/> to the
            public key to use, and don't initialize <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNameKey"/>. To generate the
            public key from your strong name key file, execute <c>sn -p mykey.snk mypublickey.snk</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNameKey">
            <summary>
            Gets/sets the strong name key. When you enhance strong name sign an assembly,
            this instance's HashAlgorithm must be initialized to its public key's HashAlgorithm.
            You should call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.InitializeStrongNameSigning(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey)"/>
            to initialize this property if you use normal strong name signing.
            You should call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.InitializeEnhancedStrongNameSigning(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)"/>
            or <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.InitializeEnhancedStrongNameSigning(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)"/>
            to initialize this property if you use enhanced strong name signing.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNamePublicKey">
            <summary>
            Gets/sets the new public key that should be used. If this is <c>null</c>, use
            the public key generated from <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNameKey"/>. If it is also <c>null</c>,
            use the module's Assembly's public key.
            You should call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.InitializeEnhancedStrongNameSigning(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)"/>
            or <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.InitializeEnhancedStrongNameSigning(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)"/>
            to initialize this property if you use enhanced strong name signing.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.ShareMethodBodies">
            <summary>
            <c>true</c> if method bodies can be shared (two or more method bodies can share the
            same RVA), <c>false</c> if method bodies can't be shared. Don't enable it if there
            must be a 1:1 relationship with method bodies and their RVAs.
            This is enabled by default and results in smaller files.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.AddCheckSum">
            <summary>
            <c>true</c> if the PE header CheckSum field should be updated, <c>false</c> if the
            CheckSum field isn't updated.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.Is64Bit">
            <summary>
            <c>true</c> if it's a 64-bit module, <c>false</c> if it's a 32-bit or AnyCPU module.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.ModuleKind">
            <summary>
            Gets/sets the module kind
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.IsExeFile">
            <summary>
            <c>true</c> if it should be written as an EXE file, <c>false</c> if it should be
            written as a DLL file.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.WritePdb">
            <summary>
            Set it to <c>true</c> to enable writing a PDB file. Default is <c>false</c> (a PDB file
            won't be written to disk).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.PdbOptions">
            <summary>
            PDB writer options. This property is ignored if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.WritePdb"/> is false.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.PdbFileName">
            <summary>
            PDB file name. If it's <c>null</c> a PDB file with the same name as the output assembly
            will be created but with a PDB extension. <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.WritePdb"/> must be <c>true</c> or
            this property is ignored.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.PdbFileNameInDebugDirectory">
            <summary>
            PDB file name stored in the debug directory, or null to use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.PdbFileName"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.PdbStream">
            <summary>
            PDB stream. If this is initialized, then you should also set <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.PdbFileName"/>
            to the name of the PDB file since the file name must be written to the PE debug directory.
            <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.WritePdb"/> must be <c>true</c> or this property is ignored.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.GetPdbContentId">
            <summary>
            Gets the PDB content id (portable PDBs). The <see cref="T:System.IO.Stream"/> argument is the PDB stream with the PDB ID zeroed out,
            and the 2nd <see cref="T:System.UInt32"/> argument is the default timestamp.
            This property is ignored if a deterministic PDB file is created or if the PDB checksum is calculated.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.PdbChecksumAlgorithm">
            <summary>
            PDB checksum algorithm
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.AddMvidSection">
            <summary>
            true if an <c>.mvid</c> section should be added to the assembly. Not used by native module writer.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.InitializeStrongNameSigning(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey)">
            <summary>
            Initializes <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNameKey"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNamePublicKey"/>
            for normal strong name signing.
            </summary>
            <param name="module">Module</param>
            <param name="signatureKey">Signature strong name key pair</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.InitializeEnhancedStrongNameSigning(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)">
            <summary>
            Initializes <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNameKey"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNamePublicKey"/>
            for enhanced strong name signing (without key migration). See
            http://msdn.microsoft.com/en-us/library/hh415055.aspx
            </summary>
            <param name="module">Module</param>
            <param name="signatureKey">Signature strong name key pair</param>
            <param name="signaturePubKey">Signature public key</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.InitializeEnhancedStrongNameSigning(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNameKey,Datadog.Trace.Vendors.dnlib.DotNet.StrongNamePublicKey)">
            <summary>
            Initializes <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNameKey"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterOptionsBase.StrongNamePublicKey"/>
            for enhanced strong name signing (with key migration). See
            http://msdn.microsoft.com/en-us/library/hh415055.aspx
            </summary>
            <param name="module">Module</param>
            <param name="signatureKey">Signature strong name key pair</param>
            <param name="signaturePubKey">Signature public key</param>
            <param name="identityKey">Identity strong name key pair</param>
            <param name="identityPubKey">Identity public key</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase">
            <summary>
            Module writer base class
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DEFAULT_CONSTANTS_ALIGNMENT">
            <summary>Default alignment of all constants</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DEFAULT_METHODBODIES_ALIGNMENT">
            <summary>Default alignment of all method bodies</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DEFAULT_NETRESOURCES_ALIGNMENT">
            <summary>Default alignment of all .NET resources</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DEFAULT_METADATA_ALIGNMENT">
            <summary>Default alignment of the .NET metadata</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DEFAULT_WIN32_RESOURCES_ALIGNMENT">
            <summary>Default Win32 resources alignment</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DEFAULT_STRONGNAMESIG_ALIGNMENT">
            <summary>Default strong name signature alignment</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DEFAULT_COR20HEADER_ALIGNMENT">
            <summary>Default COR20 header alignment</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.destStream">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DestinationStream"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.constants">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Constants"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.methodBodies">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.MethodBodies"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.netResources">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.NetResources"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.metadata">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Metadata"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.win32Resources">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Win32Resources"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.destStreamBaseOffset">
            <summary>Offset where the module is written. Usually 0.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.debugDirectory">
            <summary>Debug directory</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.strongNameSignature">
            <summary>
            Strong name signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.TheOptions">
            <summary>
            Returns the module writer options
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DestinationStream">
            <summary>
            Gets the destination stream
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Constants">
            <summary>
            Gets the constants
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.MethodBodies">
            <summary>
            Gets the method bodies
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.NetResources">
            <summary>
            Gets the .NET resources
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Metadata">
            <summary>
            Gets the .NET metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Win32Resources">
            <summary>
            Gets the Win32 resources or <c>null</c> if there's none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.StrongNameSignature">
            <summary>
            Gets the strong name signature or <c>null</c> if there's none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Sections">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection"/>s. The reloc section must be the last section, so use <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.AddSection(Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection)"/> if you need to append a section
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.AddSection(Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection)">
            <summary>
            Adds <paramref name="section"/> to the sections list, but before the reloc section which must be last
            </summary>
            <param name="section">New section to add to the list</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.TextSection">
            <summary>
            Gets the <c>.text</c> section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.RsrcSection">
            <summary>
            Gets the <c>.rsrc</c> section or <c>null</c> if there's none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.DebugDirectory">
            <summary>
            Gets the debug directory or <c>null</c> if there's none
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.IsNativeWriter">
            <summary>
            <c>true</c> if <c>this</c> is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter"/>, <c>false</c> if
            <c>this</c> is a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.pdbState">
            <summary>
            null if we're not writing a PDB
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Write(System.String)">
            <summary>
            Writes the module to a file
            </summary>
            <param name="fileName">File name. The file will be truncated if it exists.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Write(System.IO.Stream)">
            <summary>
            Writes the module to a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="dest">Destination stream</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Module">
            <summary>
            Returns the module that is written
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.WriteImpl">
            <summary>
            Writes the module to <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.destStream"/>. Event listeners and
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.destStream"/> have been initialized when this method is called.
            </summary>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.CreateStrongNameSignature">
            <summary>
            Creates the strong name signature if the module has one of the strong name flags
            set or wants to sign the assembly.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.CreateMetadataChunks(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDef)">
            <summary>
            Creates the .NET metadata chunks (constants, method bodies, .NET resources,
            the metadata, and Win32 resources)
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.GetWin32Resources">
            <summary>
            Gets the Win32 resources that should be written to the new image or <c>null</c> if none
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.CalculateRvasAndFileOffsets(System.Collections.Generic.List{Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk},Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA,System.UInt32,System.UInt32)">
            <summary>
            Calculates <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/> and <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/> of all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk"/>s
            </summary>
            <param name="chunks">All chunks</param>
            <param name="offset">Starting file offset</param>
            <param name="rva">Starting RVA</param>
            <param name="fileAlignment">File alignment</param>
            <param name="sectionAlignment">Section alignment</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.WriteChunks(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,System.Collections.Generic.List{Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk},Datadog.Trace.Vendors.dnlib.IO.FileOffset,System.UInt32)">
            <summary>
            Writes all chunks to <paramref name="writer"/>
            </summary>
            <param name="writer">The writer</param>
            <param name="chunks">All chunks</param>
            <param name="offset">File offset of first chunk</param>
            <param name="fileAlignment">File alignment</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.StrongNameSign(System.Int64)">
            <summary>
            Strong name sign the assembly
            </summary>
            <param name="snSigOffset">Strong name signature offset</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.CreateDebugDirectory">
            <summary>
            Creates the debug directory if a PDB file should be written
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.WritePdbFile">
            <summary>
            Write the PDB file. The caller should send the PDB events before and after calling this
            method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.GetTimeDateStamp">
            <summary>
            Gets the timestamp stored in the PE header
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.OnWriterEvent(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent)">
            <summary>
            Raises a writer event
            </summary>
            <param name="evt">Event</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Datadog#Trace#Vendors#dnlib#DotNet#ILogger#Log(System.Object,Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Datadog#Trace#Vendors#dnlib#DotNet#ILogger#IgnoresEvent(Datadog.Trace.Vendors.dnlib.DotNet.LoggerEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Error(System.String,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="format">Format</param>
            <param name="args">Format args</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.Warning(System.String,System.Object[])">
            <summary>
            Logs a warning message
            </summary>
            <param name="format">Format</param>
            <param name="args">Format args</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent">
            <summary>
            All <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter"/> / <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter"/> events
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.Begin">
            <summary>
            Writing has just begun
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.PESectionsCreated">
            <summary>
            All PE sections have been created
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.ChunksCreated">
            <summary>
            All chunks have been created
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.ChunksAddedToSections">
            <summary>
            All chunks have been added to their sections
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDBeginCreateTables">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.BeginCreateTables"/>.
            Creating the metadata tables has just begun
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDAllocateTypeDefRids">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.AllocateTypeDefRids"/>.
            Before allocating all TypeDef RIDs
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDAllocateMemberDefRids">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.AllocateMemberDefRids"/>.
            Before allocating all MemberDef RIDs
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDMemberDefRidsAllocated">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.MemberDefRidsAllocated"/>.
            The <c>rid</c>s of types, fields, methods, events, properties and parameters are
            now known.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDMemberDefsInitialized">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.MemberDefsInitialized"/>.
            The tables and rows of all types, fields, methods, events, properties and parameters
            have been initialized. Method body RVAs are still not known, and no method has been
            written yet.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDBeforeSortTables">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.BeforeSortTables"/>.
            Before sorting most tables
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDMostTablesSorted">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.MostTablesSorted"/>.
            Most of the tables that should be sorted have been sorted. The <c>CustomAttribute</c>
            table is still unsorted since it hasn't been created yet.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDMemberDefCustomAttributesWritten">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.MemberDefCustomAttributesWritten"/>.
            Custom attributes of all types, fields, methods, events, properties and parameters
            have now been written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDBeginAddResources">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.BeginAddResources"/>.
            All resources are about to be added to the .NET resources table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDEndAddResources">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.EndAddResources"/>.
            All resources have been added to the .NET resources table
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDBeginWriteMethodBodies">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.BeginWriteMethodBodies"/>.
            All method bodies are about to be written
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDEndWriteMethodBodies">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.EndWriteMethodBodies"/>.
            All method bodies have been written. Their RVAs are still not known.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDOnAllTablesSorted">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.OnAllTablesSorted"/>.
            All tables are now sorted, including the <c>CustomAttribute</c> table.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.MDEndCreateTables">
            <summary>
            Original event: <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.MetadataEvent.EndCreateTables"/>.
            All tables have been created and all rows populated. The only columns that haven't
            been initialized yet are the ones that are RVAs.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.BeginWritePdb">
            <summary>
            This event occurs before the PDB file is written. This event occurs even if no PDB file
            will be written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.EndWritePdb">
            <summary>
            The PDB file has been written. This event occurs even if no PDB file has been written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.BeginCalculateRvasAndFileOffsets">
            <summary>
            This event occurs just before all RVAs and file offsets of the chunks are calculated.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.EndCalculateRvasAndFileOffsets">
            <summary>
            File offsets and RVAs of all chunks are now known. This includes method body and
            field RVAs. Nothing has been written to the destination stream yet.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.BeginWriteChunks">
            <summary>
            This event occurs before all chunks are written to the destination stream, and after
            all RVAs and file offsets are known.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.EndWriteChunks">
            <summary>
            All chunks have been written to the destination stream.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.BeginStrongNameSign">
            <summary>
            This event occurs before the strong name signature is calculated. This event
            occurs even if the assembly isn't strong name signed.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.EndStrongNameSign">
            <summary>
            This event occurs after the strong name signature has been calculated. This event
            occurs even if the assembly isn't strong name signed.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.BeginWritePEChecksum">
            <summary>
            This event occurs before the checksum in the PE header is updated. This event
            occurs even if the checksum isn't updated.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.EndWritePEChecksum">
            <summary>
            This event occurs after the checksum in the PE header has been updated. This event
            occurs even if the checksum isn't updated.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterEvent.End">
            <summary>
            Writing has ended
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterException">
            <summary>
            Thrown when the module writer encounters an unrecoverable error
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Other exception</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter"/> options
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions.KeepExtraPEData">
            <summary>
            If <c>true</c>, any extra data after the PE data in the original file is also saved
            at the end of the new file. Enable this option if some protector has written data to
            the end of the file and uses it at runtime.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions.KeepWin32Resources">
            <summary>
            If <c>true</c>, keep the original Win32 resources
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
            <param name="optimizeImageSize">true to optimize the image size so it's as small as possible.
            Since the file can contain native methods and other native data, we re-use the
            original file when writing the new file. If <paramref name="optimizeImageSize"/> is true,
            we'll try to re-use the old method body locations in the original file and
            also try to fit the new metadata in the old metadata location.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter">
            <summary>
            A module writer that supports saving mixed-mode modules (modules with native code).
            The original image will be re-used. See also <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriter"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.module">
            <summary>The original .NET module</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.options">
            <summary>All options</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.extraData">
            <summary>
            Any extra data found at the end of the original file. This is <c>null</c> if there's
            no extra data or if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions.KeepExtraPEData"/> is
            <c>false</c>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.origSections">
            <summary>The original PE sections and their data</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.peImage">
            <summary>Original PE image</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.sections">
            <summary>New sections we've added and their data</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.textSection">
            <summary>New .text section where we put some stuff, eg. .NET metadata</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.imageCor20Header">
            <summary>The new COR20 header</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.rsrcSection">
            <summary>
            New .rsrc section where we put the new Win32 resources. This is <c>null</c> if there
            are no Win32 resources or if <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions.KeepWin32Resources"/>
            is <c>true</c>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.checkSumOffset">
            <summary>
            Offset in <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ModuleWriterBase.destStream"/> of the PE checksum field.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.OrigSection">
            <summary>
            Original PE section
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.OrigSection.PESection">
            <summary>PE section</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.OrigSection.Chunk">
            <summary>PE section data</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.OrigSection.#ctor(Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader)">
            <summary>
            Constructor
            </summary>
            <param name="peSection">PE section</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.OrigSection.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.OrigSection.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.ModuleDefMD">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.Module">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.TheOptions">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.Options">
            <summary>
            Gets/sets the writer options. This is never <c>null</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.Sections">
            <summary>
            Gets all <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection"/>s
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.OrigSections">
            <summary>
            Gets the original PE sections and their data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.TextSection">
            <summary>
            Gets the <c>.text</c> section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.RsrcSection">
            <summary>
            Gets the <c>.rsrc</c> section or <c>null</c> if there's none
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.ModuleDefMD,Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriterOptions)">
            <summary>
            Constructor
            </summary>
            <param name="module">The module</param>
            <param name="options">Options or <c>null</c></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.WriteImpl">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.GetWin32Resources">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.CreateRawSections">
            <summary>
            Gets the raw section data of the image. The sections are saved in
            <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.origSections"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.CreateHeaderSection(Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk@)">
            <summary>
            Creates the PE header "section"
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.CreateExtraData">
            <summary>
            Saves any data that is appended to the original PE file
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.Is64Bit">
            <summary>
            <c>true</c> if image is 64-bit
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.UpdateHeaderFields(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,System.Boolean,System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.Writer.SectionSizes@)">
            <summary>
            Updates the PE header and COR20 header fields that need updating. All sections are
            also updated, and the new ones are added.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.ToWriterOffset(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Converts <paramref name="rva"/> to a file offset in the destination stream
            </summary>
            <param name="rva">RVA</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NativeModuleWriter.GetEntryPoint(System.UInt32@)">
            <summary>
            Gets the entry point
            </summary>
            <param name="ep">Updated with entry point (either a token or RVA of native method)</param>
            <returns><c>true</c> if it's a managed entry point or there's no entry point,
            <c>false</c> if it's a native entry point</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources">
            <summary>
            .NET resources
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.NextOffset">
            <summary>
            Gets offset of next resource. This offset is relative to the start of
            the .NET resources and is always aligned.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="alignment">Alignment of all resources</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.Add(Datadog.Trace.Vendors.dnlib.IO.DataReader)">
            <summary>
            Adds a resource
            </summary>
            <param name="reader">The resource data</param>
            <returns>The resource data</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NetResources.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata">
            <summary>
            Does not preserve metadata tokens
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetAllTypeDefs">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.AllocateTypeDefRids">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.AllocateMemberDefRids">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.ParamDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.AddTypeRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.AddTypeSpec(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.AddMemberRef(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.AddStandAloneSig(Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.NormalMetadata.AddMethodSpec(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap">
            <summary>
            #Pdb heap
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.Name">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.PdbId">
            <summary>
            Gets the PDB ID. This is always 20 bytes in size.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.EntryPoint">
            <summary>
            Gets/sets the entry point token
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.PdbIdOffset">
            <summary>
            Gets the offset of the 20-byte PDB ID
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.ReferencedTypeSystemTables">
            <summary>
            Gets/sets the referenced type system tables
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.TypeSystemTableRows">
            <summary>
            Gets the type system table rows. This table has 64 elements.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.GetRawLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PdbHeap.WriteToImpl(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders"/> options
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.DefaultDllCharacteristics">
            <summary>
            Default DLL characteristics
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.DEFAULT_SUBSYSTEM">
            <summary>
            Default subsystem value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION">
            <summary>
            Default major linker version. Roslyn C# defaults to 0x30, and Roslyn VB defaults to 0x50.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION">
            <summary>
            Default minor linker version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.Machine">
            <summary>
            IMAGE_FILE_HEADER.Machine value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.TimeDateStamp">
            <summary>
            IMAGE_FILE_HEADER.TimeDateStamp value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.PointerToSymbolTable">
            <summary>
            IMAGE_FILE_HEADER.PointerToSymbolTable value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.NumberOfSymbols">
            <summary>
            IMAGE_FILE_HEADER.NumberOfSymbols value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.Characteristics">
            <summary>
            IMAGE_FILE_HEADER.Characteristics value. <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.Dll"/> bit
            is ignored and set/cleared depending on whether it's a EXE or a DLL file.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.MajorLinkerVersion">
            <summary>
            IMAGE_OPTIONAL_HEADER.MajorLinkerVersion value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.MinorLinkerVersion">
            <summary>
            IMAGE_OPTIONAL_HEADER.MinorLinkerVersion value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.ImageBase">
            <summary>
            IMAGE_OPTIONAL_HEADER.ImageBase value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.SectionAlignment">
            <summary>
            IMAGE_OPTIONAL_HEADER.SectionAlignment value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.FileAlignment">
            <summary>
            IMAGE_OPTIONAL_HEADER.FileAlignment value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.MajorOperatingSystemVersion">
            <summary>
            IMAGE_OPTIONAL_HEADER.MajorOperatingSystemVersion value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.MinorOperatingSystemVersion">
            <summary>
            IMAGE_OPTIONAL_HEADER.MinorOperatingSystemVersion value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.MajorImageVersion">
            <summary>
            IMAGE_OPTIONAL_HEADER.MajorImageVersion value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.MinorImageVersion">
            <summary>
            IMAGE_OPTIONAL_HEADER.MinorImageVersion value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.MajorSubsystemVersion">
            <summary>
            IMAGE_OPTIONAL_HEADER.MajorSubsystemVersion value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.MinorSubsystemVersion">
            <summary>
            IMAGE_OPTIONAL_HEADER.MinorSubsystemVersion value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.Win32VersionValue">
            <summary>
            IMAGE_OPTIONAL_HEADER.Win32VersionValue value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.Subsystem">
            <summary>
            IMAGE_OPTIONAL_HEADER.Subsystem value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.DllCharacteristics">
            <summary>
            IMAGE_OPTIONAL_HEADER.DllCharacteristics value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.SizeOfStackReserve">
            <summary>
            IMAGE_OPTIONAL_HEADER.SizeOfStackReserve value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.SizeOfStackCommit">
            <summary>
            IMAGE_OPTIONAL_HEADER.SizeOfStackCommit value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.SizeOfHeapReserve">
            <summary>
            IMAGE_OPTIONAL_HEADER.SizeOfHeapReserve value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.SizeOfHeapCommit">
            <summary>
            IMAGE_OPTIONAL_HEADER.SizeOfHeapCommit value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.LoaderFlags">
            <summary>
            IMAGE_OPTIONAL_HEADER.LoaderFlags value
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.NumberOfRvaAndSizes">
            <summary>
            IMAGE_OPTIONAL_HEADER.NumberOfRvaAndSizes value
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions.CreateNewTimeDateStamp">
            <summary>
            Creates a new time date stamp using current time
            </summary>
            <returns>A new time date stamp</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders">
            <summary>
            DOS and PE headers
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.StartupStub">
            <summary>
            Gets/sets the native entry point
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.ImageCor20Header">
            <summary>
            Gets/sets the COR20 header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.ImportAddressTable">
            <summary>
            Gets/sets the IAT
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.ImportDirectory">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.ImportDirectory"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.Win32Resources">
            <summary>
            Gets/sets the Win32 resources
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.RelocDirectory">
            <summary>
            Gets/sets the relocation directory
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.DebugDirectory">
            <summary>
            Gets/sets the debug directory
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.ImageBase">
            <summary>
            Gets the image base
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.IsExeFile">
            <summary>
            Gets/sets a value indicating whether this is a EXE or a DLL file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.SectionAlignment">
            <summary>
            Gets the section alignment
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.FileAlignment">
            <summary>
            Gets the file alignment
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.PESections">
            <summary>
            Gets/sets the <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeadersOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">Options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PEHeaders.WriteCheckSum(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,System.Int64)">
            <summary>
            Calculates the PE checksum and writes it to the checksum field
            </summary>
            <param name="writer">Writer</param>
            <param name="length">Length of PE file</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection">
            <summary>
            A PE section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection.Characteristics">
            <summary>
            Gets the Characteristics
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection.IsCode">
            <summary>
            <c>true</c> if this is a code section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection.IsInitializedData">
            <summary>
            <c>true</c> if this is an initialized data section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection.IsUninitializedData">
            <summary>
            <c>true</c> if this is an uninitialized data section
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection.#ctor(System.String,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Section name</param>
            <param name="characteristics">Section characteristics</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PESection.WriteHeaderTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Writes the section header to <paramref name="writer"/> at its current position.
            Returns aligned virtual size (aligned to <paramref name="sectionAlignment"/>)
            </summary>
            <param name="writer">Writer</param>
            <param name="fileAlignment">File alignment</param>
            <param name="sectionAlignment">Section alignment</param>
            <param name="rva">Current <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata">
            <summary>
            Preserves metadata tokens
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefInfo`1.Rid">
            <summary>
            Its real rid
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefInfo`1.NewRid">
            <summary>
            Its logical rid or real rid. If the ptr table exists (eg. MethodPtr), then it's
            an index into it, else it's the real rid.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.Count">
            <summary>
            Gets total number of defs in the list. It does <c>not</c> necessarily return
            the table size. Use <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.TableSize"/> for that.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.TableSize">
            <summary>
            Gets the number of rows that need to be created in the table
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.NeedPtrTable">
            <summary>
            Returns <c>true</c> if the ptr table (eg. <c>MethodPtr</c>) is needed
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.Sort(System.Comparison{Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefInfo{`0}})">
            <summary>
            Sorts the table
            </summary>
            <param name="comparer">Comparer</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.Add(`0,System.Int32)">
            <summary>
            Adds a def. <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.SortDefs"/> must be called after adding the last def.
            </summary>
            <param name="def">The def</param>
            <param name="collPos">Collection position</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.SortDefs">
            <summary>
            Must be called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.MemberDefDict`1.Add(`0,System.Int32)"/>'ing the last def
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.FieldDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MethodDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.ParamDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.EventDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetRid(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetAllTypeDefs">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AllocateTypeDefRids">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.CreateEmptyTableRows">
            <summary>
            Reserves rows in <c>TypeRef</c>, <c>MemberRef</c>, <c>StandAloneSig</c>,
            <c>TypeSpec</c> and <c>MethodSpec</c> where we will store the original rows
            to make sure they get the same rid. Any user created rows will be stored at
            the end of each table.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.InitializeUninitializedTableRows">
            <summary>
            Adds any non-referenced rows that haven't been added yet but are present in
            the original file. If there are any non-referenced rows, it's usually a sign
            that an obfuscator has encrypted one or more methods or that it has added
            some rows it uses to decrypt something.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AllocateMemberDefRids">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.ReUseDeletedFieldRows">
            <summary>
            Re-uses all <c>Field</c> rows which aren't owned by any type due to the fields
            having been deleted by the user. The reason we must do this is that the
            <c>FieldPtr</c> and <c>Field</c> tables must be the same size.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.ReUseDeletedMethodRows">
            <summary>
            Re-uses all <c>Method</c> rows which aren't owned by any type due to the methods
            having been deleted by the user. The reason we must do this is that the
            <c>MethodPtr</c> and <c>Method</c> tables must be the same size.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.ReUseDeletedParamRows">
            <summary>
            Re-uses all <c>Param</c> rows which aren't owned by any type due to the params
            having been deleted by the user. The reason we must do this is that the
            <c>ParamPtr</c> and <c>Param</c> tables must be the same size.
            This method must be called after <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.ReUseDeletedMethodRows"/> since
            this method will create more methods at the end of the <c>Method</c> table.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.ReUseDeletedEventRows">
            <summary>
            Re-uses all <c>Event</c> rows which aren't owned by any type due to the events
            having been deleted by the user. The reason we must do this is that the
            <c>EventPtr</c> and <c>Event</c> tables must be the same size.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.ReUseDeletedPropertyRows">
            <summary>
            Re-uses all <c>Property</c> rows which aren't owned by any type due to the properties
            having been deleted by the user. The reason we must do this is that the
            <c>PropertyPtr</c> and <c>Property</c> tables must be the same size.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.CreateDummyPtrTableType">
            <summary>
            Creates a dummy <c>TypeDef</c> at the end of the <c>TypeDef</c> table that will own
            dummy methods and fields. These dummy methods and fields are only created if the size
            of the ptr table is less than the size of the non-ptr table (eg. size MethodPtr table
            is less than size Method table). The only reason the ptr table would be smaller than
            the non-ptr table is when some field/method has been deleted and we must preserve
            all method/field rids.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AddTypeRef(Datadog.Trace.Vendors.dnlib.DotNet.TypeRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AddTypeSpec(Datadog.Trace.Vendors.dnlib.DotNet.TypeSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AddMemberRef(Datadog.Trace.Vendors.dnlib.DotNet.MemberRef)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AddStandAloneSig(Datadog.Trace.Vendors.dnlib.DotNet.StandAloneSig)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.GetToken(System.Collections.Generic.IList{Datadog.Trace.Vendors.dnlib.DotNet.TypeSig},System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AddStandAloneSig(Datadog.Trace.Vendors.dnlib.DotNet.MethodSig,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AddStandAloneSig(Datadog.Trace.Vendors.dnlib.DotNet.FieldSig,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.AddMethodSpec(Datadog.Trace.Vendors.dnlib.DotNet.MethodSpec)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.PreserveTokensMetadata.BeforeSortingCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory">
            <summary>
            Relocations directory
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.RVA">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.#ctor(Datadog.Trace.Vendors.dnlib.PE.Machine)">
            <summary>
            Constructor
            </summary>
            <param name="machine">Machine</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.Add(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Adds a relocation
            </summary>
            <param name="rva">RVA of location</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory.Add(Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk,System.UInt32)">
            <summary>
            Adds a relocation
            </summary>
            <param name="chunk">Chunk or null. If it's null, <paramref name="offset"/> is the RVA</param>
            <param name="offset">Offset relative to the start of <paramref name="chunk"/>, or if <paramref name="chunk"/> is null, this is the RVA</param>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SectionSizeInfo.length">
            <summary>
            Length of section
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SectionSizeInfo.characteristics">
            <summary>
            Section characteristics
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SectionSizeInfo.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="length">Length of section</param>
            <param name="characteristics">Section characteristics</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SectionSizes">
            <summary>
            Calculates the optional header section sizes
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ISignatureWriterHelper">
            <summary>
            Helps <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SignatureWriter"/> map <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef"/>s to tokens
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.ISignatureWriterHelper.ToEncodedToken(Datadog.Trace.Vendors.dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Returns a <c>TypeDefOrRef</c> encoded token
            </summary>
            <param name="typeDefOrRef">A <c>TypeDefOrRef</c> type</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SignatureWriter">
            <summary>
            Writes signatures
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SignatureWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ISignatureWriterHelper,Datadog.Trace.Vendors.dnlib.DotNet.TypeSig)">
            <summary>
            Write a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeSig"/> signature
            </summary>
            <param name="helper">Helper</param>
            <param name="typeSig">The type</param>
            <returns>The signature as a byte array</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SignatureWriter.Write(Datadog.Trace.Vendors.dnlib.DotNet.Writer.ISignatureWriterHelper,Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig)">
            <summary>
            Write a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.CallingConventionSig"/> signature
            </summary>
            <param name="helper">Helper</param>
            <param name="sig">The signature</param>
            <returns>The signature as a byte array</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.SignatureWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub">
            <summary>
            Stores the instruction that jumps to _CorExeMain/_CorDllMain
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.ImportDirectory">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.ImportDirectory"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.PEHeaders">
            <summary>
            Gets/sets the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.PEHeaders"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.RVA">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.EntryPointRVA">
            <summary>
            Gets the address of the JMP instruction
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.RelocDirectory,Datadog.Trace.Vendors.dnlib.PE.Machine,System.Action{System.String,System.Object[]})">
            <summary>
            Constructor
            </summary>
            <param name="relocDirectory">Reloc directory</param>
            <param name="machine">Machine</param>
            <param name="logError">Error logger</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StartupStub.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap">
            <summary>
            #Strings heap
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.Name">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.Populate(Datadog.Trace.Vendors.dnlib.DotNet.MD.StringsStream)">
            <summary>
            Populates strings from an existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.StringsStream"/> (eg. to preserve
            string offsets)
            </summary>
            <param name="stringsStream">The #Strings stream with the original content</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.Add(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Adds a string to the #Strings heap. The returned value is not necessarily an offset in
            the #Strings heap. Call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.GetOffset(System.UInt32)"/> to get the offset.
            </summary>
            <param name="s">The string</param>
            <returns>The offset id. This is not a #Strings offset. Call <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.GetOffset(System.UInt32)"/> to get the #Strings offset</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.GetOffset(System.UInt32)">
            <summary>
            Gets the offset of a string in the #Strings heap. This method can only be called after
            all strings have been added.
            </summary>
            <param name="offsetId">Offset id returned by <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.Add(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.Create(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <summary>
            Adds a string to the #Strings heap, but does not re-use an existing position
            </summary>
            <param name="s">The string</param>
            <returns>The offset of the string in the #Strings heap</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.GetRawLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.WriteToImpl(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.GetRawDataSize(Datadog.Trace.Vendors.dnlib.DotNet.UTF8String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.SetRawData(System.UInt32,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StringsHeap.GetAllRawData">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StrongNameSignature">
            <summary>
            Strong name signature chunk
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StrongNameSignature.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StrongNameSignature.RVA">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StrongNameSignature.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Size of strong name signature</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StrongNameSignature.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StrongNameSignature.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StrongNameSignature.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.StrongNameSignature.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions">
            <summary>
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap"/> options
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.Reserved1">
            <summary>
            Should be 0
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.MajorVersion">
            <summary>
            Major version number. Default is 2. Valid versions are v1.0 (no generics),
            v1.1 (generics are supported), or v2.0 (recommended).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.MinorVersion">
            <summary>
            Minor version number. Default is 0.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.UseENC">
            <summary>
            Force #- or #~ stream. Default value is <c>null</c> and recommended because the correct
            tables stream will be used. <c>true</c> will force <c>#-</c> (Edit N' Continue)
            stream, and <c>false</c> will force <c>#~</c> (normal compressed) stream.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.ForceBigColumns">
            <summary>
            All columns that can be 2 or 4 bytes are forced to be 4 bytes.
            Set this to <c>true</c> if you add a <c>#JTD</c> heap and (if CLR) a <c>#-</c> tables heap is used
            or (if Mono/Unity) a <c>#~</c> or <c>#-</c> tables heap is used.
            dnlib won't try to auto detect this from your added heaps since the CLR/CoreCLR vs Mono/Unity behavior
            is a little bit different. You may need to set <see cref="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.UseENC"/> to <c>true</c> if you target CLR/CoreCLR.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.ExtraData">
            <summary>
            Extra data to write
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.Log2Rid">
            <summary>
            Log2Rid to write
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.HasDeletedRows">
            <summary>
            <c>true</c> if there are deleted <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.TypeDef"/>s, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.ExportedType"/>s,
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.FieldDef"/>s, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MethodDef"/>s, <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.EventDef"/>s and/or
            <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.PropertyDef"/>s.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions.CreatePortablePdbV1_0">
            <summary>
            Creates portable PDB v1.0 options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap">
            <summary>
            Contains all .NET tables
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.RVA">
            <inheritdoc/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.Tables">
            <summary>
            All tables
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.Name">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.IsENC">
            <summary>
            <c>true</c> if the Edit 'N Continue name will be used (#-)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.HasDeletedRows">
            <summary>
            <c>true</c> if any rows have been deleted (eg. a deleted TypeDef, Method, Field, etc.
            Its name has been renamed to _Deleted).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.BigStrings">
            <summary>
            <c>true</c> if #Strings heap size > <c>0xFFFF</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.BigGuid">
            <summary>
            <c>true</c> if #GUID heap size > <c>0xFFFF</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.BigBlob">
            <summary>
            <c>true</c> if #Blob heap size > <c>0xFFFF</c>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.#ctor(Datadog.Trace.Vendors.dnlib.DotNet.Writer.Metadata,Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeapOptions)">
            <summary>
            Constructor
            </summary>
            <param name="metadata">Metadata owner</param>
            <param name="options">Options</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.SetReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.CalculateLength">
            <summary>
            Calculates the length. This will set all MD tables to read-only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.TablesHeap.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.UniqueChunkList`1">
            <summary>
            Re-uses existing chunks to save space
            </summary>
            <typeparam name="T">Chunk type</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.UniqueChunkList`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.UniqueChunkList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="chunkComparer">Compares the chunk type</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.UniqueChunkList`1.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.UniqueChunkList`1.Add(`0,System.UInt32)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.IChunk"/> if not already present
            </summary>
            <param name="chunk">The chunk to add or <c>null</c> if none</param>
            <param name="alignment">Chunk alignment</param>
            <returns>The original input if it wasn't present, or the cached one</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap">
            <summary>
            #US heap
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.Name">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.Populate(Datadog.Trace.Vendors.dnlib.DotNet.MD.USStream)">
            <summary>
            Populates strings from an existing <see cref="T:Datadog.Trace.Vendors.dnlib.DotNet.MD.USStream"/> (eg. to preserve
            string tokens)
            </summary>
            <param name="usStream">The #US stream with the original content</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.Add(System.String)">
            <summary>
            Adds a string to the #US heap
            </summary>
            <param name="s">The string</param>
            <returns>The offset of the string in the #US heap</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.Create(System.String)">
            <summary>
            Adds a string to the #US heap
            </summary>
            <param name="s">The string</param>
            <returns>The offset of the string in the #US heap</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.GetRawLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.WriteToImpl(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.GetRawDataSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.SetRawData(System.UInt32,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.USHeap.GetAllRawData">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk">
            <summary>
            Writes Win32 resources
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.#ctor(Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources)">
            <summary>
            Constructor
            </summary>
            <param name="win32Resources">Win32 resources</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileOffsetAndRvaOf(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry,Datadog.Trace.Vendors.dnlib.IO.FileOffset@,Datadog.Trace.Vendors.dnlib.PE.RVA@)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA"/> of a
            <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/>. <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dirEntry">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/></param>
            <param name="fileOffset">Updated with the file offset</param>
            <param name="rva">Updated with the RVA</param>
            <returns><c>true</c> if <paramref name="dirEntry"/> is valid and
            <paramref name="fileOffset"/> and <paramref name="rva"/> have been updated. <c>false</c>
            if <paramref name="dirEntry"/> is not part of the Win32 resources.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileOffset(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset"/> of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/>.
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dirEntry">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/></param>
            <returns>The file offset or 0 if <paramref name="dirEntry"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetRVA(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA"/> of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/>.
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dirEntry">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/></param>
            <returns>The RVA or 0 if <paramref name="dirEntry"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileOffsetAndRvaOf(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory,Datadog.Trace.Vendors.dnlib.IO.FileOffset@,Datadog.Trace.Vendors.dnlib.PE.RVA@)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA"/> of a
            <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/>. <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dir">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/></param>
            <param name="fileOffset">Updated with the file offset</param>
            <param name="rva">Updated with the RVA</param>
            <returns><c>true</c> if <paramref name="dir"/> is valid and
            <paramref name="fileOffset"/> and <paramref name="rva"/> have been updated. <c>false</c>
            if <paramref name="dir"/> is not part of the Win32 resources.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileOffset(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset"/> of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/>.
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dir">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/></param>
            <returns>The file offset or 0 if <paramref name="dir"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetRVA(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA"/> of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/>.
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dir">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/></param>
            <returns>The RVA or 0 if <paramref name="dir"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileOffsetAndRvaOf(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData,Datadog.Trace.Vendors.dnlib.IO.FileOffset@,Datadog.Trace.Vendors.dnlib.PE.RVA@)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA"/> of a
            <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>. <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dataHeader">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/></param>
            <param name="fileOffset">Updated with the file offset</param>
            <param name="rva">Updated with the RVA</param>
            <returns><c>true</c> if <paramref name="dataHeader"/> is valid and
            <paramref name="fileOffset"/> and <paramref name="rva"/> have been updated. <c>false</c>
            if <paramref name="dataHeader"/> is not part of the Win32 resources.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileOffset(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset"/> of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>.
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dataHeader">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/></param>
            <returns>The file offset or 0 if <paramref name="dataHeader"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetRVA(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA"/> of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>.
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="dataHeader">A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/></param>
            <returns>The RVA or 0 if <paramref name="dataHeader"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileOffsetAndRvaOf(System.String,Datadog.Trace.Vendors.dnlib.IO.FileOffset@,Datadog.Trace.Vendors.dnlib.PE.RVA@)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA"/> of a
            <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/>'s name. <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been
            called.
            </summary>
            <param name="name">The name of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/></param>
            <param name="fileOffset">Updated with the file offset</param>
            <param name="rva">Updated with the RVA</param>
            <returns><c>true</c> if <paramref name="name"/> is valid and
            <paramref name="fileOffset"/> and <paramref name="rva"/> have been updated. <c>false</c>
            if <paramref name="name"/> is not part of the Win32 resources.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileOffset(System.String)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.FileOffset"/> of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/>'s name.
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="name">The name of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/></param>
            <returns>The file offset or 0 if <paramref name="name"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetRVA(System.String)">
            <summary>
            Returns the <see cref="P:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.RVA"/> of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/>'s name.
            <see cref="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)"/> must have been called.
            </summary>
            <param name="name">The name of a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry"/></param>
            <returns>The RVA or 0 if <paramref name="name"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.SetOffset(Datadog.Trace.Vendors.dnlib.IO.FileOffset,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetFileLength">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.GetVirtualSize">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.DotNet.Writer.Win32ResourcesChunk.WriteTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory">
            <summary>
            A <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory"/> that reads from a byte array
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory.Filename">
            <summary>
            The filename or null if the data is not from a file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory.Length">
            <summary>
            Gets the total length of the data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory.Create(System.Byte[],System.String)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory"/> instance
            </summary>
            <param name="data">Data</param>
            <param name="filename">The filename or null if the data is not from a file</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory.CreateReader(System.Byte[])">
            <summary>
            Creates a data reader
            </summary>
            <param name="data">Data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory.CreateReader(System.UInt32,System.UInt32)">
            <summary>
            Creates a data reader
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory.Dispose">
            <summary>
            This method doesn't need to be called since a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.ByteArrayDataReaderFactory"/> has nothing that must be cleaned up
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.DataReaderException">
            <summary>
            Thrown by a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> when it can't read data or if the caller tries to set an invalid offset
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.DataReader">
            <summary>
            Reads data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.StartOffset">
            <summary>
            Gets the start offset of the data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.EndOffset">
            <summary>
            Gets the end offset of the data, not inclusive
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.Length">
            <summary>
            Gets the total length of the data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.CurrentOffset">
            <summary>
            Gets the current offset. This is between <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.StartOffset"/> and <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.EndOffset"/> (inclusive)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.Position">
            <summary>
            Gets/sets the position relative to <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.StartOffset"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.BytesLeft">
            <summary>
            Gets the number of bytes that can be read without throwing an exception
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataStream,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Stream</param>
            <param name="offset">Start offset of data</param>
            <param name="length">Length of data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.Reset">
            <summary>
            Resets the reader so it points to the start of the data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.Slice(System.UInt32,System.UInt32)">
            <summary>
            Creates a new reader that can access a smaller part of this reader
            </summary>
            <param name="start">Start position relative to <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.StartOffset"/></param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.Slice(System.UInt32)">
            <summary>
            Creates a new reader that can access everything from <paramref name="start"/> to the end of the data
            </summary>
            <param name="start">Start position relative to <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.StartOffset"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a new reader that can access a smaller part of this reader
            </summary>
            <param name="start">Start position relative to <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.StartOffset"/></param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.Slice(System.Int32)">
            <summary>
            Creates a new reader that can access everything from <paramref name="start"/> to the end of the data
            </summary>
            <param name="start">Start position relative to <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.StartOffset"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.CanRead(System.Int32)">
            <summary>
            Checks if it's possible to read <paramref name="length"/> bytes
            </summary>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.CanRead(System.UInt32)">
            <summary>
            Checks if it's possible to read <paramref name="length"/> bytes
            </summary>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadBoolean">
            <summary>
            Reads a <see cref="T:System.Boolean"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadChar">
            <summary>
            Reads a <see cref="T:System.Char"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadSByte">
            <summary>
            Reads a <see cref="T:System.SByte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadByte">
            <summary>
            Reads a <see cref="T:System.Byte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadInt16">
            <summary>
            Reads a <see cref="T:System.Int16"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadUInt16">
            <summary>
            Reads a <see cref="T:System.UInt16"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadInt32">
            <summary>
            Reads a <see cref="T:System.Int32"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadUInt32">
            <summary>
            Reads a <see cref="T:System.UInt32"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadInt64">
            <summary>
            Reads a <see cref="T:System.Int64"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadUInt64">
            <summary>
            Reads a <see cref="T:System.UInt64"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadSingle">
            <summary>
            Reads a <see cref="T:System.Single"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadDouble">
            <summary>
            Reads a <see cref="T:System.Double"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadGuid">
            <summary>
            Reads a <see cref="T:System.Guid"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadDecimal">
            <summary>
            Reads a <see cref="T:System.Decimal"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadUtf16String(System.Int32)">
            <summary>
            Reads a UTF-16 encoded <see cref="T:System.String"/>
            </summary>
            <param name="chars">Number of characters to read</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadBytes(System.Void*,System.Int32)">
            <summary>
            Reads bytes
            </summary>
            <param name="destination">Destination pointer</param>
            <param name="length">Number of bytes to read</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes
            </summary>
            <param name="destination">Destination array</param>
            <param name="destinationIndex">Destination index</param>
            <param name="length">Number of bytes to read</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadBytes(System.Int32)">
            <summary>
            Reads bytes
            </summary>
            <param name="length">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.TryReadCompressedUInt32(System.UInt32@)">
            <summary>
            Reads a compressed <see cref="T:System.UInt32"/>
            </summary>
            <param name="value">Uncompressed <see cref="T:System.UInt32"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadCompressedUInt32">
            <summary>
            Reads a compressed <see cref="T:System.UInt32"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.TryReadCompressedInt32(System.Int32@)">
            <summary>
            Reads a compressed <see cref="T:System.Int32"/>
            </summary>
            <param name="value">Uncompressed <see cref="T:System.Int32"/></param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadCompressedInt32">
            <summary>
            Reads a compressed <see cref="T:System.Int32"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.Read7BitEncodedUInt32">
            <summary>
            Reads a 7-bit encoded integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.Read7BitEncodedInt32">
            <summary>
            Reads a 7-bit encoded integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadSerializedString">
            <summary>
            Reads a serialized UTF-8 string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadSerializedString(System.Text.Encoding)">
            <summary>
            Reads a serialized string
            </summary>
            <param name="encoding">Encoding</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ToArray">
            <summary>
            Returns all data without updating the current position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadRemainingBytes">
            <summary>
            Returns the remaining data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.TryReadBytesUntil(System.Byte)">
            <summary>
            Reads all bytes until a terminating byte or returns null if <paramref name="value"/> wasn't found.
            If found, the current offset is incremented by the length of the returned data
            </summary>
            <param name="value">Terminating byte value</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.TryReadZeroTerminatedUtf8String">
            <summary>
            Reads a zero-terminated UTF-8 string or returns null if the string couldn't be read.
            If successful, the current offset is incremented past the terminating zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.TryReadZeroTerminatedString(System.Text.Encoding)">
            <summary>
            Reads a zero-terminated string or returns null if the string couldn't be read.
            If successful, the current offset is incremented past the terminating zero.
            </summary>
            <param name="encoding">Encoding</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadUtf8String(System.Int32)">
            <summary>
            Reads a UTF-8 encoded string
            </summary>
            <param name="byteCount">Number of bytes to read (not characters)</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string
            </summary>
            <param name="byteCount">Number of bytes to read (not characters)</param>
            <param name="encoding">Encoding</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.AsStream">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> that can access this content. The caller doesn't have to dispose of the returned stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.CopyTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter)">
            <summary>
            Copies the data, starting from <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.Position"/>, to <paramref name="destination"/>
            </summary>
            <param name="destination">Destination</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.CopyTo(Datadog.Trace.Vendors.dnlib.DotNet.Writer.DataWriter,System.Byte[])">
            <summary>
            Copies the data, starting from <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.Position"/>, to <paramref name="destination"/>
            </summary>
            <param name="destination">Destination</param>
            <param name="dataBuffer">Temp buffer during writing</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.CopyTo(System.IO.BinaryWriter)">
            <summary>
            Copies the data, starting from <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.Position"/>, to <paramref name="destination"/>
            </summary>
            <param name="destination">Destination</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.CopyTo(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Copies the data, starting from <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.Position"/>, to <paramref name="destination"/>
            </summary>
            <param name="destination">Destination</param>
            <param name="dataBuffer">Temp buffer during writing</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.CopyTo(System.IO.Stream)">
            <summary>
            Copies the data, starting from <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.Position"/>, to <paramref name="destination"/>
            </summary>
            <param name="destination">Destination</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReader.CopyTo(System.IO.Stream,System.Byte[])">
            <summary>
            Copies the data, starting from <see cref="P:Datadog.Trace.Vendors.dnlib.IO.DataReader.Position"/>, to <paramref name="destination"/>
            </summary>
            <param name="destination">Destination</param>
            <param name="dataBuffer">Temp buffer during writing</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory">
            <summary>
            Creates <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/>s that can read its data.
            
            This factory class is thread safe and its data can be read by <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> on any thread.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.Filename">
            <summary>
            The filename or null if the data is not from a file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.Length">
            <summary>
            Gets the total length of the data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.CreateReader">
            <summary>
            Creates a data reader that can read all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.CreateReader(System.UInt32,System.UInt32)">
            <summary>
            Creates a data reader
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.CreateReader(System.UInt32,System.Int32)">
            <summary>
            Creates a data reader
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.CreateReader(System.Int32,System.UInt32)">
            <summary>
            Creates a data reader
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.CreateReader(System.Int32,System.Int32)">
            <summary>
            Creates a data reader
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.CreateReader(Datadog.Trace.Vendors.dnlib.IO.DataStream,System.UInt32,System.UInt32)">
            <summary>
            Creates a data reader
            </summary>
            <param name="stream">Stream</param>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="E:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.DataReaderInvalidated">
            <summary>
            Raised when all cached <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/>s created by this instance must be recreated
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory.Dispose">
            <summary>
            Disposes of this instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.DataStream">
            <summary>
            This class is used by a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/>. The <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> instance
            verifies that all input are valid before calling any methods in this class.
            This class is thread safe.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadBytes(System.UInt32,System.Void*,System.Int32)">
            <summary>
            Reads bytes
            </summary>
            <param name="offset">Offset of data</param>
            <param name="destination">Destination pointer</param>
            <param name="length">Number of bytes to read</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadBytes(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes
            </summary>
            <param name="offset">Offset of data</param>
            <param name="destination">Destination array</param>
            <param name="destinationIndex">Destination index</param>
            <param name="length">Number of bytes to read</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadByte(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Byte"/>
            </summary>
            <param name="offset">Offset of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadUInt16(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/>
            </summary>
            <param name="offset">Offset of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadUInt32(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt32"/>
            </summary>
            <param name="offset">Offset of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadUInt64(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/>
            </summary>
            <param name="offset">Offset of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadSingle(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Single"/>
            </summary>
            <param name="offset">Offset of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadDouble(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Double"/>
            </summary>
            <param name="offset">Offset of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadGuid(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Guid"/>
            </summary>
            <param name="offset">Offset of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadUtf16String(System.UInt32,System.Int32)">
            <summary>
            Reads a UTF-16 encoded <see cref="T:System.String"/>
            </summary>
            <param name="offset">Offset of data</param>
            <param name="chars">Number of characters to read</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.ReadString(System.UInt32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of string in bytes</param>
            <param name="encoding">Encoding</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStream.TryGetOffsetOf(System.UInt32,System.UInt32,System.Byte,System.UInt32@)">
            <summary>
            Gets the data offset of a byte or returns false if the byte wasn't found
            </summary>
            <param name="offset">Offset of data</param>
            <param name="endOffset">End offset of data (not inclusive)</param>
            <param name="value">Byte value to search for</param>
            <param name="valueOffset">Offset of the byte if found</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.DataStreamFactory">
            <summary>
            Creates <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataStream"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStreamFactory.Create(System.Byte*)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataStream"/> that reads from native memory
            </summary>
            <param name="data">Pointer to data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.DataStreamFactory.Create(System.Byte[])">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataStream"/> that reads from a byte array
            </summary>
            <param name="data">Data</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset">
            <summary>
            Represents a file offset
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.IOExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.IOExtensions.AlignUp(Datadog.Trace.Vendors.dnlib.IO.FileOffset,System.UInt32)">
            <summary>
            Align up
            </summary>
            <param name="offset">this</param>
            <param name="alignment">Alignment</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.IOExtensions.AlignUp(Datadog.Trace.Vendors.dnlib.IO.FileOffset,System.Int32)">
            <summary>
            Align up
            </summary>
            <param name="offset">this</param>
            <param name="alignment">Alignment</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.FileSection">
            <summary>
            Base class for classes needing to implement IFileSection
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.IO.FileSection.startOffset">
            <summary>
            The start file offset of this section
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.IO.FileSection.size">
            <summary>
            Size of the section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.FileSection.StartOffset">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.FileSection.EndOffset">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.FileSection.SetStartOffset(Datadog.Trace.Vendors.dnlib.IO.DataReader@)">
            <summary>
            Set <see cref="F:Datadog.Trace.Vendors.dnlib.IO.FileSection.startOffset"/> to <paramref name="reader"/>'s current position
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.FileSection.SetEndoffset(Datadog.Trace.Vendors.dnlib.IO.DataReader@)">
            <summary>
            Set <see cref="F:Datadog.Trace.Vendors.dnlib.IO.FileSection.size"/> according to <paramref name="reader"/>'s current position
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.IFileSection">
            <summary>
            Represents a section in a file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.IFileSection.StartOffset">
            <summary>
            Start offset of the section in the file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.IFileSection.EndOffset">
            <summary>
            End offset of the section in the file. This is one byte after the last
            valid offset in the section.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.MemoryMappedDataReaderFactory">
            <summary>
            Creates <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/>s that read memory mapped data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.MemoryMappedDataReaderFactory.Filename">
            <summary>
            The filename or null if the data is not from a file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.MemoryMappedDataReaderFactory.Length">
            <summary>
            Gets the total length of the data
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.dnlib.IO.MemoryMappedDataReaderFactory.DataReaderInvalidated">
            <summary>
            Raised when all cached <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/>s created by this instance must be recreated
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.MemoryMappedDataReaderFactory.CreateReader(System.UInt32,System.UInt32)">
            <summary>
            Creates a data reader
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.MemoryMappedDataReaderFactory.Dispose">
            <summary>
            Cleans up and frees all allocated memory
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.MemoryMappedDataReaderFactory.IsMemoryMappedIO">
            <summary>
            <c>true</c> if memory mapped I/O is enabled
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.MemoryMappedDataReaderFactory.UnsafeDisableMemoryMappedIO">
            <summary>
            Call this to disable memory mapped I/O. This must only be called if no other code is
            trying to access the memory since that could lead to an exception.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.IO.NativeMemoryDataReaderFactory">
            <summary>
            Creates <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/>s that read native memory
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.NativeMemoryDataReaderFactory.Filename">
            <summary>
            The filename or null if the data is not from a file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.IO.NativeMemoryDataReaderFactory.Length">
            <summary>
            Gets the total length of the data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.NativeMemoryDataReaderFactory.Create(System.Byte*,System.UInt32,System.String)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.NativeMemoryDataReaderFactory"/> instance
            </summary>
            <param name="data">Pointer to data</param>
            <param name="length">Length of data</param>
            <param name="filename">The filename or null if the data is not from a file</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.NativeMemoryDataReaderFactory.CreateReader(System.UInt32,System.UInt32)">
            <summary>
            Creates a data reader
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.IO.NativeMemoryDataReaderFactory.Dispose">
            <summary>
            This method doesn't need to be called since this instance doesn't own the native memory
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.Characteristics">
            <summary>
            IMAGE_FILE_HEADER.Characteristics flags
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.RelocsStripped">
            <summary>Relocation info stripped from file.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.ExecutableImage">
            <summary>File is executable  (i.e. no unresolved externel references).</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.LineNumsStripped">
            <summary>Line nunbers stripped from file.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.LocalSymsStripped">
            <summary>Local symbols stripped from file.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.AggressiveWsTrim">
            <summary>Agressively trim working set</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.LargeAddressAware">
            <summary>App can handle >2gb addresses</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.Reserved1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.BytesReversedLo">
            <summary>Bytes of machine word are reversed.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.Bit32Machine">
            <summary>32 bit word machine.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.DebugStripped">
            <summary>Debugging info stripped from file in .DBG file</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.RemovableRunFromSwap">
            <summary>If Image is on removable media, copy and run from the swap file.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.NetRunFromSwap">
            <summary>If Image is on Net, copy and run from the swap file.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.System">
            <summary>System File.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.Dll">
            <summary>File is a DLL.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.UpSystemOnly">
            <summary>File should only be run on a UP machine</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Characteristics.BytesReversedHi">
            <summary>Bytes of machine word are reversed.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics">
            <summary>
            IMAGE_OPTIONAL_HEADER.DllCharacteristics
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.Reserved1">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.Reserved2">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.Reserved3">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.Reserved4">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.Reserved5">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.HighEntropyVA">
            <summary>Image can handle a high entropy 64-bit virtual address space.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.DynamicBase">
            <summary>DLL can move.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.ForceIntegrity">
            <summary>Code Integrity Image</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.NxCompat">
            <summary>Image is NX compatible</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.NoIsolation">
            <summary>Image understands isolation and doesn't want it</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.NoSeh">
            <summary>Image does not use SEH.  No SE handler may reside in this image</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.NoBind">
            <summary>Do not bind this image.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.AppContainer">
            <summary>Image should execute in an AppContainer</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.WdmDriver">
            <summary>Driver uses WDM model</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.GuardCf">
            <summary>Image supports Control Flow Guard.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.DllCharacteristics.TerminalServerAware">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader">
            <summary>
            Interface for PE optional header classes
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.Magic">
            <summary>
            Returns the Magic field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.MajorLinkerVersion">
            <summary>
            Returns the MajorLinkerVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.MinorLinkerVersion">
            <summary>
            Returns the MinorLinkerVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfCode">
            <summary>
            Returns the SizeOfCode field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfInitializedData">
            <summary>
            Returns the SizeOfInitializedData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfUninitializedData">
            <summary>
            Returns the SizeOfUninitializedData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.AddressOfEntryPoint">
            <summary>
            Returns the AddressOfEntryPoint field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.BaseOfCode">
            <summary>
            Returns the BaseOfCode field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.BaseOfData">
            <summary>
            Returns the BaseOfData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.ImageBase">
            <summary>
            Returns the ImageBase field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SectionAlignment">
            <summary>
            Returns the SectionAlignment field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.FileAlignment">
            <summary>
            Returns the FileAlignment field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.MajorOperatingSystemVersion">
            <summary>
            Returns the MajorOperatingSystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.MinorOperatingSystemVersion">
            <summary>
            Returns the MinorOperatingSystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.MajorImageVersion">
            <summary>
            Returns the MajorImageVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.MinorImageVersion">
            <summary>
            Returns the MinorImageVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.MajorSubsystemVersion">
            <summary>
            Returns the MajorSubsystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.MinorSubsystemVersion">
            <summary>
            Returns the MinorSubsystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.Win32VersionValue">
            <summary>
            Returns the Win32VersionValue field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfImage">
            <summary>
            Returns the SizeOfImage field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfHeaders">
            <summary>
            Returns the SizeOfHeaders field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.CheckSum">
            <summary>
            Returns the CheckSum field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.Subsystem">
            <summary>
            Returns the Subsystem field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.DllCharacteristics">
            <summary>
            Returns the DllCharacteristics field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfStackReserve">
            <summary>
            Returns the SizeOfStackReserve field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfStackCommit">
            <summary>
            Returns the SizeOfStackCommit field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfHeapReserve">
            <summary>
            Returns the SizeOfHeapReserve field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfHeapCommit">
            <summary>
            Returns the SizeOfHeapCommit field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.LoaderFlags">
            <summary>
            Returns the LoaderFlags field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.NumberOfRvaAndSizes">
            <summary>
            Returns the NumberOfRvaAndSizes field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.DataDirectories">
            <summary>
            Returns the DataDirectories field. This array contains exactly 16 elements.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageDataDirectory">
            <summary>
            Represents the IMAGE_DATA_DIRECTORY PE section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDataDirectory.VirtualAddress">
            <summary>
            Returns the IMAGE_DATA_DIRECTORY.VirtualAddress field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDataDirectory.Size">
            <summary>
            Returns the IMAGE_DATA_DIRECTORY.Size field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageDataDirectory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageDataDirectory.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory">
            <summary>
            A <c>IMAGE_DEBUG_DIRECTORY</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.Characteristics">
            <summary>
            Gets the characteristics (reserved)
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.TimeDateStamp">
            <summary>
            Gets the timestamp
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.MajorVersion">
            <summary>
            Gets the major version
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.MinorVersion">
            <summary>
            Gets the minor version
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.SizeOfData">
            <summary>
            Gets the size of data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.AddressOfRawData">
            <summary>
            RVA of the data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.PointerToRawData">
            <summary>
            File offset of the data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageDebugDirectory.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageDebugType">
            <summary>
            Image debug type, see <c>IMAGE_DEBUG_TYPE_*</c> in winnt.n
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.ImageDebugType.CodeView">
            <summary>
            Contains PDB info
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.ImageDebugType.Reproducible">
            <summary>
            It's a deterministic (reproducible) PE file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.ImageDebugType.EmbeddedPortablePdb">
            <summary>
            Embedded portable PDB data
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.ImageDebugType.PdbChecksum">
            <summary>
            Checksum of the PDB file. 0 or more entries allowed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageDosHeader">
            <summary>
            Represents the IMAGE_DOS_HEADER PE section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageDosHeader.NTHeadersOffset">
            <summary>
            File offset of the NT headers
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageDosHeader.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader">
            <summary>
            Represents the IMAGE_FILE_HEADER PE section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader.Machine">
            <summary>
            Returns the IMAGE_FILE_HEADER.Machine field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader.NumberOfSections">
            <summary>
            Returns the IMAGE_FILE_HEADER.NumberOfSections field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader.TimeDateStamp">
            <summary>
            Returns the IMAGE_FILE_HEADER.TimeDateStamp field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader.PointerToSymbolTable">
            <summary>
            Returns the IMAGE_FILE_HEADER.PointerToSymbolTable field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader.NumberOfSymbols">
            <summary>
            Returns the IMAGE_FILE_HEADER.NumberOfSymbols field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader.SizeOfOptionalHeader">
            <summary>
            Returns the IMAGE_FILE_HEADER.SizeOfOptionalHeader field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader.Characteristics">
            <summary>
            Returns the IMAGE_FILE_HEADER.Characteristics field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageFileHeader.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageNTHeaders">
            <summary>
            Represents the IMAGE_NT_HEADERS PE section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageNTHeaders.Signature">
            <summary>
            Returns the IMAGE_NT_HEADERS.Signature field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageNTHeaders.FileHeader">
            <summary>
            Returns the IMAGE_NT_HEADERS.FileHeader field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageNTHeaders.OptionalHeader">
            <summary>
            Returns the IMAGE_NT_HEADERS.OptionalHeader field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageNTHeaders.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageNTHeaders.CreateImageOptionalHeader(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Creates an IImageOptionalHeader
            </summary>
            <param name="reader">PE file reader pointing to the start of the optional header</param>
            <param name="verify">Verify section</param>
            <returns>The created IImageOptionalHeader</returns>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32">
            <summary>
            Represents the IMAGE_OPTIONAL_HEADER (32-bit) PE section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.Magic">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.Magic field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.MajorLinkerVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.MajorLinkerVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.MinorLinkerVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.MinorLinkerVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfCode">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfCode field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfInitializedData">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfInitializedData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfUninitializedData">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfUninitializedData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.AddressOfEntryPoint">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.AddressOfEntryPoint field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.BaseOfCode">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.BaseOfCode field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.BaseOfData">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.BaseOfData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.ImageBase">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.ImageBase field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SectionAlignment">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SectionAlignment field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.FileAlignment">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.FileAlignment field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.MajorOperatingSystemVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.MajorOperatingSystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.MinorOperatingSystemVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.MinorOperatingSystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.MajorImageVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.MajorImageVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.MinorImageVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.MinorImageVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.MajorSubsystemVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.MajorSubsystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.MinorSubsystemVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.MinorSubsystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.Win32VersionValue">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.Win32VersionValue field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfImage">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfImage field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfHeaders">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfHeaders field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.CheckSum">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.CheckSum field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.Subsystem">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.Subsystem field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.DllCharacteristics">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.DllCharacteristics field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfStackReserve">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfStackReserve field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfStackCommit">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfStackCommit field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfHeapReserve">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfHeapReserve field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.SizeOfHeapCommit">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.SizeOfHeapCommit field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.LoaderFlags">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.LoaderFlags field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.NumberOfRvaAndSizes">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.NumberOfRvaAndSizes field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.DataDirectories">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER.DataDirectories field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader32.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="totalSize">Total size of this optional header (from the file header)</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64">
            <summary>
            Represents the IMAGE_OPTIONAL_HEADER64 PE section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.Magic">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.Magic field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.MajorLinkerVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.MajorLinkerVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.MinorLinkerVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.MinorLinkerVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfCode">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfCode field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfInitializedData">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfInitializedData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfUninitializedData">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfUninitializedData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.AddressOfEntryPoint">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.AddressOfEntryPoint field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.BaseOfCode">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.BaseOfCode field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.BaseOfData">
            <summary>
            Returns 0 since BaseOfData is not present in IMAGE_OPTIONAL_HEADER64
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.ImageBase">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.ImageBase field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SectionAlignment">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SectionAlignment field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.FileAlignment">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.FileAlignment field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.MajorOperatingSystemVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.MajorOperatingSystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.MinorOperatingSystemVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.MinorOperatingSystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.MajorImageVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.MajorImageVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.MinorImageVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.MinorImageVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.MajorSubsystemVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.MajorSubsystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.MinorSubsystemVersion">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.MinorSubsystemVersion field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.Win32VersionValue">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.Win32VersionValue field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfImage">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfImage field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfHeaders">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfHeaders field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.CheckSum">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.CheckSum field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.Subsystem">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.Subsystem field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.DllCharacteristics">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.DllCharacteristics field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfStackReserve">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfStackCommit">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfHeapReserve">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.SizeOfHeapCommit">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.LoaderFlags">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.LoaderFlags field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.NumberOfRvaAndSizes">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.NumberOfRvaAndSizes field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.DataDirectories">
            <summary>
            Returns the IMAGE_OPTIONAL_HEADER64.DataDirectories field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageOptionalHeader64.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="totalSize">Total size of this optional header (from the file header)</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader">
            <summary>
            Represents the IMAGE_SECTION_HEADER PE section
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.DisplayName">
            <summary>
            Returns the human readable section name, ignoring everything after
            the first nul byte
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.Name">
            <summary>
            Returns the IMAGE_SECTION_HEADER.Name field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.VirtualSize">
            <summary>
            Returns the IMAGE_SECTION_HEADER.VirtualSize field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.VirtualAddress">
            <summary>
            Returns the IMAGE_SECTION_HEADER.VirtualAddress field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.SizeOfRawData">
            <summary>
            Returns the IMAGE_SECTION_HEADER.SizeOfRawData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.PointerToRawData">
            <summary>
            Returns the IMAGE_SECTION_HEADER.PointerToRawData field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.PointerToRelocations">
            <summary>
            Returns the IMAGE_SECTION_HEADER.PointerToRelocations field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.PointerToLinenumbers">
            <summary>
            Returns the IMAGE_SECTION_HEADER.PointerToLinenumbers field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.NumberOfRelocations">
            <summary>
            Returns the IMAGE_SECTION_HEADER.NumberOfRelocations field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.NumberOfLinenumbers">
            <summary>
            Returns the IMAGE_SECTION_HEADER.NumberOfLinenumbers field
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.Characteristics">
            <summary>
            Returns the IMAGE_SECTION_HEADER.Characteristics field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify section</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.IRvaFileOffsetConverter">
            <summary>
            Converts <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/>s to/from <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/>s
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IRvaFileOffsetConverter.ToRVA(Datadog.Trace.Vendors.dnlib.IO.FileOffset)">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/> to an <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/>, returns 0 if out of range
            </summary>
            <param name="offset">The file offset to convert</param>
            <returns>The RVA</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IRvaFileOffsetConverter.ToFileOffset(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Converts an <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/>, returns 0 if out of range
            </summary>
            <param name="rva">The RVA to convert</param>
            <returns>The file offset</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.IPEImage">
            <summary>
            Interface to access a PE image
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.IsFileImageLayout">
            <summary>
            <c>true</c> if image layout is the same as the raw PE image layout, <c>false</c>
            if it's the same layout as a PE image loaded by the OS PE loader.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.MayHaveInvalidAddresses">
            <summary>
            <c>true</c> if some of the memory where the image is located could be unavailable.
            This could happen if it's been loaded by the OS loader.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.Filename">
            <summary>
            The filename or null if the data is not from a file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.ImageDosHeader">
            <summary>
            Returns the DOS header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.ImageNTHeaders">
            <summary>
            Returns the NT headers
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.ImageSectionHeaders">
            <summary>
            Returns the section headers
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.ImageDebugDirectories">
            <summary>
            Returns the debug directories
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.Win32Resources">
            <summary>
            Gets/sets the Win32 resources. This is <c>null</c> if there are no Win32 resources.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IPEImage.DataReaderFactory">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> factory
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IPEImage.CreateReader(Datadog.Trace.Vendors.dnlib.IO.FileOffset)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> from <paramref name="offset"/> to the end of the image
            </summary>
            <param name="offset">Offset of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IPEImage.CreateReader(Datadog.Trace.Vendors.dnlib.IO.FileOffset,System.UInt32)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/>
            </summary>
            <param name="offset">Offset of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IPEImage.CreateReader(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> from <paramref name="rva"/> to the end of the image
            </summary>
            <param name="rva">RVA of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IPEImage.CreateReader(Datadog.Trace.Vendors.dnlib.PE.RVA,System.UInt32)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/>
            </summary>
            <param name="rva">RVA of data</param>
            <param name="length">Length of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IPEImage.CreateReader">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.DataReader"/> that can read the whole image
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.IInternalPEImage">
            <summary>
            Interface to access a PE image
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IInternalPEImage.UnsafeDisableMemoryMappedIO">
            <summary>
            Call this to disable memory mapped I/O if it was used to open the file. This must only
            be called if no other code is trying to access the memory since that could lead to an
            exception.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.IInternalPEImage.IsMemoryMappedIO">
            <summary>
            <c>true</c> if memory mapped I/O is enabled
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.PEExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEExtensions.FindWin32ResourceData(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>
            </summary>
            <param name="self">this</param>
            <param name="type">Type</param>
            <param name="name">Name</param>
            <param name="langId">Language ID</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEExtensions.CalculatePECheckSum(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Calculates a PE checksum
            </summary>
            <param name="stream">PE image stream positioned at the MZ bytes</param>
            <param name="length">Length of image</param>
            <param name="checkSumOffset">Offset of checksum</param>
            <returns>PE checksum</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEExtensions.AlignUp(Datadog.Trace.Vendors.dnlib.PE.RVA,System.UInt32)">
            <summary>
            Align up
            </summary>
            <param name="rva">this</param>
            <param name="alignment">Alignment</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEExtensions.AlignUp(Datadog.Trace.Vendors.dnlib.PE.RVA,System.Int32)">
            <summary>
            Align up
            </summary>
            <param name="rva">this</param>
            <param name="alignment">Alignment</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.IPEType">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/> to/from an <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IPEType.ToRVA(Datadog.Trace.Vendors.dnlib.PE.PEInfo,Datadog.Trace.Vendors.dnlib.IO.FileOffset)">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/> to an <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/>, returns 0 if out of range
            </summary>
            <param name="peInfo">The PEInfo context</param>
            <param name="offset">The file offset to convert</param>
            <returns>The RVA</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.IPEType.ToFileOffset(Datadog.Trace.Vendors.dnlib.PE.PEInfo,Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Converts an <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/>, returns 0 if out of range
            </summary>
            <param name="peInfo">The PEInfo context</param>
            <param name="rva">The RVA to convert</param>
            <returns>The file offset</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.Machine">
            <summary>
            IMAGE_FILE_HEADER.Machine enum
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.Unknown">
            <summary>Unknown machine</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.I386">
            <summary>x86</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.R3000">
            <summary>MIPS little-endian, 0x160 big-endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.R4000">
            <summary>MIPS little-endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.R10000">
            <summary>MIPS little-endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.WCEMIPSV2">
            <summary>MIPS little-endian WCE v2</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ALPHA">
            <summary>Alpha_AXP</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.SH3">
            <summary>SH3 little-endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.SH3DSP">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.SH3E">
            <summary>SH3E little-endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.SH4">
            <summary>SH4 little-endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.SH5">
            <summary>SH5</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARM">
            <summary>ARM Little-Endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.THUMB">
            <summary>ARM Thumb/Thumb-2 Little-Endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARMNT">
            <summary>ARM Thumb-2 Little-Endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.AM33">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.POWERPC">
            <summary>IBM PowerPC Little-Endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.POWERPCFP">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.IA64">
            <summary>IA-64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.MIPS16">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ALPHA64">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.MIPSFPU">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.MIPSFPU16">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.TRICORE">
            <summary>Infineon</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.CEF">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.EBC">
            <summary>EFI Byte Code</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.AMD64">
            <summary>x64</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.M32R">
            <summary>M32R little-endian</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARM64">
            <summary></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Machine.CEE">
            <summary></summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.MachineExtensions">
            <summary>
            Extensions
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.MachineExtensions.Is64Bit(Datadog.Trace.Vendors.dnlib.PE.Machine)">
            <summary>
            Checks if <paramref name="machine"/> is a 64-bit machine
            </summary>
            <param name="machine">Machine</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.MachineExtensions.IsI386(Datadog.Trace.Vendors.dnlib.PE.Machine)">
            <summary>
            Checks if <paramref name="machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.I386"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.I386_Native_Apple"/>, etc...
            </summary>
            <param name="machine">Machine</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.MachineExtensions.IsAMD64(Datadog.Trace.Vendors.dnlib.PE.Machine)">
            <summary>
            Checks if <paramref name="machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.AMD64"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.AMD64_Native_Apple"/>, etc...
            </summary>
            <param name="machine">Machine</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.MachineExtensions.IsARMNT(Datadog.Trace.Vendors.dnlib.PE.Machine)">
            <summary>
            Checks if <paramref name="machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARMNT"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARMNT_Native_Apple"/>, etc...
            </summary>
            <param name="machine">Machine</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.MachineExtensions.IsARM64(Datadog.Trace.Vendors.dnlib.PE.Machine)">
            <summary>
            Checks if <paramref name="machine"/> is <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARM64"/>, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.ARM64_Native_Apple"/>, etc...
            </summary>
            <param name="machine">Machine</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.MachineExtensions.IsS390x(Datadog.Trace.Vendors.dnlib.PE.Machine)">
            <summary>
            Checks if <paramref name="machine"/> is s390x, <see cref="F:Datadog.Trace.Vendors.dnlib.PE.Machine.S390X_Native_Apple"/>, etc...
            </summary>
            <param name="machine">Machine</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.ImageLayout">
            <summary>
            Image layout
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.ImageLayout.File">
            <summary>
            Use this if the PE file has a normal structure (eg. it's been read from a file on disk)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.ImageLayout.Memory">
            <summary>
            Use this if the PE file has been loaded into memory by the OS PE file loader
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.PEImage">
            <summary>
            Accesses a PE file
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.IsFileImageLayout">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.MayHaveInvalidAddresses">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.Filename">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.ImageDosHeader">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.ImageNTHeaders">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.ImageSectionHeaders">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.ImageDebugDirectories">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.DataReaderFactory">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEImage.Win32Resources">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,Datadog.Trace.Vendors.dnlib.PE.ImageLayout,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="dataReaderFactory">Data reader factory</param>
            <param name="imageLayout">Image layout</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="filename">Name of the file</param>
            <param name="mapAsImage"><c>true</c> if we should map it as an executable</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="filename">Name of the file</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">Name of the file</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.Byte[],System.String,Datadog.Trace.Vendors.dnlib.PE.ImageLayout,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="data">The PE file data</param>
            <param name="filename">Filename or null</param>
            <param name="imageLayout">Image layout</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.Byte[],Datadog.Trace.Vendors.dnlib.PE.ImageLayout,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="data">The PE file data</param>
            <param name="imageLayout">Image layout</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="data">The PE file data</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.Byte[],System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="data">The PE file data</param>
            <param name="filename">Filename or null</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">The PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.Byte[],System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">The PE file data</param>
            <param name="filename">Filename or null</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.IntPtr,System.UInt32,Datadog.Trace.Vendors.dnlib.PE.ImageLayout,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="baseAddr">Address of PE image</param>
            <param name="length">Length of PE image</param>
            <param name="imageLayout">Image layout</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="baseAddr">Address of PE image</param>
            <param name="length">Length of PE image</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="baseAddr">Address of PE image</param>
            <param name="length">Length of PE image</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.IntPtr,Datadog.Trace.Vendors.dnlib.PE.ImageLayout,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="baseAddr">Address of PE image</param>
            <param name="imageLayout">Image layout</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="baseAddr">Address of PE image</param>
            <param name="verify">Verify PE file data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="baseAddr">Address of PE image</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.ToRVA(Datadog.Trace.Vendors.dnlib.IO.FileOffset)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.ToFileOffset(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.CreateReader(Datadog.Trace.Vendors.dnlib.IO.FileOffset)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.CreateReader(Datadog.Trace.Vendors.dnlib.IO.FileOffset,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.CreateReader(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.CreateReader(Datadog.Trace.Vendors.dnlib.PE.RVA,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEImage.CreateReader">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.PEInfo">
            <summary>
            Reads all PE sections from a PE stream, for more information see https://docs.microsoft.com/en-us/windows/win32/debug/pe-format
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEInfo.ImageDosHeader">
            <summary>
            Returns the DOS header
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEInfo.ImageNTHeaders">
            <summary>
            Returns the NT headers
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.PE.PEInfo.ImageSectionHeaders">
            <summary>
            Returns the section headers
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEInfo.#ctor(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader">PE file reader pointing to the start of this section</param>
            <param name="verify">Verify sections</param>
            <exception cref="T:System.BadImageFormatException">Thrown if verification fails</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEInfo.ToImageSectionHeader(Datadog.Trace.Vendors.dnlib.IO.FileOffset)">
            <summary>
            Returns the first <see cref="T:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader"/> that has data at file offset
            <paramref name="offset"/>
            </summary>
            <param name="offset">The file offset</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEInfo.ToImageSectionHeader(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Returns the first <see cref="T:Datadog.Trace.Vendors.dnlib.PE.ImageSectionHeader"/> that has data at RVA
            <paramref name="rva"/>
            </summary>
            <param name="rva">The RVA</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEInfo.ToRVA(Datadog.Trace.Vendors.dnlib.IO.FileOffset)">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/> to an <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/>, returns 0 if out of range
            </summary>
            <param name="offset">The file offset to convert</param>
            <returns>The RVA</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEInfo.ToFileOffset(Datadog.Trace.Vendors.dnlib.PE.RVA)">
            <summary>
            Converts an <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/> to a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/>, returns 0 if out of range
            </summary>
            <param name="rva">The RVA to convert</param>
            <returns>The file offset</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.PE.PEInfo.GetImageSize">
            <summary>
            Returns size of image rounded up to <see cref="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SectionAlignment"/>
            </summary>
            <remarks>It calculates the size itself, and does not return <see cref="P:Datadog.Trace.Vendors.dnlib.PE.IImageOptionalHeader.SizeOfImage"/></remarks>
            <returns>Size of image in bytes</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.RVA">
            <summary>
            Represents an RVA (relative virtual address)
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.PE.Subsystem">
            <summary>
            IMAGE_OPTIONAL_HEADER.Subsystem
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.Unknown">
            <summary>Unknown subsystem.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.Native">
            <summary>Image doesn't require a subsystem.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.WindowsGui">
            <summary>Image runs in the Windows GUI subsystem.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.WindowsCui">
            <summary>Image runs in the Windows character subsystem.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.Os2Cui">
            <summary>image runs in the OS/2 character subsystem.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.PosixCui">
            <summary>image runs in the Posix character subsystem.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.NativeWindows">
            <summary>image is a native Win9x driver.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.WindowsCeGui">
            <summary>Image runs in the Windows CE subsystem.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.EfiApplication">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.EfiBootServiceDriver">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.EfiRuntimeDriver">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.EfiRom">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.Xbox">
            <summary/>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.PE.Subsystem.WindowsBootApplication">
            <summary/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Settings">
            <summary>
            dnlib settings
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Settings.IsThreadSafe">
            <summary>
            <c>true</c> if dnlib is thread safe. (<c>THREAD_SAFE</c> was defined during compilation)
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Threading.ICancellationToken">
            <summary>
            Cancellation token interface
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Threading.ICancellationToken.ThrowIfCancellationRequested">
            <summary>
            Throws a <see cref="T:System.OperationCanceledException"/> if the operation should be canceled
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Threading.Lock">
            <summary>
            Simple class using Monitor.Enter() and Monitor.Exit()
            and just like <c>ReaderWriterLockSlim</c> it prevents recursive locks. It doesn't support
            multiple readers. A reader lock is the same as a writer lock.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Threading.Lock.Create">
            <summary>
            Creates a new instance of this class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Threading.Lock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Threading.Lock.EnterReadLock">
            <summary>
            Enter read mode
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Threading.Lock.ExitReadLock">
            <summary>
            Exit read mode
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Threading.Lock.EnterWriteLock">
            <summary>
            Enter write mode
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Threading.Lock.ExitWriteLock">
            <summary>
            Exit write mode
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.ILazyList`1">
            <summary>
            Interface to access a lazily initialized list
            </summary>
            <typeparam name="TValue">Type to store in list</typeparam>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.IListListener`1">
            <summary>
            Gets notified of list events
            </summary>
            <typeparam name="TListValue">List value</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.IListListener`1.OnLazyAdd(System.Int32,`0@)">
            <summary>
            Called before a new value is lazily added to the list.
            </summary>
            <remarks>If you must access this list, you can only call <c>_NoLock()</c> methods
            since a write lock is now held by this thread.</remarks>
            <param name="index">Index where the value will be added</param>
            <param name="value">Value that will be added to the list. It can be modified by
            the callee.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.IListListener`1.OnAdd(System.Int32,`0)">
            <summary>
            Called before a new value is added to the list.
            </summary>
            <remarks>If you must access this list, you can only call <c>_NoLock()</c> methods
            since a write lock is now held by this thread.</remarks>
            <param name="index">Index where the value will be added</param>
            <param name="value">Value that will be added to the list</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.IListListener`1.OnRemove(System.Int32,`0)">
            <summary>
            Called before a value is removed from the list. If all elements are removed,
            <see cref="M:Datadog.Trace.Vendors.dnlib.Utils.IListListener`1.OnClear"/> is called, and this method is not called.
            </summary>
            <remarks>If you must access this list, you can only call <c>_NoLock()</c> methods
            since a write lock is now held by this thread.</remarks>
            <param name="index">Index of value</param>
            <param name="value">The value that will be removed</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.IListListener`1.OnResize(System.Int32)">
            <summary>
            Called after the list has been resized (eg. an element has been added/removed). It's not
            called when an element is replaced.
            </summary>
            <remarks>If you must access this list, you can only call <c>_NoLock()</c> methods
            since a write lock is now held by this thread.</remarks>
            <param name="index">Index where the change occurred.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.IListListener`1.OnClear">
            <summary>
            Called before the whole list is cleared.
            </summary>
            <remarks>If you must access this list, you can only call <c>_NoLock()</c> methods
            since a write lock is now held by this thread.</remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1">
            <summary>
            Implements a <see cref="T:System.Collections.Generic.IList`1"/> that is lazily initialized
            </summary>
            <typeparam name="TValue">Type to store in list</typeparam>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Element">
            <summary>
            Stores a simple value
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Element.IsInitialized_NoLock">
            <summary>
            <c>true</c> if it has been initialized, <c>false</c> otherwise
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Element.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Element.#ctor(`0)">
            <summary>
            Constructor that should be used when new elements are inserted into <see cref="T:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1"/>
            </summary>
            <param name="data">User data</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Element.GetValue_NoLock(System.Int32)">
            <summary>
            Gets the value
            </summary>
            <param name="index">Index in the list</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Element.SetValue_NoLock(System.Int32,`0)">
            <summary>
            Sets the value
            </summary>
            <param name="index">Index in the list</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Element.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Count_NoLock">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.#ctor(Datadog.Trace.Vendors.dnlib.Utils.IListListener{`0})">
            <summary>
            Constructor
            </summary>
            <param name="listener">List listener</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Enumerator">
            <summary>
            Enumerator
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Enumerator.Current">
            <summary>
            Gets the current value
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Enumerator.MoveNext">
            <summary>
            Moves to the next element in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.Enumerator.Dispose">
            <summary>
            Disposes the enumerator
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.GetEnumerator">
            <summary>
            Gets the list enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2">
            <summary>
            Implements a <see cref="T:System.Collections.Generic.IList`1"/> that is lazily initialized
            </summary>
            <typeparam name="TValue">Type to store in list</typeparam>
            <typeparam name="TContext">Type of the context passed to the read-value delegate</typeparam>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.LazyElement">
            <summary>
            Stores data and keeps track of the original index and whether the data has been
            initialized or not.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.LazyElement.IsInitialized_NoLock">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.LazyElement.GetValue_NoLock(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.LazyElement.SetValue_NoLock(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.LazyElement.#ctor(System.Int32,Datadog.Trace.Vendors.dnlib.Utils.LazyList{`0,`1})">
            <summary>
            Constructor that should only be called when <see cref="T:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2"/> is initialized.
            </summary>
            <param name="origIndex">Original index of this element</param>
            <param name="lazyList">LazyList instance</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.LazyElement.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.#ctor(Datadog.Trace.Vendors.dnlib.Utils.IListListener{`0})">
            <summary>
            Constructor
            </summary>
            <param name="listener">List listener</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.#ctor(System.Int32,`1,System.Func{`1,System.Int32,`0})">
            <summary>
            Constructor
            </summary>
            <param name="length">Initial length of the list</param>
            <param name="context">Context passed to <paramref name="readOriginalValue"/></param>
            <param name="readOriginalValue">Delegate instance that returns original values</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.LazyList`2.#ctor(System.Int32,Datadog.Trace.Vendors.dnlib.Utils.IListListener{`0},`1,System.Func{`1,System.Int32,`0})">
            <summary>
            Constructor
            </summary>
            <param name="length">Initial length of the list</param>
            <param name="listener">List listener</param>
            <param name="context">Context passed to <paramref name="readOriginalValue"/></param>
            <param name="readOriginalValue">Delegate instance that returns original values</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.SimpleLazyList`1">
            <summary>
            A readonly list that gets initialized lazily
            </summary>
            <typeparam name="T">Any class type</typeparam>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.SimpleLazyList`1.Length">
            <summary>
            Gets the length of this list
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.SimpleLazyList`1.Item(System.UInt32)">
            <summary>
            Access the list
            </summary>
            <param name="index">Index</param>
            <returns>The element or <c>null</c> if <paramref name="index"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.SimpleLazyList`1.#ctor(System.UInt32,System.Func{System.UInt32,`0})">
            <summary>
            Constructor
            </summary>
            <param name="length">Length of the list</param>
            <param name="readElementByRID">Delegate instance that lazily reads an element. It might
            be called more than once for each <c>rid</c> in rare cases. It must never return
            <c>null</c>.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.SimpleLazyList2`1">
            <summary>
            A readonly list that gets initialized lazily
            </summary>
            <typeparam name="T">Any class type</typeparam>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.SimpleLazyList2`1.Length">
            <summary>
            Gets the length of this list
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.SimpleLazyList2`1.Item(System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext)">
            <summary>
            Access the list
            </summary>
            <param name="index">Index</param>
            <param name="gpContext">Generic parameter context</param>
            <returns>The element or <c>null</c> if <paramref name="index"/> is invalid</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.Utils.SimpleLazyList2`1.#ctor(System.UInt32,System.Func{System.UInt32,Datadog.Trace.Vendors.dnlib.DotNet.GenericParamContext,`0})">
            <summary>
            Constructor
            </summary>
            <param name="length">Length of the list</param>
            <param name="readElementByRID">Delegate instance that lazily reads an element. It might
            be called more than once for each <c>rid</c>. It must never return <c>null</c>.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.Utils.UserValue`1">
            <summary>
            Lazily returns the original value if the user hasn't overwritten the value
            </summary>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.UserValue`1.Lock">
            <summary>
            Sets the lock that protects the data
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.UserValue`1.ReadOriginalValue">
            <summary>
            Set a delegate instance that will return the original value
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.UserValue`1.Value">
            <summary>
            Gets/sets the value
            </summary>
            <remarks>The getter returns the original value if the value hasn't been initialized.</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.UserValue`1.IsValueInitialized">
            <summary>
            Returns <c>true</c> if the value has been initialized
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.Utils.UserValue`1.IsUserValue">
            <summary>
            Returns <c>true</c> if the value was set by the user
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData">
            <summary>
            A resource blob
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData.CreateReader">
            <summary>
            Gets the data reader
            </summary>
            <returns></returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData.CodePage">
            <summary>
            Gets/sets the code page
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData.Reserved">
            <summary>
            Gets/sets the reserved field
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData.#ctor(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData.#ctor(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="dataReaderFactory">Data reader factory</param>
            <param name="offset">Offset of resource data</param>
            <param name="length">Length of resource data</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData.#ctor(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="dataReaderFactory">Data reader factory</param>
            <param name="offset">Offset of resource data</param>
            <param name="length">Length of resource data</param>
            <param name="name">Name</param>
            <param name="codePage">Code page</param>
            <param name="reserved">Reserved value</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory">
            <summary>
            A Win32 resource directory (see IMAGE_RESOURCE_DIRECTORY in the Windows SDK)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.characteristics">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.Characteristics"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.timeDateStamp">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.TimeDateStamp"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.majorVersion">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.MajorVersion"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.minorVersion">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.MinorVersion"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.directories">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.Directories"/></summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.data">
            <summary>See <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.Data"/></summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.Characteristics">
            <summary>
            Gets/sets the characteristics
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.TimeDateStamp">
            <summary>
            Gets/sets the time date stamp
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.MajorVersion">
            <summary>
            Gets/sets the major version number
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.MinorVersion">
            <summary>
            Gets/sets the minor version number
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.Directories">
            <summary>
            Gets all directory entries
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.Data">
            <summary>
            Gets all resource data
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.#ctor(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.FindDirectory(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/> by name
            </summary>
            <param name="name">Name</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/> or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.FindData(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/> by name
            </summary>
            <param name="name">Name</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/> or <c>null</c> if it wasn't found</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryUser">
            <summary>
            A Win32 resource directory created by the user
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryUser.#ctor(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE">
            <summary>
            A Win32 resource directory created from a PE file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.MAX_DIR_DEPTH">
            <summary>
            To make sure we don't get stuck in an infinite loop, don't allow more than this
            many sub directories.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.resources">
            <summary>Owner</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.depth">
            <summary>Directory depth. When creating more <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE"/>'s,
            the instances get this value + 1</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.dataInfos">
            <summary>
            Info about all <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>'s we haven't created yet
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.dirInfos">
            <summary>
            Info about all <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/>'s we haven't created yet
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.EntryInfo.offset">
            <summary>Offset of resource directory / data</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.#ctor(System.UInt32,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE,Datadog.Trace.Vendors.dnlib.IO.DataReader@)">
            <summary>
            Constructor
            </summary>
            <param name="depth">Starts from 0. If it's big enough, we'll stop reading more data.</param>
            <param name="name">Name</param>
            <param name="resources">Resources</param>
            <param name="reader">Reader positioned at the start of this resource directory</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.Initialize(Datadog.Trace.Vendors.dnlib.IO.DataReader@)">
            <summary>
            Reads the directory header and initializes <see cref="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.directories"/> and
            <see cref="F:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory.data"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryPE.ReadString(Datadog.Trace.Vendors.dnlib.IO.DataReader@,System.UInt32)">
            <summary>
            Reads a string
            </summary>
            <param name="reader">Reader</param>
            <param name="offset">Offset of string</param>
            <returns>The string or <c>null</c> if we could not read it</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry">
            <summary>
            Base class of <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/> and <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry.Name">
            <summary>
            Gets/sets the name
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry.#ctor(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectoryEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName">
            <summary>
            A Win32 resource name. It can be either an integer or a string.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.HasId">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.Id"/> is valid
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.HasName">
            <summary>
            <c>true</c> if <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.Name"/> is valid
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.Id">
            <summary>
            The ID. It's only valid if <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.HasId"/> is <c>true</c>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.Name">
            <summary>
            The name. It's only valid if <see cref="P:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.HasName"/> is <c>true</c>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id">ID</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.op_Implicit(System.Int32)~Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName">
            <summary>Converts input to a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.op_Implicit(System.String)~Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName">
            <summary>Converts input to a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName"/></summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.op_LessThan(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.op_LessThanOrEqual(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.op_GreaterThan(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.op_GreaterThanOrEqual(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.op_Equality(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.op_Inequality(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.CompareTo(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.Equals(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources">
            <summary>
            Win32 resources base class
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources.Root">
            <summary>
            Gets/sets the root directory
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources.Find(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/>
            </summary>
            <param name="type">Type</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources.Find(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/>
            </summary>
            <param name="type">Type</param>
            <param name="name">Name</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources.Find(Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName,Datadog.Trace.Vendors.dnlib.W32Resources.ResourceName)">
            <summary>
            Finds a <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>
            </summary>
            <param name="type">Type</param>
            <param name="name">Name</param>
            <param name="langId">Language ID</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/> or <c>null</c> if none found</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing"><c>true</c> if called by <see cref="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32Resources.Dispose"/></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesUser">
            <summary>
            Win32 resources class created by the user
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesUser.Root">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE">
            <summary>
            Win32 resources class created from a PE file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.rvaConverter">
            <summary>
            Converts data RVAs to file offsets in <see cref="F:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.dataReader_factory"/>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.dataReader_factory">
            <summary>
            This reader only reads the raw data. The data RVA is found in the data header and
            it's first converted to a file offset using <see cref="F:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.rvaConverter"/>. This file
            offset is where we'll read from using this reader.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.rsrcReader_factory">
            <summary>
            This reader only reads the directory entries and data headers. The data is read
            by <see cref="F:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.dataReader_factory"/>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.Root">
            <inheritdoc/>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.GetResourceReader">
            <summary>
            Gets the resource reader
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.#ctor(Datadog.Trace.Vendors.dnlib.PE.IRvaFileOffsetConverter,Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,System.UInt32,System.Boolean,Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="rvaConverter"><see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/>/<see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/> converter</param>
            <param name="rsrcReader_factory">Reader for the whole Win32 resources section (usually
            the .rsrc section). It's used to read <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceDirectory"/>'s and
            <see cref="T:Datadog.Trace.Vendors.dnlib.W32Resources.ResourceData"/>'s but not the actual data blob.</param>
            <param name="rsrcReader_offset">Offset of resource section</param>
            <param name="rsrcReader_length">Length of resource section</param>
            <param name="owns_rsrcReader_factory">true if this instance can dispose of <paramref name="rsrcReader_factory"/></param>
            <param name="dataReader_factory">Data reader (it's used after converting an <see cref="T:Datadog.Trace.Vendors.dnlib.PE.RVA"/>
            to a <see cref="T:Datadog.Trace.Vendors.dnlib.IO.FileOffset"/>)</param>
            <param name="dataReader_offset">Offset of resource section</param>
            <param name="dataReader_length">Length of resource section</param>
            <param name="owns_dataReader_factory">true if this instance can dispose of <paramref name="dataReader_factory"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.#ctor(Datadog.Trace.Vendors.dnlib.PE.IPEImage)">
            <summary>
            Constructor
            </summary>
            <param name="peImage">The PE image</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.#ctor(Datadog.Trace.Vendors.dnlib.PE.IPEImage,Datadog.Trace.Vendors.dnlib.IO.DataReaderFactory,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="peImage">The PE image</param>
            <param name="rsrcReader_factory">Reader for the whole Win32 resources section (usually
            the .rsrc section) or <c>null</c> if we should create one from the resource data
            directory in the optional header</param>
            <param name="rsrcReader_offset">Offset of resource section</param>
            <param name="rsrcReader_length">Length of resource section</param>
            <param name="owns_rsrcReader_factory">true if this instance can dispose of <paramref name="rsrcReader_factory"/></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.CreateReader(Datadog.Trace.Vendors.dnlib.PE.RVA,System.UInt32)">
            <summary>
            Creates a new data reader
            </summary>
            <param name="rva">RVA of data</param>
            <param name="size">Size of data</param>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.dnlib.W32Resources.Win32ResourcesPE.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2">
            <summary>
            Provides general helpers for creating collections (including dictionaries).
            </summary>
            <typeparam name="TCollection">The concrete type of collection to create.</typeparam>
            <typeparam name="TEqualityComparer">The type of equality comparer that we would hope to pass into the collection's constructor.</typeparam>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2.collectionCreator">
            <summary>
            The delegate that will create the collection, if the typical (int count, IEqualityComparer{T} equalityComparer) constructor was found.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2"/> class.
            </summary>
            <remarks>
            Initializes a delegate that is optimized to create a collection of a given size and using the given equality comparer, if possible.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2.CreateHashCollection(System.Int32,`1)">
            <summary>
            Initializes a new instance of the <typeparamref name="TCollection"/> collection.
            </summary>
            <param name="count">The number of elements the collection should be prepared to receive.</param>
            <param name="equalityComparer">The equality comparer to initialize the collection with.</param>
            <returns>The newly initialized collection.</returns>
            <remarks>
            Use of the <paramref name="count"/> and <paramref name="equalityComparer"/> are a best effort.
            If we can't find a constructor on the collection in the expected shape, we'll just instantiate the collection with its default constructor.
            </remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Formatters.NativeDateTimeFormatter">
            <summary>
            Serialize by .NET native DateTime binary format.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Formatters.OldSpecStringFormatter">
            <summary>
            Old-MessagePack spec's string formatter.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Formatters.OldSpecBinaryFormatter">
            <summary>
            Old-MessagePack spec's binary formatter.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Get MethodInfo from Expression for Static(with result) method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Get MethodInfo from Expression for Static(void) method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get MethodInfo from Expression for Instance(with result) method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Get MethodInfo from Expression for Instance(void) method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Get MethodInfo from Expression for Instance(with result) method.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec">
            <summary>Safe LZ4 codec.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.MEMORY_USAGE">
            <summary>
            Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
            Increasing memory usage improves compression ratio
            Reduced memory usage can improve speed, due to cache effect
            Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
            <summary>
            Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
            This may decrease compression ratio dramatically, but will be faster on incompressible data
            Increasing this value will make the algorithm search more before declaring a segment "incompressible"
            This could improve compression a bit, but will be slower on incompressible data
            The default value (6) is recommended
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Gets maximum the length of the output.</summary>
            <param name="inputLength">Length of the input.</param>
            <returns>Maximum number of bytes needed for compressed buffer.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.Encode32Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.Encode64Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.Decode32Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.Decode64Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer">
            <summary>
            LZ4 Compressed special serializer.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.Serialize``1(``0)">
            <summary>
            Serialize to binary with default resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.Serialize``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to binary with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Serialize to stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.Serialize``1(System.IO.Stream,``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to stream with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.DecodeUnsafe(System.Byte[])">
            <summary>
            Get the war memory pool byte[]. The result can not share across thread and can not hold and can not call LZ4Deserialize before use it.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.DecodeUnsafe(System.ArraySegment{System.Byte})">
            <summary>
            Get the war memory pool byte[]. The result can not share across thread and can not hold and can not call LZ4Deserialize before use it.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.ToJson``1(``0)">
            <summary>
            Dump to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.ToJson``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Dump to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.ToJson(System.Byte[])">
            <summary>
            Dump message-pack binary to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.FromJson(System.IO.TextReader)">
            <summary>
            From Json String to LZ4MessagePack binary
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackBinary">
            <summary>
            Encode/Decode Utility of MessagePack Spec.
            https://github.com/msgpack/msgpack/blob/master/spec.md
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.MaxArrayAllocationSize">
            <summary>
            A maximum allowable element count for any array or map allocated by this class
            when reading from non-seekable streams.
            The default is <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <remarks>
            When reading from a byte array or seekable streams, the actual length
            of the remaining buffer or stream is used to calculate a safe limit.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackRange.MaxFixMapCount(15), can use this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeader(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Write map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeader(System.Byte[]@,System.Int32,System.UInt32)">
            <summary>
            Write map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeaderForceMap32Block(System.Byte[]@,System.Int32,System.UInt32)">
            <summary>
            Write map format header, always use map32 format(length is fixed, 5).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMapHeader(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMapHeaderRaw(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedArrayHeaderUnsafe(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackRange.MaxFixArrayCount(15), can use this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeader(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Write array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeader(System.Byte[]@,System.Int32,System.UInt32)">
            <summary>
            Write array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeaderForceArray32Block(System.Byte[]@,System.Int32,System.UInt32)">
            <summary>
            Write array format header, always use array32 format(length is fixed, 5).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadArrayHeader(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadArrayHeaderRaw(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WritePositiveFixedIntUnsafe(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackCode.MaxFixInt(127), can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteInt32ForceInt32Block(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Acquire static message block(always 5 bytes).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedStringUnsafe(System.Byte[]@,System.Int32,System.String,System.Int32)">
            <summary>
            Unsafe. If value is guranteed length is 0 ~ 31, can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteStringUnsafe(System.Byte[]@,System.Int32,System.String,System.Int32)">
            <summary>
            Unsafe. If pre-calculated byteCount of target string, can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteExtensionFormatHeaderForceExt32Block(System.Byte[]@,System.Int32,System.SByte,System.Int32)">
            <summary>
            Write extension format header, always use ext32 format(length is fixed, 6).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadExtensionFormatHeader(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            return byte length of ExtensionFormat.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ThrowNotEnoughBytesException">
            <summary>
            Throws an exception indicating that there aren't enough bytes remaining in the buffer to store
            the promised data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMessageBlockFromStreamUnsafe(System.IO.Stream,System.Boolean,System.Int32@)">
            <summary>
            Read MessageBlock, returns byte[] block is in MemoryPool so careful to use.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(System.IO.Stream,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackRange.MaxFixMapCount(15), can use this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeader(System.IO.Stream,System.Int32)">
            <summary>
            Write map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeader(System.IO.Stream,System.UInt32)">
            <summary>
            Write map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeaderForceMap32Block(System.IO.Stream,System.UInt32)">
            <summary>
            Write map format header, always use map32 format(length is fixed, 5).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMapHeader(System.IO.Stream)">
            <summary>
            Return map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMapHeaderRaw(System.IO.Stream)">
            <summary>
            Return map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedArrayHeaderUnsafe(System.IO.Stream,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackRange.MaxFixArrayCount(15), can use this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeader(System.IO.Stream,System.Int32)">
            <summary>
            Write array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeader(System.IO.Stream,System.UInt32)">
            <summary>
            Write array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeaderForceArray32Block(System.IO.Stream,System.UInt32)">
            <summary>
            Write array format header, always use array32 format(length is fixed, 5).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadArrayHeader(System.IO.Stream)">
            <summary>
            Return array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadArrayHeaderRaw(System.IO.Stream)">
            <summary>
            Return array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WritePositiveFixedIntUnsafe(System.IO.Stream,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackCode.MaxFixInt(127), can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteInt32ForceInt32Block(System.IO.Stream,System.Int32)">
            <summary>
            Acquire static message block(always 5 bytes).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedStringUnsafe(System.IO.Stream,System.String,System.Int32)">
            <summary>
            Unsafe. If value is guranteed length is 0 ~ 31, can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteStringUnsafe(System.IO.Stream,System.String,System.Int32)">
            <summary>
            Unsafe. If pre-calculated byteCount of target string, can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteExtensionFormatHeaderForceExt32Block(System.IO.Stream,System.SByte,System.Int32)">
            <summary>
            Write extension format header, always use ext32 format(length is fixed, 6).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadExtensionFormatHeader(System.IO.Stream)">
            <summary>
            return byte length of ExtensionFormat.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackType">
            <summary>
            https://github.com/msgpack/msgpack/blob/master/spec.md#serialization-type-to-format-conversion
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackCode">
            <summary>
            https://github.com/msgpack/msgpack/blob/master/spec.md#overview
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity">
            <summary>
            Settings related to security, particularly relevant when deserializing data from untrusted sources.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.ObjectGraphDepth">
            <summary>
            The thread-local value tracking recursion for an ongoing deserialization operation.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.TrustedData">
            <summary>
            Gets an instance preconfigured with settings that omit all protections. Useful for deserializing fully-trusted and valid msgpack sequences.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.UntrustedData">
            <summary>
            Gets an instance preconfigured with protections applied with reasonable settings for deserializing untrusted msgpack sequences.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.Active">
            <summary>
            The <see cref="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity"/> instance that is active for all deserialization operations within this AppDomain or process.
            </summary>
            <value>Defaults to <see cref="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.TrustedData"/>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.#ctor(Datadog.Trace.Vendors.MessagePack.MessagePackSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity"/> class
            with properties copied from a provided template.
            </summary>
            <param name="copyFrom">The template to copy from.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant">
            <summary>
            Gets a value indicating whether data to be deserialized is untrusted and thus should not be allowed to create
            dictionaries or other hash-based collections unless the hashed type has a hash collision resistant implementation available.
            This can mitigate some denial of service attacks when deserializing untrusted code.
            </summary>
            <value>
            The value is <c>false</c> for <see cref="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.TrustedData"/> and <c>true</c> for <see cref="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.UntrustedData"/>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.MaximumObjectGraphDepth">
            <summary>
            Gets the maximum depth of an object graph that may be deserialized.
            </summary>
            <remarks>
            <para>
            This value can be reduced to avoid a stack overflow that would crash the process when deserializing a msgpack sequence designed to cause deep recursion.
            A very short callstack on a thread with 1MB of total stack space might deserialize ~2000 nested arrays before crashing due to a stack overflow.
            Since stack space occupied may vary by the kind of object deserialized, a conservative value for this property to defend against stack overflow attacks might be 500.
            </para>
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.WithMaximumObjectGraphDepth(System.Int32)">
            <summary>
            Gets a copy of these options with the <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.MaximumObjectGraphDepth"/> property set to a new value.
            </summary>
            <param name="maximumObjectGraphDepth">The new value for the <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.MaximumObjectGraphDepth"/> property.</param>
            <returns>The new instance; or the original if the value is unchanged.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.WithHashCollisionResistant(System.Boolean)">
            <summary>
            Gets a copy of these options with the <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> property set to a new value.
            </summary>
            <param name="hashCollisionResistant">The new value for the <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> property.</param>
            <returns>The new instance; or the original if the value is unchanged.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.GetEqualityComparer``1">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is suitable to use with a hash-based collection.
            </summary>
            <typeparam name="T">The type of key that will be hashed in the collection.</typeparam>
            <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use.</returns>
            <remarks>
            When <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> is active, this will be a collision resistant instance which may reject certain key types.
            When <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> is not active, this will be <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.GetEqualityComparer">
            <summary>
            Gets an <see cref="T:System.Collections.IEqualityComparer"/> that is suitable to use with a hash-based collection.
            </summary>
            <returns>The <see cref="T:System.Collections.IEqualityComparer"/> to use.</returns>
            <remarks>
            When <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> is active, this will be a collision resistant instance which may reject certain key types.
            When <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> is not active, this will be <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.GetHashCollisionResistantEqualityComparer``1">
            <summary>
            Returns a hash collision resistant equality comparer.
            </summary>
            <typeparam name="T">The type of key that will be hashed in the collection.</typeparam>
            <returns>A hash collision resistant equality comparer.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.DepthStep">
            <summary>
            Should be called within the expression of a <c>using</c> statement around which a <see cref="M:Datadog.Trace.Vendors.MessagePack.Formatters.IMessagePackFormatter`1.Deserialize(System.Byte[],System.Int32,Datadog.Trace.Vendors.MessagePack.IFormatterResolver,System.Int32@)"/> method
            deserializes a sub-element.
            </summary>
            <returns>A value to be disposed of when deserializing the sub-element is complete.</returns>
            <exception cref="T:System.InsufficientExecutionStackException">Thrown when the depth of the object graph being deserialized exceeds <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.MaximumObjectGraphDepth"/>.</exception>
            <remarks>
            Rather than wrap the body of every <see cref="M:Datadog.Trace.Vendors.MessagePack.Formatters.IMessagePackFormatter`1.Deserialize(System.Byte[],System.Int32,Datadog.Trace.Vendors.MessagePack.IFormatterResolver,System.Int32@)"/> method,
            this should wrap *calls* to these methods. They need not appear in pure "thunk" methods that simply delegate the deserialization to another formatter.
            In this way, we can avoid repeatedly incrementing and decrementing the counter when deserializing each element of a collection.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.GetHashCollisionResistantEqualityComparer">
            <summary>
            Returns a hash collision resistant equality comparer.
            </summary>
            <returns>A hash collision resistant equality comparer.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.Clone">
            <summary>
            Creates a new instance that is a copy of this one.
            </summary>
            <remarks>
            Derived types should override this method to instantiate their own derived type.
            </remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.ObjectGraphDepthStep">
            <summary>
            The struct returned from <see cref="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.DepthStep"/>
            that when disposed will decrement the object graph depth counter to reverse
            the effect of the call to <see cref="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.DepthStep"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.ObjectGraphDepthStep.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.CollisionResistantHasher`1">
            <summary>
            A hash collision resistant implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The type of key that will be hashed.</typeparam>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.ObjectFallbackEqualityComparer">
            <summary>
            A special hash-resistent equality comparer that defers picking the actual implementation
            till it can check the runtime type of each value to be hashed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer">
            <summary>
            High-Level API of MessagePack for C#.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.DefaultResolver">
            <summary>
            FormatterResolver that used resolver less overloads. If does not set it, used StandardResolver.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.IsInitialized">
            <summary>
            Is resolver decided?
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SetDefaultResolver(Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Set default resolver of MessagePackSerializer APIs.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(``0)">
            <summary>
            Serialize to binary with default resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to binary with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SerializeUnsafe``1(``0)">
            <summary>
            Serialize to binary. Get the raw memory pool byte[]. The result can not share across thread and can not hold, so use quickly.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SerializeUnsafe``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to binary with specified resolver. Get the raw memory pool byte[]. The result can not share across thread and can not hold, so use quickly.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Serialize to stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(System.IO.Stream,``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to stream with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(System.Byte[]@,System.Int32,``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Reflect of resolver.GetFormatterWithVerify[T].Serialize.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SerializeAsync``1(System.IO.Stream,``0)">
            <summary>
            Serialize to stream(async).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SerializeAsync``1(System.IO.Stream,``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to stream(async) with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Deserialize``1(System.Byte[],System.Int32,Datadog.Trace.Vendors.MessagePack.IFormatterResolver,System.Int32@)">
            <summary>
            Reflect of resolver.GetFormatterWithVerify[T].Deserialize.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.ToJson``1(``0)">
            <summary>
            Dump to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.ToJson``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Dump to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.ToJson(System.Byte[])">
            <summary>
            Dump message-pack binary to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.FromJson(System.IO.TextReader)">
            <summary>
            From Json String to MessagePack binary
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.FromJsonUnsafe(System.IO.TextReader)">
            <summary>
            return buffer is from memory pool, be careful to use. 
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Resolvers.AttributeFormatterResolver">
            <summary>
            Get formatter from [MessaegPackFromatter] attribute.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Resolvers.StandardResolver">
            <summary>
            Default composited resolver, builtin -> attribute -> dynamic enum -> dynamic generic -> dynamic union -> dynamic object -> primitive.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized BSON data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should be compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the BSON data to read.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> containing the BSON data to read.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream"/> is also closed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating BSON data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write to.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to write to.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.Stream"/> and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream"/> is also closed.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to a single parameterized constructor, then to the non-public default constructor.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Creates a custom object.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework <see cref="T:System.Data.EntityKeyMember"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an <see cref="T:System.Dynamic.ExpandoObject"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. <c>"2008-04-12T12:53Z"</c>).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript <c>Date</c> constructor (e.g. <c>new Date(52231943)</c>).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.RegexConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.RegexConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how enum text is written.
            </summary>
            <value>The naming strategy used to resolve how enum text is written.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed when serializing and deserializing.
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="camelCaseText"><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="namingStrategy">The naming strategy used to resolve how enum text is written.</param>
            <param name="allowIntegerValues"><c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> used to write enum text.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> used to write enum text.</param>
            <param name="namingStrategyParameters">
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <paramref name="namingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type,System.Object[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> used to write enum text.</param>
            <param name="namingStrategyParameters">
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <paramref name="namingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </param>
            <param name="allowIntegerValues"><c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.UnixDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from Unix epoch time
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.UnixDateTimeConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.UnixDateTimeConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. <c>"1.2.3.4"</c>).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.VersionConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.VersionConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produced multiple root elements.
            </summary>
            <value>The name of the deserialized root element.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attribute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.EncodeSpecialCharacters">
            <summary>
            Gets or sets a value indicating whether to encode special characters when converting JSON to XML.
            If <c>true</c>, special characters like ':', '@', '?', '#' and '$' in JSON property names aren't used to specify
            XML namespaces, attributes or processing directives. Instead special characters are encoded and written
            as part of the XML element name.
            </summary>
            <value><c>true</c> if special characters are encoded; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the <paramref name="attributeName"/> is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns><c>true</c> if attribute name is for a namespace attribute, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. <c>"2012-03-21T05:40Z"</c>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. <c>"\/Date(1198908717056)\/"</c>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable">
            <summary>
            The default JSON name table implementation.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the same characters as the specified range of characters in the given array.
            </summary>
            <param name="key">The character array containing the name to find.</param>
            <param name="start">The zero-based index into the array specifying the first character of the name.</param>
            <param name="length">The number of characters in the name.</param>
            <returns>A string containing the same characters as the specified range of characters in the given array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable.Add(System.String)">
            <summary>
            Adds the specified string into name table.
            </summary>
            <param name="key">The string to add.</param>
            <remarks>This method is not thread-safe.</remarks>
            <returns>The resolved string.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that it is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and set members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. <c>"NaN"</c>, <c>"Infinity"</c>, <c>"-Infinity"</c>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. <c>NaN</c>, <c>Infinity</c>, <c>-Infinity</c>.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, <c>null</c> for a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> property.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.Indentation"/> and <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.IArrayPool`1">
            <summary>
            Provides an interface for using pooled arrays.
            </summary>
            <typeparam name="T">The array type content.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            Rent an array from the pool. This array must be returned when it is no longer needed.
            </summary>
            <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
            <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>
            Return an array to the pool.
            </summary>
            <param name="array">The array that is being returned.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.LineNumber"/> and <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.LinePosition"/> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, when <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.HasLineInfo"/> returns <c>false</c>).</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, when <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.HasLineInfo"/> returns <c>false</c>).</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items.
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between .NET types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert"/>,
            and <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject``1"/> and <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> with
            <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value <c>true</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value <c>false</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's <c>null</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's <c>undefined</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's <c>NaN</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling,Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode"/> to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode"/> to a JSON string using formatting.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode"/> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode"/> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode"/> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode"/> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName"/>
            and writes a Json.NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode"/> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName"/>,
            writes a Json.NET array attribute for collections, and encodes special characters.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <param name="encodeSpecialCharacters">
            A value to indicate whether to encode special characters when converting JSON to XML.
            If <c>true</c>, special characters like ':', '@', '?', '#' and '$' in JSON property names aren't used to specify
            XML namespaces, attributes or processing directives. Instead special characters are encoded and written
            as part of the XML element name.
            </param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1">
            <summary>
            Converts an object to and from JSON.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,`0,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,`0,System.Boolean,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read. If there is no existing value then <c>null</c> will be used.</param>
            <param name="hasExistingValue">The existing value has a value.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to use the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.ConverterType"/>.
            If <c>null</c>, the default constructor is used.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.</param>
            <param name="converterParameters">Parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>. Can be <c>null</c>.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonNameTable">
            <summary>
            Base class for a table of atomized string objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the same characters as the specified range of characters in the given array.
            </summary>
            <param name="key">The character array containing the name to find.</param>
            <param name="start">The zero-based index into the array specifying the first character of the name.</param>
            <param name="length">The number of characters in the name.</param>
            <returns>A string containing the same characters as the specified range of characters in the given array.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> type used when serializing the property's collection items.
            </summary>
            <value>The collection's items <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> type.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SkipAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously skips the children of the current token.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Byte"/>[].
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Byte"/>[]. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsInt32Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.String"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.String"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> read method has not been called.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Close"/> method has been called.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader is in a constructor.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the source should be closed when this reader is closed.
            </summary>
            <value>
            <c>true</c> to close the source when this reader is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            <c>true</c> to support reading multiple pieces of JSON content; otherwise <c>false</c>.
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled when reading JSON.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            Gets or sets how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the source.
            </summary>
            <returns><c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SetToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SetToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SetToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object,System.Boolean)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
            <param name="updateIndex">A flag indicating whether the position index inside an array should be updated.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the source is also closed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to always serialize the member, and to require that the member has a value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/>.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Create(Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.CreateDefault(Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to read values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Populate(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to read values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Deserialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Deserialize``1(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Deserialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="jsonWriter">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="jsonWriter">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) are handled.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> collection that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>A function that creates the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/>.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Byte"/>[].
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Byte"/>[]. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsInt32Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.String"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.String"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the JSON data to read.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.PropertyNameTable">
            <summary>
            Gets or sets the reader's property name table.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextReader"/> is also closed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.LineNumber"/> and <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.LinePosition"/> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.HasLineInfo"/> returns <c>false</c>).
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.HasLineInfo"/> returns <c>false</c>).
            </value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the JSON value delimiter.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the destination is also closed.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of the current JSON object or array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteIndentAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes indent characters.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an indent space.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a null value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an undefined value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Object"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of an array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a constructor.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>
            Gets or sets the writer's character array pool.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.IndentChar"/>s to write for each level in the hierarchy when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Formatting"/> is set to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.Indented"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Formatting"/> is set to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.Indented"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter"/> class using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> to write to.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.TextWriter"/> and also flushes the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextWriter"/> is also closed.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEnd(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> if a read method has not been called.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader">
            <summary>
            <para>
            Represents a reader that provides <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> validation.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> used to construct this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> is also closed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>
            A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the destination is also closed.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteIndentAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes indent characters.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the JSON value delimiter.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an indent space.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of the current JSON object or array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of an array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a constructor.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a null value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteTokenAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the current <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteTokenAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the current <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteTokenAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteTokenAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String"/> property name for <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.PropertyName"/>.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartObject"/>.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Object"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an undefined value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.SetWriteStateAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously ets the state of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> being written.</param>
            <param name="value">The value being written.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the destination should be closed when this writer is closed.
            </summary>
            <value>
            <c>true</c> to close the destination when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose">
            <summary>
            Gets or sets a value indicating whether the JSON should be auto-completed when this writer is closed.
            </summary>
            <value>
            <c>true</c> to auto-complete the JSON when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Gets or sets a value indicating how JSON text output should be formatted.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled when writing JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the destination is also closed.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String"/> property name for <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.PropertyName"/>.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartObject"/>.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> token.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEnd(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.SetWriteState(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while writing JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message, JSON path and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> with type <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Comment"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling">
            <summary>
            Specifies how duplicate property names are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Replace">
            <summary>
            Replace the existing value when there is a duplicate property. The value of the last property in the JSON object will be used.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Ignore">
            <summary>
            Ignore the new value when there is a duplicate property. The value of the first property in the JSON object will be used.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Error">
            <summary>
            Throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> when a duplicate property is encountered.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/> property contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/> property contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Parse(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.IndexOf(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Add(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Contains(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.CopyTo(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> is read-only.
            </summary>
            <returns><c>true</c> if the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Remove(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> was successfully removed from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>; otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item"/> is not found in the original <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the descendant tokens of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing this token, and all the descendant tokens of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the child nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings"/>.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings"/> used to merge the content.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.Equals(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> of this object's properties.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> with the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Property(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> with the specified name.
            The exact name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="name">The property name.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> matched with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> of this object's property values.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> of this object's property values.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
                <paramref name="reader"/> is not valid JSON.
            </exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
                <paramref name="reader"/> is not valid JSON.
            </exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
                <paramref name="json"/> is not valid JSON.
            </exception>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Parse(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
                <paramref name="json"/> is not valid JSON.
            </exception>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Add(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.ContainsKey(System.String)">
            <summary>
            Determines whether the JSON object has the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the JSON object has the specified property name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component to test for reset capability.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component with the property to be examined for persistence.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to.
            When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or
            <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/>
            methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw.CreateAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates an instance of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns an instance of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw.Create(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.CommentHandling.Ignore" />.
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.LineInfoHandling.Load" />.
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings.DuplicatePropertyNameHandling">
            <summary>
            Gets or sets how duplicate property names in JSON objects are handled when loading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Replace" />.
            </summary>
            <value>The JSON duplicate property name handling.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how null value properties are merged.
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings.PropertyNameComparison">
            <summary>
            Gets or sets the comparison used to match property names while merging.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <value>The comparison used to match property names while merging.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ReadFromAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous creation. The
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains 
            the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ReadFromAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous creation. The
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains 
            the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.DeepEquals(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns><c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Replace(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToString(Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>s which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/>[] to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> for this token.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from an object using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject``1(Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ReadFrom(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ReadFrom(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Parse(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Type"/> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the annotations for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Type"/> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> that contains the annotations that match the specified type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Type"/> of annotations to remove.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>
            <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> at the reader's current position.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> at the writer's current position.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being written.
            </summary>
            <value>The token being written.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
            <remarks>
            Setting <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> to <c>true</c> has no additional effect, since the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/> is a type that cannot be closed.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will be raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> null value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> undefined value.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> undefined value.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>s which will be used when writing the token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.Equals(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CompareTo(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not of the same type as this instance.
            </exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver"/> to <c>false</c>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />       
            </example>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions">
            <summary>
            <para>
            Contains the JSON schema extension methods.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions.IsValid(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            Determines whether the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> is valid.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions.IsValid(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            <para>
            Determines whether the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> is valid.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions.Validate(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            Validates the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions.Validate(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            <para>
            Validates the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            <para>
            An in-memory representation of a JSON Schema.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read-only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisible by.
            </summary>
            <value>A number that the value should be divisible by.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Minimum"/>).
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Minimum"/>).</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Maximum"/>).
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Maximum"/>).</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> instance at their array position from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallowed types.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Read(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Read(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains JSON Schema.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON Schema.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON Schema.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains JSON Schema using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON Schema.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON Schema.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            <para>
            Returns detailed information about the schema exception.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            <para>
            Generates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            <para>
            Resolves <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from an id.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            <para>
            The value types allowed by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            <para>
            Specifies undefined schema Id handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            <para>
            Returns detailed information related to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventHandler"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            <para>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to resolve a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute"/> attribute when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute"/> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreIsSpecifiedMembers">
            <summary>
            Gets or sets a value indicating whether to ignore IsSpecified members when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the IsSpecified members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreShouldSerializeMembers">
            <summary>
            Gets or sets a value indicating whether to ignore ShouldSerialize members when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the ShouldSerialize members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" />.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(System.String)">
            <summary>
            Resolves the name of the extension data. By default no changes are made to extension data names.
            </summary>
            <param name="extensionDataName">Name of the extension data.</param>
            <returns>Resolved name of the extension data.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/> is used to resolve dictionary keys.
            </summary>
            <param name="dictionaryKey">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener"/> instances.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info"/> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/> and <see cref="F:System.Diagnostics.TraceLevel.Error"/> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DynamicValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to resolve a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that was resolved from the reference.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder">
            <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info"/> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/> and <see cref="F:System.Diagnostics.TraceLevel.Error"/> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non-public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.ISerializable"/> object constructor.
            </summary>
            <value>The <see cref="T:System.Runtime.Serialization.ISerializable"/> object constructor.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> instances that define the parameters used with <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            This function is called with a collection of arguments which are defined by the <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            Gets or sets the extension data value type.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataNameResolver">
            <summary>
            Gets or sets the extension data name resolver.
            </summary>
            <value>The extension data name resolver.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes precedence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of <paramref name="propertyName"/> and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> type described by the argument.
            </summary>
            <param name="converterType">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> type to create.</param>
            <param name="args">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If <c>null</c>, the default constructor is used.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info"/> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/> and <see cref="F:System.Diagnostics.TraceLevel.Error"/> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.ProcessExtensionDataNames">
            <summary>
            A flag indicating whether extension data names should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specified.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.GetExtensionDataName(System.String)">
            <summary>
            Gets the serialized name for a given extension data name.
            </summary>
            <param name="name">The initial extension data name.</param>
            <returns>The serialized extension data name.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="key">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider"/> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>
            A snake case naming strategy.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling">
            <summary>
            Indicates the method that will be used during deserialization for locating and loading assemblies.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple">
            <summary>
            In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the <c>LoadWithPartialName</c> method of the <see cref="T:System.Reflection.Assembly"/> class is used to load the assembly.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Full">
            <summary>
            In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The <c>Load</c> method of the <see cref="T:System.Reflection.Assembly"/> class is used to load the assembly.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <remarks>
            <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            Note that this doesn't include the root serialized object by default. To include the root object's type name in JSON
            you must specify a root type object with <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)"/>
            or <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,System.Type)"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is <c>null</c> or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is <c>null</c> or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ImmutableCollectionsUtils">
            <summary>
            Helper class for serializing immutable collections.
            Note that this is used by all builds, even those that don't support immutable collections, in case the DLL is GACed
            https://github.com/JamesNK/Newtonsoft.Json/issues/652
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike <see cref="T:System.Text.StringBuilder"/> this class lets you reuse its internal buffer.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return <c>false</c>.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> method calls result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Close"/> method has been called.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Array">
            <summary>
            An array is being written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Start">
            <summary>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> write method has not been called.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions">
            <summary>Extends <see cref="T:Datadog.Trace.Vendors.Serilog.LoggerConfiguration"/> with methods to add file sinks.</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <param name="rollingInterval">The interval at which logging will roll over to a new file.</param>
            <param name="rollOnFileSizeLimit">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames
            will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>
            <param name="retainedFileCountLimit">The maximum number of log files that will be retained,
            including the current log file. For unlimited retention, pass null. The default is 31.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <param name="rollingInterval">The interval at which logging will roll over to a new file.</param>
            <param name="rollOnFileSizeLimit">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames
            will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>
            <param name="retainedFileCountLimit">The maximum number of log files that will be retained,
            including the current log file. For unlimited retention, pass null. The default is 31.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <param name="rollingInterval">The interval at which logging will roll over to a new file.</param>
            <param name="rollOnFileSizeLimit">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames
            will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>
            <param name="retainedFileCountLimit">The maximum number of log files that will be retained,
            including the current log file. For unlimited retention, pass null. The default is 31.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="hooks">Optionally enables hooking into log file lifecycle events.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <param name="rollingInterval">The interval at which logging will roll over to a new file.</param>
            <param name="rollOnFileSizeLimit">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames
            will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>
            <param name="retainedFileCountLimit">The maximum number of log files that will be retained,
            including the current log file. For unlimited retention, pass null. The default is 31.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="hooks">Optionally enables hooking into log file lifecycle events.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)">
            <summary>
            Write audit log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="hooks">Optionally enables hooking into log file lifecycle events.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)">
            <summary>
            Write audit log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="hooks">Optionally enables hooking into log file lifecycle events.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.RollingInterval">
            <summary>
            Specifies the frequency at which the log file should roll.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Infinite">
            <summary>
            The log file will never roll; no time period information will be appended to the log file name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Year">
            <summary>
            Roll every year. Filenames will have a four-digit year appended in the pattern <code>yyyy</code>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Month">
            <summary>
            Roll every calendar month. Filenames will have <code>yyyyMM</code> appended.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Day">
            <summary>
            Roll every day. Filenames will have <code>yyyyMMdd</code> appended.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Hour">
            <summary>
            Roll every hour. Filenames will have <code>yyyyMMddHH</code> appended.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Minute">
            <summary>
            Roll every minute. Filenames will have <code>yyyyMMddHHmm</code> appended.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks">
            <summary>
            Enables hooking into log file lifecycle events.
            Hooks run synchronously and therefore may affect responsiveness of the application if long operations are performed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks.OnFileOpened(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initialize or wrap the <paramref name="underlyingStream"/> opened on the log file. This can be used to write
            file headers, or wrap the stream in another that adds buffering, compression, encryption, etc. The underlying
            file may or may not be empty when this method is called.
            </summary>
            <remarks>
            A value must be returned from overrides of this method. Serilog will flush and/or dispose the returned value, but will not
            dispose the stream initially passed in unless it is itself returned.
            </remarks>
            <param name="underlyingStream">The underlying <see cref="T:System.IO.Stream"/> opened on the log file.</param>
            <param name="encoding">The encoding to use when reading/writing to the stream.</param>
            <returns>The <see cref="T:System.IO.Stream"/> Serilog should use when writing events to the log file.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks.OnFileDeleting(System.String)">
            <summary>
            Called before an obsolete (rolling) log file is deleted.
            This can be used to copy old logs to an archive location or send to a backup server.
            </summary>
            <param name="path">The full path to the file being deleted.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink">
            <summary>
            Write log events to a disk file.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink.#ctor(System.String,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.Nullable{System.Int64},System.Text.Encoding,System.Boolean)">
            <summary>Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink"/>.</summary>
            <param name="path">Path to the file.</param>
            <param name="textFormatter">Formatter used to convert log events to text.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>This constructor preserves compatibility with early versions of the public API. New code should not depend on this type.</remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink.Emit(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Emit the provided log event to the sink.
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink.FlushToDisk">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.IFileSink">
            <summary>
            Exists only for the convenience of <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.RollingFileSink"/>, which
            switches implementations based on sharing. Would refactor, but preserving
            backwards compatibility.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.IFlushableFileSink">
            <summary>
            Supported by (file-based) sinks that can be explicitly flushed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.IFlushableFileSink.FlushToDisk">
            <summary>
            Flush buffered contents to disk.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.NullSink">
            <summary>
            An instance of this sink may be substituted when an instance of the
            <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink"/> is unable to be constructed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink">
            <summary>
            A sink wrapper that periodically flushes the wrapped sink to disk.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink.#ctor(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,System.TimeSpan)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink"/> that wraps
            <paramref name="sink"/> and flushes it at the specified <paramref name="flushInterval"/>.
            </summary>
            <param name="sink">The sink to wrap.</param>
            <param name="flushInterval">The interval at which to flush the underlying sink.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink.Emit(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink">
            <summary>
            Write log events to a disk file.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink.#ctor(System.String,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.Nullable{System.Int64},System.Text.Encoding)">
            <summary>Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink"/>.</summary>
            <param name="path">Path to the file.</param>
            <param name="textFormatter">Formatter used to convert log events to text.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink.Emit(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Emit the provided log event to the sink.
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink.FlushToDisk">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Capturing.PropertyBinder.ConstructProperties(Datadog.Trace.Vendors.Serilog.Events.MessageTemplate,System.Object[])">
            <summary>
            Create properties based on an ordered list of provided values.
            </summary>
            <param name="messageTemplate">The template that the parameters apply to.</param>
            <param name="messageTemplateParameters">Objects corresponding to the properties
            represented in the message template.</param>
            <returns>A list of properties; if the template is malformed then
            this will be empty.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.ILoggerSettings">
            <summary>
            Implemented on types that apply settings to a logger configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.ILoggerSettings.Configure(Datadog.Trace.Vendors.Serilog.LoggerConfiguration)">
            <summary>
            Apply the settings to the logger configuration.
            </summary>
            <param name="loggerConfiguration">The logger configuration to apply settings to.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration">
            <summary>
            Controls audit sink configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Sink(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Audit log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <param name="logEventSink">The sink.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Sink``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Audit log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <typeparam name="TSink">The sink.</typeparam>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Logger(System.Action{Datadog.Trace.Vendors.Serilog.LoggerConfiguration},Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Audit log events to a sub-logger, where further processing may occur. Events through
            the sub-logger will be constrained by filters and enriched by enrichers that are
            active in the parent. A sub-logger cannot be used to log at a more verbose level, but
            a less verbose level is possible.
            </summary>
            <param name="configureLogger">An action that configures the sub-logger.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Logger(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Audit log events to a sub-logger, where further processing may occur. Events through
            the sub-logger will be constrained by filters and enriched by enrichers that are
            active in the parent. A sub-logger cannot be used to log at a more verbose level, but
            a less verbose level is possible.
            </summary>
            <param name="logger">The sub-logger. This will <em>not</em> be shut down automatically when the
            parent logger is disposed.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration">
            <summary>
            Controls template parameter destructuring configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.AsScalar(System.Type)">
            <summary>
            Treat objects of the specified type as scalar values, i.e., don't break
            them down into properties event when destructuring complex types.
            </summary>
            <param name="scalarType">Type to treat as scalar.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="scalarType"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.AsScalar``1">
            <summary>
            Treat objects of the specified type as scalar values, i.e., don't break
            them down into properties event when destructuring complex types.
            </summary>
            <typeparam name="TScalar">Type to treat as scalar.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.With(Datadog.Trace.Vendors.Serilog.Core.IDestructuringPolicy[])">
            <summary>
            When destructuring objects, transform instances with the provided policies.
            </summary>
            <param name="destructuringPolicies">Policies to apply when destructuring.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="destructuringPolicies"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When any element of <paramref name="destructuringPolicies"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.With``1">
            <summary>
            When destructuring objects, transform instances with the provided policy.
            </summary>
            <typeparam name="TDestructuringPolicy">Policy to apply when destructuring.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ByTransforming``1(System.Func{``0,System.Object})">
            <summary>
            When destructuring objects, transform instances of the specified type with
            the provided function.
            </summary>
            <param name="transformation">Function mapping instances of <typeparamref name="TValue"/>
            to an alternative representation.</param>
            <typeparam name="TValue">Type of values to transform.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="transformation"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ByTransformingWhere``1(System.Func{System.Type,System.Boolean},System.Func{``0,System.Object})">
            <summary>
            When destructuring objects, transform instances of the specified type with
            the provided function, if the predicate returns true. Be careful to avoid any
            intensive work in the predicate, as it can slow down the pipeline significantly.
            </summary>
            <param name="predicate">A predicate used to determine if the transform applies to
            a specific type of value</param>
            <param name="transformation">Function mapping instances of <typeparamref name="TValue"/>
            to an alternative representation.</param>
            <typeparam name="TValue">Type of values to transform.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="predicate"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="transformation"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ToMaximumDepth(System.Int32)">
            <summary>
            When destructuring objects, depth will be limited to 10 property traversals deep to
            guard against ballooning space when recursive/cyclic structures are accidentally passed. To
            change this limit pass a new maximum depth.
            </summary>
            <param name="maximumDestructuringDepth">The maximum depth to use.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="maximumDestructuringDepth"/> is negative</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ToMaximumStringLength(System.Int32)">
            <summary>
            When destructuring objects, string values can be restricted to specified length
            thus avoiding bloating payload. Limit is applied to each value separately,
            sum of length of strings can exceed limit.
            </summary>
            <param name="maximumStringLength">The maximum string length.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="maximumStringLength"/> is less than 2</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ToMaximumCollectionCount(System.Int32)">
            <summary>
            When destructuring objects, collections be restricted to specified count
            thus avoiding bloating payload. Limit is applied to each collection separately,
            sum of length of collection can exceed limit.
            Applies limit to all <see cref="T:System.Collections.IEnumerable"/> including dictionaries.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="maximumCollectionCount"/> is less than 1</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration">
            <summary>
            Controls enrichment configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.With(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])">
            <summary>
            Specifies one or more enrichers that may add properties dynamically to
            log events.
            </summary>
            <param name="enrichers">Enrichers to apply to all events passing through
            the logger.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="enrichers"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When any element of <paramref name="enrichers"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.With``1">
            <summary>
            Specifies an enricher that may add properties dynamically to
            log events.
            </summary>
            <typeparam name="TEnricher">Enricher type to apply to all events passing through
            the logger.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.WithProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Include the specified property value in all events logged to the logger.
            </summary>
            <param name="name">The name of the property to add.</param>
            <param name="value">The property value to add.</param>
            <param name="destructureObjects">If true, objects of unknown type will be logged as structures; otherwise they will be converted using <see cref="M:System.Object.ToString"/>.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.FromLogContext">
            <summary>
            Enrich log events with properties from <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/>.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.When(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration})">
            <summary>
            Apply an enricher only when <paramref name="condition"/> evaluates to <c>true</c>.
            </summary>
            <param name="condition">A predicate that evaluates to <c>true</c> when the supplied <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>
            should be enriched.</param>
            <param name="configureEnricher">An action that configures the wrapped enricher.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="condition"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureEnricher"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.AtLevel(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration})">
            <summary>
            Apply an enricher only to events with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel"/> greater than or equal to <paramref name="enrichFromLevel"/>.
            </summary>
            <param name="enrichFromLevel">The level from which the enricher will be applied.</param>
            <param name="configureEnricher">An action that configures the wrapped enricher.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>This method permits additional information to be attached to e.g. warnings and errors, that might be too expensive
            to collect or store at lower levels.</remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureEnricher"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.AtLevel(Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration})">
            <summary>
            Apply an enricher only to events with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel"/> greater than or equal to the level specified by <paramref name="levelSwitch"/>.
            </summary>
            <param name="levelSwitch">A <see cref="T:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch"/> that specifies the level from which the enricher will be applied.</param>
            <param name="configureEnricher">An action that configures the wrapped enricher.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>This method permits additional information to be attached to e.g. warnings and errors, that might be too expensive
            to collect or store at lower levels.</remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureEnricher"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.Wrap(Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration,System.Func{Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher,Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration})">
            <summary>
            Helper method for wrapping sinks.
            </summary>
            <param name="loggerEnrichmentConfiguration">The parent enrichment configuration.</param>
            <param name="wrapEnricher">A function that allows for wrapping <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher"/>s
            added in <paramref name="configureWrappedEnricher"/>.</param>
            <param name="configureWrappedEnricher">An action that configures enrichers to be wrapped in <paramref name="wrapEnricher"/>.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="loggerEnrichmentConfiguration"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="wrapEnricher"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureWrappedEnricher"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration">
            <summary>
            Controls filter configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration.With(Datadog.Trace.Vendors.Serilog.Core.ILogEventFilter[])">
            <summary>
            Filter out log events from the stream based on the provided filter.
            </summary>
            <param name="filters">The filters to apply.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="filters"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When any element of <paramref name="filters"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration.With``1">
            <summary>
            Filter out log events from the stream based on the provided filter.
            </summary>
            <typeparam name="TFilter">The filters to apply.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration.ByExcluding(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean})">
            <summary>
            Filter out log events that match a predicate.
            </summary>
            <param name="exclusionPredicate">Function that returns true when an event
            should be excluded (silenced).</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration.ByIncludingOnly(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean})">
            <summary>
            Filter log events to include only those that match a predicate.
            </summary>
            <param name="inclusionPredicate">Function that returns true when an event
            should be included (emitted).</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration">
            <summary>
            Controls sink configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Is(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Sets the minimum level at which events will be passed to sinks.
            </summary>
            <param name="minimumLevel">The minimum level to set.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.ControlledBy(Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Sets the minimum level to be dynamically controlled by the provided switch.
            </summary>
            <param name="levelSwitch">The switch.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="levelSwitch"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Verbose">
            <summary>
            Anything and everything you might want to know about
            a running block of code.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Debug">
            <summary>
            Internal system events that aren't necessarily
            observable from the outside.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Information">
            <summary>
            The lifeblood of operational intelligence - things
            happen.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Error">
            <summary>
            Functionality is unavailable, invariants are broken
            or data is lost.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Fatal">
            <summary>
            If you have a pager, it goes off when one of these
            occurs.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Override(System.String,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Override the minimum level for events from a specific namespace or type name.
            This API is not supported for configuring sub-loggers (created through <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Logger(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)"/>). Use <see cref="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Filter"/> or <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Conditional(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration})"/> instead.
            You also might consider using https://github.com/serilog/serilog-filters-expressions.
            </summary>
            <param name="source">The (partial) namespace or type name to set the override for.</param>
            <param name="levelSwitch">The switch controlling loggers for matching sources.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When a trimmed <paramref name="source"/> is empty</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="levelSwitch"/> is <code>null</code></exception> 
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Override(System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Override the minimum level for events from a specific namespace or type name.
            This API is not supported for configuring sub-loggers (created through <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Logger(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)"/>). Use <see cref="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Filter"/> or <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Conditional(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration})"/> instead.
            You also might consider using https://github.com/serilog/serilog-filters-expressions.
            </summary>
            <param name="source">The (partial) namespace or type name to set the override for.</param>
            <param name="minimumLevel">The minimum level applied to loggers for matching sources.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSettingsConfiguration">
            <summary>
            Allows additional setting sources to drive the logger configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSettingsConfiguration.Settings(Datadog.Trace.Vendors.Serilog.Configuration.ILoggerSettings)">
            <summary>
            Apply external settings to the logger configuration.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="settings"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSettingsConfiguration.KeyValuePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Apply settings specified in the Serilog key-value setting format to the logger configuration.
            </summary>
            <param name="settings">A list of key-value pairs describing logger settings.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>In case of duplicate keys, the last value for the key is kept and the previous ones are ignored.</remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="settings"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration">
            <summary>
            Controls sink configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Sink(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Write log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <param name="logEventSink">The sink.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>Provided for binary compatibility for earlier versions,
            should be removed in 3.0. Not marked obsolete because warnings
            would be syntactically annoying to avoid.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Sink(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <param name="logEventSink">The sink.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Sink``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <typeparam name="TSink">The sink.</typeparam>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Logger(System.Action{Datadog.Trace.Vendors.Serilog.LoggerConfiguration},Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to a sub-logger, where further processing may occur. Events through
            the sub-logger will be constrained by filters and enriched by enrichers that are
            active in the parent. A sub-logger cannot be used to log at a more verbose level, but
            a less verbose level is possible.
            </summary>
            <param name="configureLogger">An action that configures the sub-logger.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime. Can be <code>null</code></param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureLogger"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Logger(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Write log events to a sub-logger, where further processing may occur. Events through
            the sub-logger will be constrained by filters and enriched by enrichers that are
            active in the parent. A sub-logger cannot be used to log at a more verbose level, but
            a less verbose level is possible.
            </summary>
            <param name="logger">The sub-logger. This will <em>not</em> be shut down automatically when the
            parent logger is disposed.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logger"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Conditional(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration})">
            <summary>
            Write to a sink only when <paramref name="condition"/> evaluates to <c>true</c>.
            </summary>
            <param name="condition">A predicate that evaluates to <c>true</c> when the supplied <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>
            should be written to the configured sink.</param>
            <param name="configureSink">An action that configures the wrapped sink.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="condition"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureSink"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Wrap(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.Func{Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Core.ILogEventSink},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration})">
            <summary>
            Helper method for wrapping sinks.
            </summary>
            <param name="loggerSinkConfiguration">The parent sink configuration.</param>
            <param name="wrapSink">A function that allows for wrapping <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>s
            added in <paramref name="configureWrappedSink"/>.</param>
            <param name="configureWrappedSink">An action that configures sinks to be wrapped in <paramref name="wrapSink"/>.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Wrap(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.Func{Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Core.ILogEventSink},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration},Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Helper method for wrapping sinks.
            </summary>
            <param name="loggerSinkConfiguration">The parent sink configuration.</param>
            <param name="wrapSink">A function that allows for wrapping <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>s
            added in <paramref name="configureWrappedSink"/>.</param>
            <param name="configureWrappedSink">An action that configures sinks to be wrapped in <paramref name="wrapSink"/>.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime. Can be <code>null</code></param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="loggerSinkConfiguration"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="wrapSink"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureWrappedSink"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Context.LogContext">
            <summary>
            Holds ambient properties that can be attached to log events. To
            configure, use the <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.FromLogContext"/> method.
            </summary>
            <example>
            Configuration:
            <code lang="C#">
            var log = new LoggerConfiguration()
                .Enrich.FromLogContext()
                ...
            </code>
            Usage:
            <code lang="C#">
            using (LogContext.PushProperty("MessageId", message.Id))
            {
                Log.Information("The MessageId property will be attached to this event");
            }
            </code>
            </example>
            <remarks>The scope of the context is the current logical thread, using AsyncLocal
            (and so is preserved across async/await calls).</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.PushProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Push a property onto the context, returning an <see cref="T:System.IDisposable"/>
            that must later be used to remove the property, along with any others that
            may have been pushed on top of it and not yet popped. The property must
            be popped from the same thread/logical call context.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns>A handle to later remove the property from the context.</returns>
            <param name="destructureObjects">If true, and the value is a non-primitive, non-array type,
            then the value will be converted to a structure; otherwise, unknown types will
            be converted to scalars, which are generally stored as strings.</param>
            <returns>A token that must be disposed, in order, to pop properties back off the stack.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Push(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher)">
            <summary>
            Push an enricher onto the context, returning an <see cref="T:System.IDisposable"/>
            that must later be used to remove the property, along with any others that
            may have been pushed on top of it and not yet popped. The property must
            be popped from the same thread/logical call context.
            </summary>
            <param name="enricher">An enricher to push onto the log context</param>
            <returns>A token that must be disposed, in order, to pop properties back off the stack.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="enricher"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Push(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])">
            <summary>
            Push multiple enrichers onto the context, returning an <see cref="T:System.IDisposable"/>
            that must later be used to remove the property, along with any others that
            may have been pushed on top of it and not yet popped. The property must
            be popped from the same thread/logical call context.
            </summary>
            <seealso cref="T:Datadog.Trace.Vendors.Serilog.Core.Enrichers.PropertyEnricher"/>.
            <param name="enrichers">Enrichers to push onto the log context</param>
            <returns>A token that must be disposed, in order, to pop properties back off the stack.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="enrichers"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.PushProperties(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])">
            <summary>
            Push enrichers onto the log context. This method is obsolete, please
            use <see cref="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Push(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])"/> instead.
            </summary>
            <param name="properties">Enrichers to push onto the log context</param>
            <returns>A token that must be disposed, in order, to pop properties back off the stack.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Clone">
            <summary>
            Obtain an enricher that represents the current contents of the <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/>. This
            can be pushed back onto the context in a different location/thread when required.
            </summary>
            <returns>An enricher that represents the current contents of the <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Suspend">
            <summary>
            Remove all enrichers from the <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/>, returning an <see cref="T:System.IDisposable"/>
            that must later be used to restore enrichers that were on the stack before <see cref="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Suspend"/> was called.
            </summary>
            <returns>A token that must be disposed, in order, to restore properties back to the stack.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Reset">
            <summary>
            Remove all enrichers from <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/> for the current async scope.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.Constants">
            <summary>
            Constants used in the core logging pipeline and associated types.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Core.Constants.SourceContextPropertyName">
            <summary>
            The name of the property included in the emitted log events
            when <code>ForContext&lt;T&gt;()</code> and overloads are
            applied.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.Enrichers.PropertyEnricher">
            <summary>
            Adds a new property enricher to the log event.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Enrichers.PropertyEnricher.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Create a new property enricher.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns>A handle to later remove the property from the context.</returns>
            <param name="destructureObjects">If true, and the value is a non-primitive, non-array type,
            then the value will be converted to a structure; otherwise, unknown types will
            be converted to scalars, which are generally stored as strings.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When <paramref name="name"/> is empty or only contains whitespace</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Enrichers.PropertyEnricher.Enrich(Datadog.Trace.Vendors.Serilog.Events.LogEvent,Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logEvent"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyFactory"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.IDestructuringPolicy">
            <summary>
            Determine how, when destructuring, a supplied value is represented
            as a complex log event property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.IDestructuringPolicy.TryDestructure(System.Object,Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyValueFactory,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue@)">
            <summary>
            If supported, destructure the provided value.
            </summary>
            <param name="value">The value to destructure.</param>
            <param name="propertyValueFactory">Recursively apply policies to destructure additional values.</param>
            <param name="result">The destructured value, or null.</param>
            <returns>True if the value could be destructured under this policy.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher">
            <summary>
            Applied during logging to add additional information to log events.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher.Enrich(Datadog.Trace.Vendors.Serilog.Events.LogEvent,Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventFilter">
            <summary>
            Provides filtering of the log event stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventFilter.IsEnabled(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Returns true if the provided event is enabled. Otherwise, false.
            </summary>
            <param name="logEvent">The event to test.</param>
            <returns>True if the event is enabled by this filter. If false
            is returned, the event will not be emitted.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyFactory">
            <summary>
            Creates log event properties from regular .NET objects, applying policies as
            required.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyFactory.CreateProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> with the specified name and value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="destructureObjects">If true, and the value is a non-primitive, non-array type,
            then the value will be converted to a structure; otherwise, unknown types will
            be converted to scalars, which are generally stored as strings.</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyValueFactory">
            <summary>
            Supports the policy-driven construction of <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue"/>s given
            regular .NET objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyValueFactory.CreatePropertyValue(System.Object,System.Boolean)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue"/> given a .NET object and destructuring
            strategy.
            </summary>
            <param name="value">The value of the property.</param>
            <param name="destructureObjects">If true, and the value is a non-primitive, non-array type,
            then the value will be converted to a structure; otherwise, unknown types will
            be converted to scalars, which are generally stored as strings.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink">
            <summary>
            A destination for log events.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink.Emit(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Emit the provided log event to the sink.
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.IScalarConversionPolicy">
            <summary>
            Determine how a simple value is carried through the logging
            pipeline as an immutable <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.IScalarConversionPolicy.TryConvertToScalar(System.Object,Datadog.Trace.Vendors.Serilog.Events.ScalarValue@)">
            <summary>
            If supported, convert the provided value into an immutable scalar.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="result">The converted value, or null.</param>
            <returns>True if the value could be converted under this policy.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.Logger">
            <summary>
            The core Serilog logging pipeline. A <see cref="T:Datadog.Trace.Vendors.Serilog.Core.Logger"/> must
            be disposed to flush any events buffered within it. Most application
            code should depend on <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/>, not this class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher)">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enricher">Enricher that applies in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher})">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enrichers">Enrichers that apply in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext(System.String,System.Object,System.Boolean)">
            <summary>
            Create a logger that enriches log events with the specified property.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext(System.Type)">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <param name="source">Type generating log messages in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext``1">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <typeparam name="TSource">Type generating log messages in the context.</typeparam>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.IsEnabled(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Determine if events at the specified level, and higher, will be passed through
            to the log sinks.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Write an event to the log.
            </summary>
            <param name="logEvent">The event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.BindMessageTemplate(System.String,System.Object[],Datadog.Trace.Vendors.Serilog.Events.MessageTemplate@,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty}@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a set of properties to a
            message template. Returns false if the template or values are invalid (<c>ILogger</c>
            methods never throw exceptions).
            </summary>
            <param name="messageTemplate">Message template describing an event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <param name="parsedTemplate">The internal representation of the template, which may be used to
            render the <paramref name="boundProperties"/> as text.</param>
            <param name="boundProperties">Captured properties from the template and <paramref name="propertyValues"/>.</param>
            <example>
            MessageTemplate template;
            IEnumerable&lt;LogEventProperty&gt; properties>;
            if (Log.BindMessageTemplate("Hello, {Name}!", new[] { "World" }, out template, out properties)
            {
                var propsByName = properties.ToDictionary(p => p.Name, p => p.Value);
                Console.WriteLine(template.Render(propsByName, null));
                // -> "Hello, World!"
            }
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.BindProperty(System.String,System.Object,System.Boolean,Datadog.Trace.Vendors.Serilog.Events.LogEventProperty@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a property value to its captured
            representation.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <param name="property">The resulting property.</param>
            <returns>True if the property could be bound, otherwise false (<summary>ILogger</summary>
            methods never throw exceptions).</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Dispose">
            <summary>
            Close and flush the logging pipeline.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Core.Logger.None">
            <summary>
            An <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/> instance that efficiently ignores all method calls.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch">
            <summary>
            Dynamically controls logging level.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch.#ctor(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch"/> at the initial
            minimum level.
            </summary>
            <param name="initialMinimumLevel">The initial level to which the switch is set.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch.MinimumLevel">
            <summary>
            The current minimum level, below which no events
            should be generated.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.MessageTemplateFormatMethodAttribute">
             <summary>
             Indicates that the marked method logs data using a message template and (optional) arguments.
             The name of the parameter which contains the message template should be given in the constructor.
             </summary>
             <example>
             <code>
             [LoggerMethod("messageTemplate")]
             public void Information(string messageTemplate, params object[] propertyValues)
             {
                 // Do something
             }
            
             public void Foo()
             {
                 Information("Hello, {Name}!") // Warning: Non-existing argument in message template.
             }
             </code>
             </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.MessageTemplateFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Serilog.Core.MessageTemplateFormatMethodAttribute"/> class.
            </summary>
            <param name="messageTemplateParameterName">Name of the message template parameter.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Core.MessageTemplateFormatMethodAttribute.MessageTemplateParameterName">
            <summary>
            Gets the name of the message template parameter.
            </summary>
            <value>The name of the message template parameter.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.Sinks.SecondaryLoggerSink">
            <summary>
            Forwards log events to another logging pipeline. Copies the events so
            that mutations performed on the copies do not affect the originals.
            </summary>
            <remarks>The properties dictionary is copied, however the values within
            the dictionary (of type <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> are expected to
            be immutable.</remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1">
            <summary>
            A base class for visitors that rewrite the value with modifications. For example, implementations
            might remove all structure properties with a certain name, apply size/length limits, or convert scalar properties of
            one type into scalar properties of another.
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitScalarValue(`0,Datadog.Trace.Vendors.Serilog.Events.ScalarValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="scalar">The value to visit.</param>
            <returns>The result of visiting <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="scalar"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitSequenceValue(`0,Datadog.Trace.Vendors.Serilog.Events.SequenceValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="sequence">The value to visit.</param>
            <returns>The result of visiting <paramref name="sequence"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="sequence"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitStructureValue(`0,Datadog.Trace.Vendors.Serilog.Events.StructureValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="structure">The value to visit.</param>
            <returns>The result of visiting <paramref name="structure"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="structure"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitDictionaryValue(`0,Datadog.Trace.Vendors.Serilog.Events.DictionaryValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="dictionary">The value to visit.</param>
            <returns>The result of visiting <paramref name="dictionary"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="dictionary"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitUnsupportedValue(`0,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Visit a value of an unsupported type. Returns the value unchanged.
            </summary>
            <param name="state">Operation state.</param>
            <param name="value">The value to visit.</param>
            <returns>The result of visiting <paramref name="value"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2">
            <summary>
            An abstract base class for visitors that walk data in the
            <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue"/> format. Subclasses, by
            overriding appropriate methods, may search for, transform,
            or print the value structures being visited.
            </summary>
            <remarks>
            Stateless, designed to accommodate allocation-free visiting of multiple
            values by the same visitor instance.
            </remarks>
            <typeparam name="TState">The type of a state object passed through
            the visiting process.</typeparam>
            <typeparam name="TResult">The type of the result generated by visiting
            a node.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.Visit(`0,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Visit the root node type. This method delegates to
            a concrete Visit*Value() method appropriate for the value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="value">The value to visit.</param>
            <returns>The result of visiting <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitScalarValue(`0,Datadog.Trace.Vendors.Serilog.Events.ScalarValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="scalar">The value to visit.</param>
            <returns>The result of visiting <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitSequenceValue(`0,Datadog.Trace.Vendors.Serilog.Events.SequenceValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="sequence">The value to visit.</param>
            <returns>The result of visiting <paramref name="sequence"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitStructureValue(`0,Datadog.Trace.Vendors.Serilog.Events.StructureValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="structure">The value to visit.</param>
            <returns>The result of visiting <paramref name="structure"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitDictionaryValue(`0,Datadog.Trace.Vendors.Serilog.Events.DictionaryValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="dictionary">The value to visit.</param>
            <returns>The result of visiting <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitUnsupportedValue(`0,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Visit a value of an unsupported type. Always throws <see cref="T:System.NotSupportedException"/>, when is not overridden.
            </summary>
            <param name="state">Operation state.</param>
            <param name="value">The value to visit.</param>
            <returns>The result of visiting <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Debugging.LoggingFailedException">
            <summary>
            May be thrown by log event sinks when a failure occurs. Should not be used in cases
            where the exception would propagate out to callers.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.LoggingFailedException.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Debugging.LoggingFailedException"/> to communicate a logging failure.
            </summary>
            <param name="message">A message describing the logging failure.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog">
            <summary>
            A simple source of information generated by Serilog itself,
            for example when exceptions are thrown and caught internally.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.Out">
            <summary>
            The output mechanism for self-log messages.
            </summary>
            <example>
            SelfLog.Out = Console.Error;
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.Enable(System.IO.TextWriter)">
            <summary>
            Set the output mechanism for self-log messages.
            </summary>
            <param name="output">A synchronized <see cref="T:System.IO.TextWriter"/> to which
            self-log messages will be written.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.Enable(System.Action{System.String})">
            <summary>
            Set the output mechanism for self-log messages.
            </summary>
            <param name="output">An action to invoke with self-log messages.</param>
            // ReSharper disable once MemberCanBePrivate.Global
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.Disable">
            <summary>
            Clear the output mechanism and disable self-log events.
            </summary>
            // ReSharper disable once MemberCanBePrivate.Global
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a message to the self-log.
            </summary>
            <param name="format">Standard .NET format string containing the message.</param>
            <param name="arg0">First argument, if supplied.</param>
            <param name="arg1">Second argument, if supplied.</param>
            <param name="arg2">Third argument, if supplied.</param>
            <remarks>
            The name is historical; because this is used from third-party sink packages, removing the "Line"
            suffix as would seem sensible isn't worth the breakage.
            </remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue">
            <summary>
            A value represented as a mapping from keys to values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Datadog.Trace.Vendors.Serilog.Events.ScalarValue,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue}})">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue"/> with the provided <paramref name="elements"/>.
            </summary>
            <param name="elements">The key-value mappings represented in the dictionary.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="elements"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue.Elements">
            <summary>
            The dictionary mapping.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.EventProperty">
            <summary>
            A property associated with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>.
            </summary>
            <remarks>This type is currently internal, while we consider future directions for the logging pipeline, but should end up public
            in future.</remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.EventProperty.None">
            <summary>
            No property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.#ctor(System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> with the specified name and value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When <paramref name="name"/> is empty or only contains whitespace</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Deconstruct(System.String@,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue@)">
            <summary>
            Permit deconstruction of the property into a name/value pair.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Equals(Datadog.Trace.Vendors.Serilog.Events.EventProperty)">
            <summary>Indicates whether this instance and a specified <see cref="T:Datadog.Trace.Vendors.Serilog.Events.EventProperty"/> are equal.</summary>
            <param name="other">The <see cref="T:Datadog.Trace.Vendors.Serilog.Events.EventProperty"/> to compare with the current instance. </param>
            <returns>
            <see langword="true" /> if <paramref name="other" /> and this instance represent the same value; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LevelAlias">
            <summary>
            Descriptive aliases for <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel"/>.
            </summary>
            <remarks>These do not appear as members of the enumeration
            as duplicated underlying values result in issues when presenting
            enum values with <see cref="M:System.Object.ToString"/>.</remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LevelAlias.Minimum">
            <summary>
            The least significant level of event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LevelAlias.Maximum">
            <summary>
            The most significant level of event.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent">
            <summary>
            A log event.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.#ctor(System.DateTimeOffset,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,Datadog.Trace.Vendors.Serilog.Events.MessageTemplate,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty})">
            <summary>
            Construct a new <seealso cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>.
            </summary>
            <param name="timestamp">The time at which the event occurred.</param>
            <param name="level">The level of the event.</param>
            <param name="exception">An exception associated with the event, or null.</param>
            <param name="messageTemplate">The message template describing the event.</param>
            <param name="properties">Properties associated with the event, including those presented in <paramref name="messageTemplate"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="messageTemplate"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.#ctor(System.DateTimeOffset,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,Datadog.Trace.Vendors.Serilog.Events.MessageTemplate,Datadog.Trace.Vendors.Serilog.Events.EventProperty[])">
            <summary>
            Construct a new <seealso cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>.
            </summary>
            <param name="timestamp">The time at which the event occurred.</param>
            <param name="level">The level of the event.</param>
            <param name="exception">An exception associated with the event, or null.</param>
            <param name="messageTemplate">The message template describing the event.</param>
            <param name="properties">Properties associated with the event, including those presented in <paramref name="messageTemplate"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="messageTemplate"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.Timestamp">
            <summary>
            The time at which the event occurred.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.Level">
            <summary>
            The level of the event.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.MessageTemplate">
            <summary>
            The message template describing the event.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.RenderMessage(System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Render the message template to the specified output, given the properties associated
            with the event.
            </summary>
            <param name="output">The output.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.RenderMessage(System.IFormatProvider)">
            <summary>
            Render the message template given the properties associated
            with the event, and return the result.
            </summary>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.Properties">
            <summary>
            Properties associated with the event, including those presented in <see cref="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.MessageTemplate"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.Exception">
            <summary>
            An exception associated with the event, or null.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.AddOrUpdateProperty(Datadog.Trace.Vendors.Serilog.Events.LogEventProperty)">
            <summary>
            Add a property to the event if not already present, otherwise, update its value.
            </summary>
            <param name="property">The property to add or update.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.AddOrUpdateProperty(Datadog.Trace.Vendors.Serilog.Events.EventProperty@)">
            <summary>
            Add a property to the event if not already present, otherwise, update its value.
            </summary>
            <param name="property">The property to add or update.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>default</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.AddPropertyIfAbsent(Datadog.Trace.Vendors.Serilog.Events.LogEventProperty)">
            <summary>
            Add a property to the event if not already present.
            </summary>
            <param name="property">The property to add.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.AddPropertyIfAbsent(Datadog.Trace.Vendors.Serilog.Events.EventProperty@)">
            <summary>
            Add a property to the event if not already present.
            </summary>
            <param name="property">The property to add.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>default</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.RemovePropertyIfPresent(System.String)">
            <summary>
            Remove a property from the event, if present. Otherwise no action
            is performed.
            </summary>
            <param name="propertyName">The name of the property to remove.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel">
            <summary>
            Specifies the meaning and relative importance of a log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose">
            <summary>
            Anything and everything you might want to know about
            a running block of code.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug">
            <summary>
            Internal system events that aren't necessarily
            observable from the outside.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information">
            <summary>
            The lifeblood of operational intelligence - things
            happen.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error">
            <summary>
            Functionality is unavailable, invariants are broken
            or data is lost.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal">
            <summary>
            If you have a pager, it goes off when one of these
            occurs.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty">
            <summary>
            A property associated with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.#ctor(System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> with the specified name and value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When <paramref name="name"/> is empty or only contains whitespace</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.#ctor(Datadog.Trace.Vendors.Serilog.Events.EventProperty)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> from an existing <see cref="T:Datadog.Trace.Vendors.Serilog.Events.EventProperty"/> instance.
            </summary>
            <param name="property">The existing property.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>default</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.IsValidName(System.String)">
            <summary>
            Test <paramref name="name" /> to determine if it is a valid property name.
            </summary>
            <param name="name">The name to check.</param>
            <returns>True if the name is valid; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.EnsureValidName(System.String)">
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When <paramref name="name"/> is empty or only contains whitespace</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue">
            <summary>
            The value associated with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/>. Divided into scalar,
            sequence and structure values to direct serialization into various formats.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <returns>
            The value of the current instance in the specified format.
            </returns>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use
            the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation. </param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference
            (Nothing in Visual Basic) to obtain the numeric format information from the current locale
            setting of the operating system. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate">
            <summary>
            Represents a message template passed to a log method. The template
            can subsequently render the template in textual form given the list
            of properties.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Empty">
            <summary>
            Represents the empty message template.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.#ctor(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken})">
            <summary>
            Construct a message template using manually-defined text and property tokens.
            </summary>
            <param name="tokens">The text and property tokens defining the template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.#ctor(System.String,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken})">
            <summary>
            Construct a message template using manually-defined text and property tokens.
            </summary>
            <param name="text">The full text of the template; used by Serilog internally to avoid unneeded
            string concatenation.</param>
            <param name="tokens">The text and property tokens defining the template.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="text"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="tokens"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.GetElementsOfTypeToArray``1(Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken[])">
            <summary>
            Similar to <see cref="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)"/>, but faster.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Text">
            <summary>
            The raw text describing the template.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.ToString">
            <summary>
            Render the template as a string.
            </summary>
            <returns>The string representation of the template.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Tokens">
            <summary>
            The tokens parsed from the template.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IFormatProvider)">
            <summary>
            Convert the message template into a textual message, given the
            properties matching the tokens in the message template.
            </summary>
            <param name="properties">Properties matching template tokens.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <returns>The message created from the template and properties. If the
            properties are mismatched with the template, the template will be
            returned with incomplete substitution.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Convert the message template into a textual message, given the
            properties matching the tokens in the message template.
            </summary>
            <param name="properties">Properties matching template tokens.</param>
            <param name="output">The message created from the template and properties. If the
            properties are mismatched with the template, the template will be
            returned with incomplete substitution.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue">
            <summary>
            A property value corresponding to a simple, scalar type.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.#ctor(System.Object)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/> with the specified
            value.
            </summary>
            <param name="value">The value, which may be <code>null</code>.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.Value">
            <summary>
            The value, which may be <code>null</code>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.Render(System.Object,System.IO.TextWriter,System.String,System.IFormatProvider)">
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.Equals(System.Object)">
            <summary>
            Determine if this instance is equal to <paramref name="obj"/>.
            </summary>
            <param name="obj">The instance to compare with.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.GetHashCode">
            <summary>
            Get a hash code representing the value.
            </summary>
            <returns>The instance's hash code.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue">
            <summary>
            A value represented as an ordered sequence of values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.SequenceValue.#ctor(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue})">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue"/> with the provided <paramref name="elements"/>.
            </summary>
            <param name="elements">The elements of the sequence.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="elements"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.SequenceValue.Elements">
            <summary>
            The elements of the sequence.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.SequenceValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue">
            <summary>
            A value represented as a collection of name-value properties.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.StructureValue.#ctor(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty},System.String)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue"/> with the provided properties.
            </summary>
            <param name="typeTag">Optionally, a piece of metadata describing the "type" of the
            structure. Can be <code>null</code>.</param>
            <param name="properties">The properties of the structure.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.StructureValue.TypeTag">
            <summary>
            A piece of metadata describing the "type" of the
            structure, or null.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.StructureValue.Properties">
            <summary>
            The properties of the structure.
            </summary>
            <remarks>Not presented as a dictionary because dictionary construction is
            relatively expensive; it is cheaper to build a dictionary over properties only
            when the structure is of interest.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.StructureValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Filters.Matching">
            <summary>
            Predicates applied to log events that can be used
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.FromSource``1">
            <summary>
            Matches events from the specified source type.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <returns>A predicate for matching events.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.FromSource(System.String)">
            <summary>
            Matches events from the specified source type or namespace and
            nested types or namespaces.
            </summary>
            <param name="source">A dotted source type or namespace identifier.</param>
            <returns>A function that matches log events emitted by the source.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.WithProperty(System.String)">
            <summary>
            Matches events with the specified property attached,
            regardless of its value.
            </summary>
            <param name="propertyName">The name of the property to match.</param>
            <returns>A predicate for matching events.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyName"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.WithProperty(System.String,System.Object)">
            <summary>
            Matches events with the specified property value.
            </summary>
            <param name="propertyName">The name of the property to match.</param>
            <param name="scalarValue">The property value to match; must be a scalar type.
            Null is allowed.</param>
            <returns>A predicate for matching events.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyName"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.WithProperty``1(System.String,System.Func{``0,System.Boolean})">
            <summary>
            Matches events with the specified property value.
            </summary>
            <param name="propertyName">The name of the property to match.</param>
            <param name="predicate">A predicate for testing </param>
            <typeparam name="TScalar">The type of scalar values to match.</typeparam>
            <returns>A predicate for matching events.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyName"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="predicate"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Display.LevelOutputFormat">
            <summary>
            Implements the {Level} element.
            can now have a fixed width applied to it, as well as casing rules.
            Width is set through formats like "u3" (uppercase three chars),
            "w1" (one lowercase char), or "t4" (title case four chars).
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Display.MessageTemplateTextFormatter">
            <summary>
            A <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter"/> that supports the Serilog
            message template format. Formatting log events for display
            has a different set of requirements and expectations from
            rendering the data within them. To meet this, the formatter
            overrides some behavior: First, strings are always output
            as literals (not quoted) unless some other format is applied
            to them. Second, tokens without matching properties are skipped
            rather than being written as raw text.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.MessageTemplateTextFormatter.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Display.MessageTemplateTextFormatter"/>.
            </summary>
            <param name="outputTemplate">A message template describing the
            output messages.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="outputTemplate"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.MessageTemplateTextFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logEvent"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.Obsolete.LogEventLevelValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            This method will apply only upper or lower case formatting, not fixed width
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties">
            <summary>
            Describes the properties available in standard message template-based
            output format strings.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.MessagePropertyName">
            <summary>
            The message rendered from the log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.TimestampPropertyName">
            <summary>
            The timestamp of the log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.LevelPropertyName">
            <summary>
            The level of the log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.NewLinePropertyName">
            <summary>
            A new line.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.ExceptionPropertyName">
            <summary>
            The exception associated with the log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.PropertiesPropertyName">
            <summary>
            The properties of the log event.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.GetOutputProperties(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Create properties from the provided log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>A dictionary with properties representing the log event.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.GetOutputProperties(Datadog.Trace.Vendors.Serilog.Events.LogEvent,Datadog.Trace.Vendors.Serilog.Events.MessageTemplate)">
            <summary>
            Create properties from the provided log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <param name="outputTemplate">The output template.</param>
            <returns>A dictionary with properties representing the log event.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter">
            <summary>
            Formats log events in a textual representation.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter">
            <summary>
            Formats log events in a simple JSON structure. Instances of this class
            are safe for concurrent access by multiple threads.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.#ctor(System.String,System.Boolean,System.IFormatProvider)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>.
            </summary>
            <param name="closingDelimiter">A string that will be written after each log event is formatted.
            If null, <see cref="P:System.Environment.NewLine"/> will be used.</param>
            <param name="renderMessage">If true, the message will be rendered and written to the output as a
            property named RenderedMessage.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.#ctor(System.Boolean,System.String,System.Boolean,System.IFormatProvider)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>.
            </summary>
            <param name="omitEnclosingObject">If true, the properties of the event will be written to
            the output without enclosing braces. Otherwise, if false, each event will be written as a well-formed
            JSON object.</param>
            <param name="closingDelimiter">A string that will be written after each log event is formatted.
            If null, <see cref="P:System.Environment.NewLine"/> will be used. Ignored if <paramref name="omitEnclosingObject"/>
            is true.</param>
            <param name="renderMessage">If true, the message will be rendered and written to the output as a
            property named RenderedMessage.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logEvent"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.AddLiteralWriter(System.Type,System.Action{System.Object,System.IO.TextWriter})">
            <summary>
            Adds a writer function for a given type.
            </summary>
            <param name="type">The type of values, which <paramref name="writer" /> handles.</param>
            <param name="writer">The function, which writes the values.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="writer"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteRenderings(System.Linq.IGrouping{System.String,Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken}[],System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out individual renderings of attached properties
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteRenderingsValues(System.Linq.IGrouping{System.String,Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken}[],System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out the values of individual renderings of attached properties
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteProperties(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out the attached properties
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WritePropertiesValues(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out the attached properties values
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteException(System.Exception,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out the attached exception
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteRenderedMessage(System.String,System.String@,System.IO.TextWriter)">
            <summary>
            (Optionally) writes out the rendered message
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteMessageTemplate(System.String,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out the message template for the logevent.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteLevel(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out the log level
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteTimestamp(System.DateTimeOffset,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out the log timestamp
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteStructure(System.String,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty},System.IO.TextWriter)">
            <summary>
            Writes out a structure property
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteSequence(System.Collections.IEnumerable,System.IO.TextWriter)">
            <summary>
            Writes out a sequence property
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteDictionary(System.Collections.Generic.IReadOnlyDictionary{Datadog.Trace.Vendors.Serilog.Events.ScalarValue,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out a dictionary
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteJsonProperty(System.String,System.Object,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out a json property with the specified value on output writer
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteLiteralValue(System.Object,System.IO.TextWriter)">
            <summary>
            Allows a subclass to write out objects that have no configured literal writer.
            </summary>
            <param name="value">The value to be written as a json construct</param>
            <param name="output">The writer to write on</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.Escape(System.String)">
            <summary>
            Perform simple JSON string escaping on <paramref name="s"/>.
            </summary>
            <param name="s">A raw string.</param>
            <returns>A JSON-escaped version of <paramref name="s"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter">
            <summary>
            Converts Serilog's structured property value format into JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>.
            </summary>
            <param name="typeTagName">When serializing structured (object) values,
            the property name to use for the Serilog <see cref="P:Datadog.Trace.Vendors.Serilog.Events.StructureValue.TypeTag"/> field
            in the resulting JSON. If null, no type tag field will be written. The default is
            "_typeTag".</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue,System.IO.TextWriter)">
            <summary>
            Format <paramref name="value"/> as JSON to <paramref name="output"/>.
            </summary>
            <param name="value">The value to format</param>
            <param name="output">The output</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.VisitScalarValue(System.IO.TextWriter,Datadog.Trace.Vendors.Serilog.Events.ScalarValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="scalar">The value to visit.</param>
            <returns>The result of visiting <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="scalar"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.VisitSequenceValue(System.IO.TextWriter,Datadog.Trace.Vendors.Serilog.Events.SequenceValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="sequence">The value to visit.</param>
            <returns>The result of visiting <paramref name="sequence"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="sequence"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.VisitStructureValue(System.IO.TextWriter,Datadog.Trace.Vendors.Serilog.Events.StructureValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="structure">The value to visit.</param>
            <returns>The result of visiting <paramref name="structure"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.VisitDictionaryValue(System.IO.TextWriter,Datadog.Trace.Vendors.Serilog.Events.DictionaryValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="dictionary">The value to visit.</param>
            <returns>The result of visiting <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.FormatLiteralValue(System.Object,System.IO.TextWriter)">
            <summary>
            Write a literal as a single JSON value, e.g. as a number or string. Override to
            support more value types. Don't write arrays/structures through this method - the
            active destructuring policies have already indicated the value should be scalar at
            this point.
            </summary>
            <param name="value">The value to write.</param>
            <param name="output">The output</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.WriteQuotedJsonString(System.String,System.IO.TextWriter)">
            <summary>
            Write a valid JSON string literal, escaping as necessary.
            </summary>
            <param name="str">The string value to write.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Raw.RawFormatter">
            <summary>
            Formats log events as a raw dump of the message template and properties.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Raw.RawFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.ILogger">
             <summary>
             The core Serilog logging API, used for writing log events.
             </summary>
             <example>
             var log = new LoggerConfiguration()
                 .WriteTo.Console()
                 .CreateLogger();
            
             var thing = "World";
             log.Information("Hello, {Thing}!", thing);
             </example>
             <remarks>
             The methods on <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/> (and its static sibling <see cref="T:Datadog.Trace.Vendors.Serilog.Log"/>) are guaranteed
             never to throw exceptions. Methods on all other types may.
             </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher)">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enricher">Enricher that applies in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher})">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enrichers">Enrichers that apply in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext(System.String,System.Object,System.Boolean)">
            <summary>
            Create a logger that enriches log events with the specified property.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext``1">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <typeparam name="TSource">Type generating log messages in the context.</typeparam>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext(System.Type)">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <param name="source">Type generating log messages in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Write an event to the log.
            </summary>
            <param name="logEvent">The event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.IsEnabled(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Determine if events at the specified level will be passed through
            to the log sinks.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.BindMessageTemplate(System.String,System.Object[],Datadog.Trace.Vendors.Serilog.Events.MessageTemplate@,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty}@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a set of properties to a
            message template. Returns false if the template or values are invalid (<c>ILogger</c>
            methods never throw exceptions).
            </summary>
            <param name="messageTemplate">Message template describing an event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <param name="parsedTemplate">The internal representation of the template, which may be used to
            render the <paramref name="boundProperties"/> as text.</param>
            <param name="boundProperties">Captured properties from the template and <paramref name="propertyValues"/>.</param>
            <example>
            MessageTemplate template;
            IEnumerable&lt;LogEventProperty&gt; properties>;
            if (Log.BindMessageTemplate("Hello, {Name}!", new[] { "World" }, out template, out properties)
            {
                var propsByName = properties.ToDictionary(p => p.Name, p => p.Value);
                Console.WriteLine(template.Render(propsByName, null));
                // -> "Hello, World!"
            }
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.BindProperty(System.String,System.Object,System.Boolean,Datadog.Trace.Vendors.Serilog.Events.LogEventProperty@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a property value to its captured
            representation.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <param name="property">The resulting property.</param>
            <returns>True if the property could be bound, otherwise false (<summary>ILogger</summary>
            methods never throw exceptions).</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Log">
             <summary>
             An optional static entry point for logging that can be easily referenced
             by different parts of an application. To configure the <see cref="T:Datadog.Trace.Vendors.Serilog.Log"/>
             set the Logger static property to a logger instance.
             </summary>
             <example>
             Log.Logger = new LoggerConfiguration()
                 .WithConsoleSink()
                 .CreateLogger();
            
             var thing = "World";
             Log.Logger.Information("Hello, {Thing}!", thing);
             </example>
             <remarks>
             The methods on <see cref="T:Datadog.Trace.Vendors.Serilog.Log"/> (and its dynamic sibling <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/>) are guaranteed
             never to throw exceptions. Methods on all other types may.
             </remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Log.Logger">
            <summary>
            The globally-shared logger.
            </summary>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.CloseAndFlush">
            <summary>
            Resets <see cref="P:Datadog.Trace.Vendors.Serilog.Log.Logger"/> to the default and disposes the original if possible
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher)">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enricher">Enricher that applies in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enrichers">Enrichers that apply in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext(System.String,System.Object,System.Boolean)">
            <summary>
            Create a logger that enriches log events with the specified property.
            </summary>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext``1">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <typeparam name="TSource">Type generating log messages in the context.</typeparam>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext(System.Type)">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <param name="source">Type generating log messages in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Write an event to the log.
            </summary>
            <param name="logEvent">The event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.IsEnabled(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Determine if events at the specified level will be passed through
            to the log sinks.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.BindMessageTemplate(System.String,System.Object[],Datadog.Trace.Vendors.Serilog.Events.MessageTemplate@,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty}@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a set of properties to a
            message template. Returns false if the template or values are invalid (<summary>ILogger</summary>
            methods never throw exceptions).
            </summary>
            <param name="messageTemplate">Message template describing an event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <param name="parsedTemplate">The internal representation of the template, which may be used to
            render the <paramref name="boundProperties"/> as text.</param>
            <param name="boundProperties">Captured properties from the template and <paramref name="propertyValues"/>.</param>
            <example>
            MessageTemplate template;
            IEnumerable&lt;LogEventProperty&gt; properties>;
            if (Log.BindMessageTemplate("Hello, {Name}!", new[] { "World" }, out template, out properties)
            {
                var propsByName = properties.ToDictionary(p => p.Name, p => p.Value);
                Console.WriteLine(template.Render(propsByName, null));
                // -> "Hello, World!"
            }
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.BindProperty(System.String,System.Object,System.Boolean,Datadog.Trace.Vendors.Serilog.Events.LogEventProperty@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a property value to its captured
            representation.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <param name="property">The resulting property.</param>
            <returns>True if the property could be bound, otherwise false (<summary>ILogger</summary>
            methods never throw exceptions).</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.LoggerConfiguration">
            <summary>
            Configuration object for creating <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/> instances.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.#ctor">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.LoggerConfiguration"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.WriteTo">
            <summary>
            Configures the sinks that log events will be emitted to.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.AuditTo">
            <summary>
            Configures sinks for auditing, instead of regular (safe) logging. When auditing is used,
            exceptions from sinks and any intermediate filters propagate back to the caller. Most callers
            should use <see cref="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.WriteTo"/> instead.
            </summary>
            <remarks>
            Not all sinks are compatible with transactional auditing requirements (many will use asynchronous
            batching to improve write throughput and latency). Sinks need to opt-in to auditing support by
            extending <see cref="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration"/>, though the generic <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Sink(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)"/>
            method allows any sink class to be adapted for auditing.
            </remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.MinimumLevel">
            <summary>
            Configures the minimum level at which events will be passed to sinks. If
            not specified, only events at the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/>
            level and above will be passed through.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Enrich">
            <summary>
            Configures enrichment of <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>s. Enrichers can add, remove and
            modify the properties associated with events.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Filter">
            <summary>
            Configures global filtering of <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>s.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Destructure">
            <summary>
            Configures destructuring of message template parameters.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.ReadFrom">
            <summary>
            Apply external settings to the logger configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.CreateLogger">
            <summary>
            Create a logger using the configured sinks, enrichers and minimum level.
            </summary>
            <returns>The logger.</returns>
            <remarks>To free resources held by sinks ahead of program shutdown,
            the returned logger may be cast to <see cref="T:System.IDisposable"/> and
            disposed.</remarks>
            <exception cref="T:System.InvalidOperationException">When the logger is already created</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.LoggerExtensions">
            <summary>
            Extends <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger" /> with additional methods.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.LoggerExtensions.ForContext``1(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,System.Boolean)">
            <summary>
            Create a logger that enriches log events when the specified level is enabled.
            </summary>
            <typeparam name="TValue"> The type of the property value. </typeparam>
            <param name="logger">The logger.</param>
            <param name="level">The log event level used to determine if log is enriched with property.</param>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <returns>A logger that will enrich log events as specified.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logger"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.Alignment">
            <summary>
            A structure representing the alignment settings to apply when rendering a property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.Alignment.#ctor(Datadog.Trace.Vendors.Serilog.Parsing.AlignmentDirection,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.Alignment"/>.
            </summary>
            <param name="direction">The text alignment direction.</param>
            <param name="width">The width of the text, in characters.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.Alignment.Direction">
            <summary>
            The text alignment direction.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.Alignment.Width">
            <summary>
            The width of the text.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.AlignmentDirection">
            <summary>
            Defines the direction of the alignment.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.AlignmentDirection.Left">
            <summary>
            Text will be left-aligned.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.AlignmentDirection.Right">
            <summary>
            Text will be right-aligned.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.Destructuring">
            <summary>
            Instructs the logger on how to store information about provided
            parameters.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.Destructuring.Default">
            <summary>
            Convert known types and objects to scalars, arrays to sequences.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.Destructuring.Stringify">
            <summary>
            Convert all types to scalar strings. Prefix name with '$'.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.Destructuring.Destructure">
            <summary>
            Convert known types to scalars, destructure objects and collections
            into sequences and structures. Prefix name with '@'.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateParser">
            <summary>
            Parses message template strings into sequences of text or property
            tokens.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateParser.Parse(System.String)">
            <summary>
            Parse the supplied message template.
            </summary>
            <param name="messageTemplate">The message template to parse.</param>
            <returns>A sequence of text or property tokens. Where the template
            is not syntactically valid, text tokens will be returned. The parser
            will make a best effort to extract valid property tokens even in the
            presence of parsing issues.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="messageTemplate"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken">
            <summary>
            An element parsed from a message template string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken.#ctor(System.Int32)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken"/>.
            </summary>
            <param name="startIndex">The token's start index in the template.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken.StartIndex">
            <summary>
            The token's start index in the template.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken.Length">
            <summary>
            The token's length.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Render the token to the output.
            </summary>
            <param name="properties">Properties that may be represented by the token.</param>
            <param name="output">Output for the rendered string.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken">
            <summary>
            A message template token representing a log event property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.#ctor(System.String,System.String,System.String,Datadog.Trace.Vendors.Serilog.Parsing.Destructuring)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken"/>.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="rawText">The token as it appears in the message template.</param>
            <param name="formatObsolete">The format applied to the property, if any.</param>
            <param name="destructuringObsolete">The destructuring strategy applied to the property, if any.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.#ctor(System.String,System.String,System.String,System.Nullable{Datadog.Trace.Vendors.Serilog.Parsing.Alignment},Datadog.Trace.Vendors.Serilog.Parsing.Destructuring,System.Int32)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken"/>.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="rawText">The token as it appears in the message template.</param>
            <param name="format">The format applied to the property, if any.</param>
            <param name="alignment">The alignment applied to the property, if any.</param>
            <param name="destructuring">The destructuring strategy applied to the property, if any.</param>
            <param name="startIndex">The token's start index in the template.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyName"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="rawText"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Length">
            <summary>
            The token's length.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Render the token to the output.
            </summary>
            <param name="properties">Properties that may be represented by the token.</param>
            <param name="output">Output for the rendered string.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Destructuring">
            <summary>
            Destructuring strategy applied to the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Format">
            <summary>
            Format applied to the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Alignment">
            <summary>
            Alignment applied to the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.IsPositional">
            <summary>
            True if the property name is a positional index; otherwise, false.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.TryGetPositionalValue(System.Int32@)">
            <summary>
            Try to get the integer value represented by the property name.
            </summary>
            <param name="position">The integer value, if present.</param>
            <returns>True if the property is positional, otherwise false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.TextToken">
            <summary>
            A message template token representing literal text.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.#ctor(System.String,System.Int32)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.TextToken"/>.
            </summary>
            <param name="text">The text of the token.</param>
            <param name="startIndex">The token's start index in the template.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="text"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.Length">
            <summary>
            The token's length.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Render the token to the output.
            </summary>
            <param name="properties">Properties that may be represented by the token.</param>
            <param name="output">Output for the rendered string.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.Text">
            <summary>
            The text of the token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Rendering.Casing.Format(System.String,System.String)">
            <summary>
            Apply upper or lower casing to <paramref name="value"/> when <paramref name="format"/> is provided.
            Returns <paramref name="value"/> when no or invalid format provided
            </summary>
            <returns>The provided <paramref name="value"/> with formatting applied</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Rendering.Padding.Apply(System.IO.TextWriter,System.String,System.Nullable{Datadog.Trace.Vendors.Serilog.Parsing.Alignment})">
            <summary>
            Writes the provided value to the output, applying direction-based padding when <paramref name="alignment"/> is provided.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Settings.KeyValuePairs.SurrogateConfigurationMethods">
             <summary>
             Contains "fake extension" methods for the Serilog configuration API.
             By default the settings knows how to find extension methods, but some configuration
             are actually "regular" method calls and would not be found otherwise.
            
             This static class contains internal methods that can be used instead.
            
             See also <seealso cref="T:Datadog.Trace.Vendors.Serilog.Settings.KeyValuePairs.CallableConfigurationMethodFinder"/>
             </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig">
            <summary>
            The advanced configuration options for DogStatsdService.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxMetricsInAsyncQueue">
            <summary>
            Gets or sets a value defining the maximum number of metrics in the queue
            (Metrics are sent asynchronously using a queue).
            A small value reduces memory usage whereas an higher value reduces
            latency (When <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> is null) or the number of messages
            dropped (When <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> is not null).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration">
            <summary>
            Gets or sets a value defining the maximum duration a call can block.
            If there are more metrics than `MaxMetricsInAsyncQueue` waiting to be sent:
                - if <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> is null, the metric send by a call to a
                  <see cref="T:Datadog.Trace.Vendors.StatsdClient.DogStatsd"/> or <see cref="T:Datadog.Trace.Vendors.StatsdClient.DogStatsdService"/> method will be dropped.
                - If <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> is not null, the metric send by a call to a
                  <see cref="T:Datadog.Trace.Vendors.StatsdClient.DogStatsd"/> or <see cref="T:Datadog.Trace.Vendors.StatsdClient.DogStatsdService"/> method will block for at most
                  <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> duration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.DurationBeforeSendingNotFullBuffer">
            <summary>
            Gets or sets a value defining how long
            DogStatsD waits before sending a not full buffer (Metrics are buffered before sent).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.UDSBufferFullBlockDuration">
            <summary>
            Gets or sets a value defining how long to wait when the UDS buffer is full
            (SocketError.NoBufferSpaceAvailable). A null value results in
            dropping the metric.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.TelemetryFlushInterval">
            <summary>
            Gets or sets a value defining the duration between two telemetry flushes.
            When this value is set at null, telemetry is disabled.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.OptionalTelemetryEndPoint">
            <summary>
            Gets or sets a value defining the telemetry endpoint. INTERNAL USAGE ONLY.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.AggregatorFlusher`1">
            <summary>
            AggregatorFlusher is responsible for flushing the aggregated `MetricStats` instances.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.Aggregators">
            <summary>
            Store all aggregators
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.CountAggregator">
            <summary>
            Aggregate <see cref="T:Datadog.Trace.Vendors.StatsdClient.Statistic.StatsMetric"/> instances of type <see cref="F:Datadog.Trace.Vendors.StatsdClient.MetricType.Count"/>
            by summing the value by <see cref="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.MetricStatsKey"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.GaugeAggregator">
            <summary>
            Aggregate `StatsMetric` instances of type `Gauge` by by keeping the last value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.MetricStatsKey">
            <summary>
            Dictionary Key for `MetricStats`.
            It is more efficient to use `MetricStatsKey` than creating a string from metric name and tags.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.SetAggregator">
            <summary>
            Aggregate `StatsMetric` instances of type `Set` by keeping the unique values.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.BufferBuilder">
            <summary>
            Append string values to a fixed size bytes buffer.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.BufferBuilderHandler">
            <summary>
            BufferBuilderHandler forwards metrics to ITransport and update telemetry.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.IStatsBufferizeFactory">
            <summary>
            IStatsBufferizeFactory is a factory for StatsBufferize.
            It is used to test StatsBufferize.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.StatsBufferize">
            <summary>
            StatsBufferize bufferizes metrics before sending them.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.ClientSideAggregationConfig">
            <summary>
            Define the configuration for the client side aggregation.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ClientSideAggregationConfig.MaxUniqueStatsBeforeFlush">
            <summary>
            Gets or sets the maximum number of unique stats before flushing.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ClientSideAggregationConfig.FlushInterval">
            <summary>
            Gets or sets the maximum interval duration between two flushes.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Status">
            <summary>
            The status of the service check.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.Status.OK">
            <summary>
            Status OK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.Status.WARNING">
            <summary>
            Status Warning
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.Status.CRITICAL">
            <summary>
            Status Critical
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.Status.UNKNOWN">
            <summary>
            Status Unknown
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.DogStatsd">
            <summary>
            DogStatsd is a collection of static methods that provide the same feature as DogStatsdService.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsd.TelemetryCounters">
            <summary>
            Gets the telemetry counters
            </summary>
            <value>The telemetry counters.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Configure(Datadog.Trace.Vendors.StatsdClient.StatsdConfig)">
            <summary>
            Configures the instance.
            Must be called before any other methods.
            </summary>
            <param name="config">The value of the config.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Event(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String[])">
            <summary>
            Records an event.
            </summary>
            <param name="title">The title of the event.</param>
            <param name="text">The text body of the event.</param>
            <param name="alertType">error, warning, success, or info (defaults to info).</param>
            <param name="aggregationKey">A key to use for aggregating events.</param>
            <param name="sourceType">The source type name.</param>
            <param name="dateHappened">The epoch timestamp for the event (defaults to the current time from the DogStatsD server).</param>
            <param name="priority">Specifies the priority of the event (normal or low).</param>
            <param name="hostname">The name of the host.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Counter(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Adjusts the specified counter by a given delta.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">A given delta.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Increment(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Increments the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of increment.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Decrement(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Decrements the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of decrement.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Gauge(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records the latest fixed value for the specified named gauge.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the gauge.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Histogram(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named histogram.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the histogram.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Distribution(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named distribution.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the distribution.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Set``1(System.String,``0,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Set(System.String,System.String,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Timer(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records an execution time in milliseconds.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The time in millisecond.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.StartTimer(System.String,System.Double,System.String[])">
            <summary>
            Creates a timer that records the execution time until Dispose is called on the returned value.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <returns>A disposable object that records the execution time until Dispose is called.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Time(System.Action,System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given action.
            </summary>
            <param name="action">The given action.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Time``1(System.Func{``0},System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given function.
            </summary>
            <param name="func">The given function.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the returned value of <paramref name="func"/>.</typeparam>
            <returns>The returned value of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.ServiceCheck(System.String,Datadog.Trace.Vendors.StatsdClient.Status,System.Nullable{System.Int32},System.String,System.String[],System.String)">
            <summary>
            Records a run status for the specified named service check.
            </summary>
            <param name="name">The name of the service check.</param>
            <param name="status">A constant describing the service status.</param>
            <param name="timestamp">The epoch timestamp for the service check (defaults to the current time from the DogStatsD server).</param>
            <param name="hostname">The hostname to associate with the service check.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <param name="message">Additional information or a description of why the status occurred.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Flush">
            <summary>
            Flushes all metrics.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Dispose">
            <summary>
            Disposes the instance of DogStatsdService.
            Flushes all metrics.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint">
            <summary>
            DogStatsdEndPoint is a DogStatsd endpoint (UDP or UDS).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint.ServerName">
            <summary>
            Gets or sets a value defining the name of the endpoint
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint.Port">
            <summary>
            Gets or sets a value defining the port number if any
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint.PipeName">
            <summary>
            Gets or sets the name of the pipe. INTERNAL USAGE ONLY.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint.AreEquals(Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint)">
            <summary>
            AreEquals returns whether `this` and `endPoint` have the same values
            </summary>
            <param name="endPoint">The endpoint to compare with `this`</param>
            <returns>Returns whether `this` and `endPoint` have the same values</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.DogStatsdService">
            <summary>
            DogStatsdService is a <a href="https://docs.datadoghq.com/developers/dogstatsd/?tab=net">DogStatsD client</a>.
            Dispose must be called to flush all the metrics.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.TelemetryCounters">
            <summary>
            Gets the telemetry counters
            </summary>
            <value>The telemetry counters.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Configure(Datadog.Trace.Vendors.StatsdClient.StatsdConfig)">
            <summary>
            Configures the instance.
            Must be called before any other methods.
            </summary>
            <param name="config">The value of the config.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Event(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String[])">
            <summary>
            Records an event.
            </summary>
            <param name="title">The title of the event.</param>
            <param name="text">The text body of the event.</param>
            <param name="alertType">error, warning, success, or info (defaults to info).</param>
            <param name="aggregationKey">A key to use for aggregating events.</param>
            <param name="sourceType">The source type name.</param>
            <param name="dateHappened">The epoch timestamp for the event (defaults to the current time from the DogStatsD server).</param>
            <param name="priority">Specifies the priority of the event (normal or low).</param>
            <param name="hostname">The name of the host.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Counter(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Adjusts the specified counter by a given delta.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">A given delta.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Increment(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Increments the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of increment.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Decrement(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Decrements the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of decrement.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Gauge(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records the latest fixed value for the specified named gauge.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the gauge.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Histogram(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named histogram.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the histogram.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Distribution(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named distribution.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the distribution.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Set``1(System.String,``0,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Set(System.String,System.String,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Timer(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records an execution time in milliseconds.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The time in millisecond.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.StartTimer(System.String,System.Double,System.String[])">
            <summary>
            Creates a timer that records the execution time until Dispose is called on the returned value.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <returns>A disposable object that records the execution time until Dispose is called.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Time(System.Action,System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given action.
            </summary>
            <param name="action">The given action.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Time``1(System.Func{``0},System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given function.
            </summary>
            <param name="func">The given function.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the returned value of <paramref name="func"/>.</typeparam>
            <returns>The returned value of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.ServiceCheck(System.String,Datadog.Trace.Vendors.StatsdClient.Status,System.Nullable{System.Int32},System.String,System.String[],System.String)">
            <summary>
            Records a run status for the specified named service check.
            </summary>
            <param name="name">The name of the service check.</param>
            <param name="status">A constant describing the service status.</param>
            <param name="timestamp">The epoch timestamp for the service check (defaults to the current time from the DogStatsD server).</param>
            <param name="hostname">The hostname to associate with the service check.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <param name="message">Additional information or a description of why the status occurred.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Flush">
            <summary>
            Flushes all metrics.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Dispose">
            <summary>
            Disposes an instance of DogStatsdService.
            Flushes all metrics.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.IDogStatsd">
            <summary>
            IDogStatsd is an interface over DogStatsdService.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.TelemetryCounters">
            <summary>
            Gets the telemetry counters
            </summary>
            <value>The telemetry counters.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Configure(Datadog.Trace.Vendors.StatsdClient.StatsdConfig)">
            <summary>
            Configures the instance.
            Must be called before any other methods.
            </summary>
            <param name="config">The value of the config.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Counter(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Adjusts the specified counter by a given delta.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">A given delta.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Decrement(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Decrements the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of decrement.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Event(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String[])">
            <summary>
            Records an event.
            </summary>
            <param name="title">The title of the event.</param>
            <param name="text">The text body of the event.</param>
            <param name="alertType">error, warning, success, or info (defaults to info).</param>
            <param name="aggregationKey">A key to use for aggregating events.</param>
            <param name="sourceType">The source type name.</param>
            <param name="dateHappened">The epoch timestamp for the event (defaults to the current time from the DogStatsD server).</param>
            <param name="priority">Specifies the priority of the event (normal or low).</param>
            <param name="hostname">The name of the host.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Gauge(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records the latest fixed value for the specified named gauge.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the gauge.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Histogram(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named histogram.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the histogram.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Distribution(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named distribution.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the distribution.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Increment(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Increments the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of increment.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Set``1(System.String,``0,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Set(System.String,System.String,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.StartTimer(System.String,System.Double,System.String[])">
            <summary>
            Creates a timer that records the execution time until Dispose is called on the returned value.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <returns>A disposable object that records the execution time until Dispose is called.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Time(System.Action,System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given action.
            </summary>
            <param name="action">The given action.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Time``1(System.Func{``0},System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given function.
            </summary>
            <param name="func">The given function.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the returned value of <paramref name="func"/>.</typeparam>
            <returns>The returned value of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Timer(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records an execution time in milliseconds.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The time in millisecond.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.ServiceCheck(System.String,Datadog.Trace.Vendors.StatsdClient.Status,System.Nullable{System.Int32},System.String,System.String[],System.String)">
            <summary>
            Records a run status for the specified named service check.
            </summary>
            <param name="name">The name of the service check.</param>
            <param name="status">A constant describing the service status.</param>
            <param name="timestamp">The epoch timestamp for the service check (defaults to the current time from the DogStatsD server).</param>
            <param name="hostname">The hostname to associate with the service check.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <param name="message">Additional information or a description of why the status occurred.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters">
            <summary>
            ITelemetryCounters contains the telemetry counters.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.MetricsSent">
            <summary>
            Gets the number of metrics sent.
            </summary>
            <value>The number of metrics sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.EventsSent">
            <summary>
            Gets the number of events sent.
            </summary>
            <value>The number of events sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.ServiceChecksSent">
            <summary>
            Gets the number of service checks sent.
            </summary>
            <value>The number of service checks sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.BytesSent">
            <summary>
            Gets the total number of bytes sent.
            </summary>
            <value>The total number of bytes sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.BytesDropped">
            <summary>
            Gets the total number of bytes dropped.
            </summary>
            <value>The total number of bytes dropped.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.PacketsSent">
            <summary>
            Gets the number of packets (UDP or UDS) sent.
            </summary>
            <value>The number of packets (UDP or UDS) sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.PacketsDropped">
            <summary>
            Gets the number of packets (UDP or UDS) dropped.
            </summary>
            <value>The number of packets (UDP or UDS) dropped.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.PacketsDroppedQueue">
            <summary>
            Gets the number of packets (UDP or UDS) dropped because the queue is full.
            </summary>
            <value>The number of packets (UDP or UDS) dropped because the queue is full.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Statistic.Stats">
            <summary>
            Stats stores the data for a metric or a service check or an event.
            The field `Metric`, `ServiceCheck` and `Event` are structures for performance reasons. These
            fields are embeded inside Stats and so do not require extra allocations.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Statistic.StatsEvent">
            <summary>
            Store the data for an event.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Statistic.StatsMetric">
            <summary>
            Store the data for a metric.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Statistic.StatsServiceCheck">
            <summary>
            Store the data for a service check.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.StatsdBuilder">
            <summary>
            StatsdBuilder builds an instance of `Statsd` from StatsdConfig.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.StatsdConfig">
            <summary>
            The configuration options for DogStatsdService.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.DefaultStatsdPort">
            <summary>
            The default port for UDP.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.DefaultStatsdMaxUDPPacketSize">
            <summary>
            The default UDP maximum packet size.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.EntityIdEnvVar">
            <summary>
            The name of the environment variable defining the global tags to be applied to every metric, event, and service check.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.DogStatsdPortEnvVar">
            <summary>
            The name of the environment variable defining the port of the targeted StatsD server.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.AgentHostEnvVar">
            <summary>
            The name of the environment variable defining the host name of the targeted StatsD server.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.AgentPipeNameEnvVar">
            <summary>
            The name of the environment variable defining the name of the pipe. INTERNAL USAGE ONLY.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ServiceEnvVar">
            <summary>
            The name of the environment variable defining the service name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.EnvironmentEnvVar">
            <summary>
            The name of the environment variable defining the environment name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.VersionEnvVar">
            <summary>
            The name of the environment variable defining the version of the service
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.StatsdClient.StatsdConfig"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdServerName">
            <summary>
            Gets or sets the host name of the targeted StatsD server.
            </summary>
            <value>The host name of the targeted StatsD server.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.PipeName">
            <summary>
            Gets or sets the name of the pipe. INTERNAL USAGE ONLY.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdPort">
            <summary>
            Gets or sets the port of the targeted StatsD server.
            </summary>
            <value>The port of the targeted StatsD server.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdMaxUDPPacketSize">
            <summary>
            Gets or sets the maximum UDP packet size.
            </summary>
            <value>The maximum UDP packet size.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdMaxUnixDomainSocketPacketSize">
            <summary>
            Gets or sets the maximum Unix domain socket packet size.
            </summary>
            <value>The maximum Unix domain socket packet size.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdTruncateIfTooLong">
            <summary>
            Gets or sets a value indicating whether we truncate the metric if it is too long.
            </summary>
            <value>The value indicating whether we truncate the metric if it is too long.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.Prefix">
            <summary>
            Gets or sets the prefix to apply to every metric, event, and service check.
            </summary>
            <value>The prefix to apply to every metric, event, and service check.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.Advanced">
            <summary>
            Gets the advanced configuration.
            </summary>
            <value>The advanced configuration</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.Environment">
            <summary>
            Gets or sets the environment tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ServiceVersion">
            <summary>
            Gets or sets the service version tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ServiceName">
            <summary>
            Gets or sets the service name tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ConstantTags">
            <summary>
            Gets or sets the global tags to be applied to every metric, event, and service check.
            </summary>
            <value>The global tags to be applied to every metric, event, and service check.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ClientSideAggregation">
            <summary>
            Gets or sets a value defining the client side aggregation config.
            If the value is null, the client side aggregation is not enabled.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.StatsRouter">
            <summary>
            Route `Stats` instances.
            Route a metric of type <see cref="F:Datadog.Trace.Vendors.StatsdClient.MetricType.Count"/>, <see cref="F:Datadog.Trace.Vendors.StatsdClient.MetricType.Gauge"/>
            and <see cref="F:Datadog.Trace.Vendors.StatsdClient.MetricType.Set"/> respectively to <see cref="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.CountAggregator"/>,
            <see cref="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.GaugeAggregator"/> and <see cref="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.SetAggregator"/>.
            Others stats are routed to <see cref="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.BufferBuilder"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Telemetry">
            <summary>
            Telemetry sends telemetry metrics.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Transport.ITransport.Send(System.Byte[],System.Int32)">
            <summary>
            Send the buffer.
            Must be thread safe as it is called to send metrics and the telemetry.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Transport.UDPTransport.Send(System.Byte[],System.Int32)">
            <summary>
            Send the buffer.
            Must be thread safe.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Transport.UnixDomainSocketTransport.Send(System.Byte[],System.Int32)">
            <summary>
            Send the buffer.
            Must be thread safe.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Worker.AsynchronousWorker`1">
            <summary>
            AsynchronousWorker performs tasks asynchronously.
            `handler` must be thread safe if `workerThreadCount` > 1.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Worker.ConcurrentBoundedBlockingQueue`1">
            <summary>
            ConcurrentBoundedBlockingQueue is the same as ConcurrentBoundedQueue but
            it waits for `waitTimeout` before dropping the value when the queue is full.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Worker.ConcurrentBoundedQueue`1">
            <summary>
            ConcurrentBoundedQueue is a ConcurrentQueue with a bounded number of items.
            Note: Value is not enqueued when the queue is full.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Worker.IAsynchronousWorkerHandler`1.OnNewValue(`0)">
            <summary>
            Called when a new value is ready to be handled by the worker.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Worker.IAsynchronousWorkerHandler`1.OnIdle">
            <summary>
            Called when the worker is waiting for new value to handle.
            </summary>
            <returns>Return true to make the worker in a sleep state, false otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Worker.IAsynchronousWorkerHandler`1.Flush">
            <summary>
            Called when AsynchronousWorker request a flush operation.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Worker.ManualResetEventWrapper">
            <summary>
            Simple wrapper arround ManualResetEventSlim.
            </summary>
        </member>
        <member name="T:Datadog.Trace.SourceGenerators.TagAttribute">
            <summary>
            Used to designate a property as corresponding to the provided
            <see cref="P:Datadog.Trace.SourceGenerators.TagAttribute.TagName"/>. Should only be used in ITags classes.
            Used for source generation.
            </summary>
        </member>
        <member name="M:Datadog.Trace.SourceGenerators.TagAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SourceGenerators.TagAttribute"/> class.
            </summary>
            <param name="tagName">The name of the datadog tag the property corresponds to</param>
        </member>
        <member name="P:Datadog.Trace.SourceGenerators.TagAttribute.TagName">
            <summary>
            Gets the name of the datadog tag the property corresponds to
            </summary>
        </member>
        <member name="T:Datadog.Trace.SourceGenerators.MetricAttribute">
            <summary>
            Used to designate a property as corresponding to the provided
            <see cref="P:Datadog.Trace.SourceGenerators.MetricAttribute.MetricName"/>. Should only be used in ITags classes.
            Used for source generation.
            </summary>
        </member>
        <member name="M:Datadog.Trace.SourceGenerators.MetricAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SourceGenerators.MetricAttribute"/> class.
            </summary>
            <param name="metricName">The name of the datadog metric the property corresponds to</param>
        </member>
        <member name="P:Datadog.Trace.SourceGenerators.MetricAttribute.MetricName">
            <summary>
            Gets the name of the datadog tag the property corresponds to
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute">
            <summary>
            This attribute is recognized by the CLR and allow us to disable visibility checks for certain assemblies (only from 4.6+)
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute"/> class.
            </summary>
            <param name="assemblyName">Assembly name</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.AssemblyName">
            <summary>
            Gets the assembly name
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute"/> class with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the associated parameter may be null.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/> class with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the associated parameter will not be null.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute"/> class with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/> class with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets a value indicating whether the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/> class with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/> class with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the return value will be null or not.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Numerics.BitOperations">
            <summary>
            Utility methods for intrinsic bit-twiddling operations.
            The methods use hardware intrinsics when available on the underlying platform,
            otherwise they use optimized software fallbacks.
            </summary>
        </member>
        <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt32,System.Int32)">
            <summary>
            Rotates the specified value left by the specified number of bits.
            Similar in behavior to the x86 instruction ROL.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="offset">The number of bits to rotate by.
            Any value outside the range [0..31] is treated as congruent mod 32.</param>
            <returns>The rotated value.</returns>
        </member>
    </members>
</doc>
